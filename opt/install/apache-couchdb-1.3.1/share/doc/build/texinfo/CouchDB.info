This is CouchDB.info, produced by makeinfo version 4.13 from
CouchDB.texi.

Generated by Sphinx 1.1.3.
INFO-DIR-SECTION Databases
START-INFO-DIR-ENTRY
* CouchDB: (CouchDB.info). The Apache CouchDB database
END-INFO-DIR-ENTRY

     Apache CouchDB 1.3.0, June 10, 2013

     Copyright (C) 2013, The Apache Software Foundation


File: CouchDB.info,  Node: Top,  Next: Introduction,  Up: (dir)

Apache CouchDB
**************

     Apache CouchDB 1.3.0, June 10, 2013

     Copyright (C) 2013, The Apache Software Foundation

* Menu:

* Introduction::
* API Basics::
* Configuration::
* Replicator Database::
* Design Docs::
* Query Servers::
* Changes Feed::
* API Reference::
* JSON Structure Reference::
* Configuration Reference::
* Release History::
* Index::

 --- The Detailed Node Listing ---

Introduction

* Using Futon::
* Using curl::

Using Futon

* Managing Databases and Documents::
* Configuring Replication::

API Basics

* Request Format and Responses::
* HTTP Headers::
* JSON Basics::
* HTTP Status Codes::
* HTTP Range Requests::

HTTP Headers

* Request Headers::
* Response Headers::

Configuration

* CouchDB Configuration Files::
* Configuration File Locations::
* Update Notifications::
* MochiWeb Server Options::
* Socket Options Configuration Setting::
* Virtual Hosts::
* HTTP Rewrite Handler::
* Configuring Server Administrators::
* OS Daemons::
* Native SSL Support::
* HTTP Proxying::
* Cross-Origin Resource Sharing::

Cross-Origin Resource Sharing

* Enabling CORS::
* Passing Credentials::
* Tightening Access::
* Configuration per vhost::
* Useful References::

Replicator Database

* Basics::
* Documents describing the same replication::
* Canceling replications::
* Server restart::
* Changing the Replicator Database::
* Replicating the replicator database::
* Delegations::

Design Docs

* View functions::
* Show functions::
* List functions::
* Update functions::
* Filter functions::
* Validate document update functions::

View functions

* Map functions::
* Reduce and rereduce functions::

Filter functions

* Classic filters::
* View filters::

Query Servers

* JavaScript::
* Erlang::

JavaScript

* Design functions context::
* CommonJS Modules::

Changes Feed

* Polling::
* Long Polling::
* Continuous::
* Event Source::

API Reference

* Database Methods::
* Document Methods::
* Local (non-replicating) Document Methods: Local non-replicating Document Methods.
* Design Document Methods::
* Miscellaneous Methods::
* Configuration Methods::
* Authentication Methods::

Database Methods

* GET /db::
* PUT /db::
* DELETE /db::
* GET /db/_changes::
* POST /db/_compact::
* POST /db/_compact/design-doc::
* POST /db/_view_cleanup::
* POST /db/_ensure_full_commit::
* POST /db/_bulk_docs::
* POST /db/_temp_view::
* POST /db/_purge::
* GET /db/_all_docs::
* POST /db/_all_docs::
* POST /db/_missing_revs::
* POST /db/_revs_diff::
* GET /db/_security::
* PUT /db/_security::
* GET /db/_revs_limit::
* PUT /db/_revs_limit::

GET /db/_changes

* Filtering::

POST /db/_bulk_docs

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::

POST /db/_purge

* Updating Indexes::

Document Methods

* POST /db::
* GET /db/doc::
* HEAD /db/doc::
* PUT /db/doc::
* DELETE /db/doc::
* COPY /db/doc::
* GET /db/doc/attachment::
* PUT /db/doc/attachment::
* DELETE /db/doc/attachment::

POST /db

* Specifying the Document ID::
* UUID generation algorithms::
* Batch Mode Writes::
* Including Attachments::

GET /db/doc

* Attachments::
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::

PUT /db/doc

* Updating an Existing Document::

COPY /db/doc

* Copying a Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

PUT /db/doc/attachment

* Updating an Existing Attachment::

Local (non-replicating) Document Methods

* GET /db/_local/local-doc::
* PUT /db/_local/local-doc::
* DELETE /db/_local/local-doc::
* COPY /db/_local/local-doc::

Design Document Methods

* GET /db/_design/design-doc::
* PUT /db/_design/design-doc::
* DELETE /db/_design/design-doc::
* COPY /db/_design/design-doc::
* GET /db/_design/design-doc/attachment::
* PUT /db/_design/design-doc/attachment::
* DELETE /db/_design/design-doc/attachment::
* GET /db/_design/design-doc/_info::
* GET /db/_design/design-doc/_view/view-name::
* POST /db/_design/design-doc/_view/view-name::
* GET /db/_design/design-doc/_show/show-name::
* POST /db/_design/design-doc/_show/show-name/doc::
* GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name::
* POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name::
* GET /db/_design/design-doc/_list/list-name/view-name::
* POST /db/_design/design-doc/_list/list-name/view-name::
* PUT /db/_design/design-doc/_update/updatename/doc::
* POST /db/_design/design-doc/_update/updatename::
* ALL /db/_design/design-doc/_rewrite/rewrite-name/anything::

COPY /db/_design/design-doc

* Copying a Design Document::
* Copying from a Specific Revision: Copying from a Specific Revision<2>.
* Copying to an Existing Design Document::

GET /db/_design/design-doc/_view/view-name

* Querying Views and Indexes::
* Sorting Returned Rows::
* Specifying Start and End Values::
* Using Limits and Skipping Rows::
* View Reduction and Grouping::

POST /db/_design/design-doc/_view/view-name

* Multi-document Fetching::

Miscellaneous Methods

* GET /::
* GET /_active_tasks::
* GET /_all_dbs::
* GET /_log::
* POST /_replicate::
* POST /_restart::
* GET /_stats::
* GET /_utils::
* GET /_uuids::
* GET /favicon.ico: GET /favicon ico.

POST /_replicate

* Replication Operation::
* Specifying the Source and Target Database::
* Single Replication::
* Continuous Replication::
* Canceling Continuous Replication::

Configuration Methods

* GET /_config::
* GET /_config/section::
* GET /_config/section/key::
* PUT /_config/section/key::
* DELETE /_config/section/key::

JSON Structure Reference

* All Database Documents::
* Bulk Document Response::
* Bulk Documents::
* Changes information for a database::
* CouchDB Document::
* CouchDB Error Status::
* CouchDB database information object::
* Design Document::
* Design Document Information::
* Document with Attachments::
* List of Active Tasks::
* Replication Settings::
* Replication Status::
* Request object::
* Response object::
* Returned CouchDB Document with Detailed Revision Info::
* Returned CouchDB Document with Revision Info::
* Returned Document with Attachments::
* Security Object::
* User Context Object::
* View Head Information::

Configuration Reference

* Configuration Groups::
* attachments Configuration Options::
* couchdb Configuration Options::
* daemons Configuration Options::
* httpd_db_handlers Configuration Options::
* couch_httpd_auth Configuration Options::
* httpd Configuration Options::
* httpd_design_handlers Configuration Options::
* httpd_global_handlers Configuration Options::
* log Configuration Options::
* query_servers Configuration Options::
* query_server_config Configuration Options::
* replicator Configuration Options::
* stats Configuration Options::
* uuids Configuration Options::
* cors Configuration Options::
* cors vhost Configuration::

Release History

* 1.3.x Branch: 1 3 x Branch.
* 1.2.x Branch: 1 2 x Branch.
* 1.1.x Branch: 1 1 x Branch.
* 1.0.x Branch: 1 0 x Branch.
* 0.11.x Branch: 0 11 x Branch.
* 0.10.x Branch: 0 10 x Branch.
* 0.9.x Branch: 0 9 x Branch.
* 0.8.x Branch: 0 8 x Branch.

1.3.x Branch

* Upgrade Notes::
* Version 1.3.1: Version 1 3 1.
* Version 1.3.0: Version 1 3 0.

Version 1.3.1

* Replicator::
* Log System::
* View Server::
* Miscellaneous::

Version 1.3.0

* Database core::
* Documentation::
* Futon::
* HTTP Interface::
* Log System: Log System<2>.
* Replicator: Replicator<2>.
* Security::
* Source Repository::
* Storage System::
* Test Suite::
* URL Rewriter & Vhosts::
* UUID Algorithms::
* Query and View Server::
* Windows::

1.2.x Branch

* Upgrade Notes: Upgrade Notes<2>.
* Version 1.2.0: Version 1 2 0.

Upgrade Notes

* Security changes::
* Database Compression::

Version 1.2.0

* Authentication::
* Build System::
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<2>.
* Replicator: Replicator<3>.
* Storage System: Storage System<2>.
* View Server: View Server<2>.
* OAuth::

1.1.x Branch

* Version 1.1.1: Version 1 1 1.
* Version 1.1.0: Version 1 1 0.

Version 1.1.0

* Externals::
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<3>.
* Replicator: Replicator<4>.
* Storage System: Storage System<3>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<2>.
* View Server: View Server<3>.

1.0.x Branch

* Version 1.0.3: Version 1 0 3.
* Version 1.0.2: Version 1 0 2.
* Version 1.0.1: Version 1 0 1.
* Version 1.0.0: Version 1 0 0.

Version 1.0.3

* General::
* Etap Test Suite::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<4>.
* Replicator: Replicator<5>.
* Security: Security<2>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.

Version 1.0.2

* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<6>.
* Storage System: Storage System<5>.
* View Server: View Server<4>.

Version 1.0.1

* Authentication: Authentication<2>.
* Build and System Integration::
* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<7>.
* Storage System: Storage System<6>.

Version 1.0.0

* Security: Security<3>.
* Storage System: Storage System<7>.
* View Server: View Server<5>.

0.11.x Branch

* Version 0.11.2: Version 0 11 2.
* Version 0.11.1: Version 0 11 1.
* Version 0.11.0: Version 0 11 0.

Version 0.11.2

* Authentication: Authentication<3>.
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<7>.
* Replicator: Replicator<8>.
* Security: Security<4>.

Version 0.11.1

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<8>.
* JavaScript Clients::
* Log System: Log System<4>.
* Replication System::
* Security: Security<5>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<6>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.

Version 0.11.0

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<9>.
* Replication::
* Runtime Statistics::
* Security: Security<6>.
* Storage System: Storage System<9>.
* View Server: View Server<7>.

0.10.x Branch

* Version 0.10.1: Version 0 10 1.
* Version 0.10.0: Version 0 10 0.

Version 0.10.1

* Build and System Integration: Build and System Integration<4>.
* Replicator: Replicator<9>.
* Query Server::
* Stats::

Version 0.10.0

* Build and System Integration: Build and System Integration<5>.
* HTTP Interface: HTTP Interface<10>.
* Storage Format::
* View Server: View Server<8>.

0.9.x Branch

* Version 0.9.2: Version 0 9 2.
* Version 0.9.1: Version 0 9 1.
* Version 0.9.0: Version 0 9 0.

Version 0.9.2

* Build and System Integration: Build and System Integration<6>.
* Replication: Replication<2>.

Version 0.9.1

* Build and System Integration: Build and System Integration<7>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<11>.
* JavaScript View Server::
* Replication: Replication<3>.

Version 0.9.0

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<12>.
* Replication: Replication<4>.

0.8.x Branch

* Version 0.8.1-incubating: Version 0 8 1-incubating.
* Version 0.8.0-incubating: Version 0 8 0-incubating.

Version 0.8.1-incubating

* Build and System Integration: Build and System Integration<9>.
* Database Core: Database Core<3>.
* Futon: Futon<11>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<13>.

Version 0.8.0-incubating

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<4>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<14>.


File: CouchDB.info,  Node: Introduction,  Next: API Basics,  Prev: Top,  Up: Top

1 Introduction
**************

There are two interfaces to CouchDB, the built-in Futon web-based
interface and the CouchDB API accessed through the HTTP REST interface.
The former is the simplest way to view and monitor your CouchDB
installation and perform a number of basic database and system
operations. More information on using the Futon interface can be found
in *note Using Futon: 3.

  The primary way to interact with the CouchDB API is to use a client
library or other interface that provides access to the underlying
functionality through your chosen language or platform. However, since
the API is supported through HTTP REST, you can interact with your
CouchDB with any solution that supports the HTTP protocol.

  There are a number of different tools that talk the HTTP protocol and
allow you to set and configure the necessary information. One tool for
this that allows for access from the command-line is `curl'. See *note
Using curl: 4.

* Menu:

* Using Futon::
* Using curl::

Using Futon

* Managing Databases and Documents::
* Configuring Replication::


File: CouchDB.info,  Node: Using Futon,  Next: Using curl,  Up: Introduction

1.1 Using Futon
===============

Futon is a native web-based interface built into CouchDB. It provides a
basic interface to the majority of the functionality, including the
ability to create, update, delete and view documents and views, provides
access to the configuration parameters, and an interface for initiating
replication.

  The default view is the Overview page which provides you with a list
of the databases. The basic structure of the page is consistent
regardless of the section you are in. The main panel on the left
provides the main interface to the databases, configuration or
replication systems. The side panel on the right provides navigation to
the main areas of Futon interface:

 [image src="futon-overview.png" alt="Futon Overview" ]

Figure: Futon Overview

  The main sections are:

   - Overview

     The main overview page, which provides a list of the databases and
     provides the interface for querying the database and creating and
     updating documents. See *note Managing Databases and Documents: 6.

   - Configuration

     An interface into the configuration of your CouchDB installation.
     The interface allows you to edit the different configurable
     parameters.  For more details on configuration, see *note
     Configuration: 7.

   - Replicator

     An interface to the replication system, enabling you to initiate
     replication between local and remote databases. See *note
     Configuring Replication: 8.

   - Status

     Displays a list of the running background tasks on the server.
     Background tasks include view index building, compaction and
     replication. The Status page is an interface to the *note Active
     Tasks: 9. API call.

   - Verify Installation

     The Verify Installation allows you to check whether all of the
     components of your CouchDB installation are correctly installed.

   - Test Suite

     The Test Suite section allows you to run the built-in test suite.
     This executes a number of test routines entirely within your
     browser to test the API and functionality of your CouchDB
     installation. If you select this page, you can run the tests by
     using the Run All button. This will execute all the tests, which
     may take some time.

* Menu:

* Managing Databases and Documents::
* Configuring Replication::


File: CouchDB.info,  Node: Managing Databases and Documents,  Next: Configuring Replication,  Up: Using Futon

1.1.1 Managing Databases and Documents
--------------------------------------

You can manage databases and documents within Futon using the main
Overview section of the Futon interface.

  To create a new database, click the Create Database ELLIPSIS button.
You will be prompted for the database name, as shown in the figure
below.

 [image src="futon-createdb.png" alt="Creating a Database" ]

Figure: Creating a Database

  Once you have created the database (or selected an existing one), you
will be shown a list of the current documents. If you create a new
document, or select an existing document, you will be presented with the
edit document display.

  Editing documents within Futon requires selecting the document and
then editing (and setting) the fields for the document individually
before saving the document back into the database.

  For example, the figure below shows the editor for a single document,
a newly created document with a single ID, the document `_id' field.

 [image src="futon-editdoc.png" alt="Editing a Document" ]

Figure: Editing a Document

  To add a field to the document:

  1. Click Add Field.

  2. In the fieldname box, enter the name of the field you want to
     create.  For example, “company”.

  3. Click the green tick next to the field name to confirm the field
     name change.

  4. Double-click the corresponding Value cell.

  5. Enter a company name, for example “Example”.

  6. Click the green tick next to the field value to confirm the field
     value.

  7. The document is still not saved as this point. You must explicitly
     save the document by clicking the Save Document button at the top
     of the page. This will save the document, and then display the new
     document with the saved revision information (the `_rev' field).

      [image src="futon-editeddoc.png" alt="Edited Document" ]

     Figure: Edited Document


  The same basic interface is used for all editing operations within
Futon.  You _must_ remember to save the individual element (fieldname,
value) using the green tick button, before then saving the document.


File: CouchDB.info,  Node: Configuring Replication,  Prev: Managing Databases and Documents,  Up: Using Futon

1.1.2 Configuring Replication
-----------------------------

When you click the Replicator option within the Tools menu you are
presented with the Replicator screen. This allows you to start
replication between two databases by filling in or select the
appropriate options within the form provided.

 [image src="futon-replform.png" alt="Replication Form" ]

Figure: Replication Form

  To start a replication process, either the select the local database
or enter a remote database name into the corresponding areas of the
form.  Replication occurs from the database on the left to the database
on the right.

  If you are specifying a remote database name, you must specify the
full URL of the remote database (including the host, port number and
database name). If the remote instance requires authentication, you can
specify the username and password as part of the URL, for example
`http://username:pass@remotehost:5984/demo'.

  To enable continuous replication, click the Continuous checkbox.

  To start the replication process, click the Replicate button. The
replication process should start and will continue in the background. If
the replication process will take a long time, you can monitor the
status of the replication using the Status option under the Tools menu.

  Once replication has been completed, the page will show the
information returned when the replication process completes by the API.

  The Replicator tool is an interface to the underlying replication API.
For more information, see *note POST /_replicate: c. For more
information on replication, see *note Replicator Database: d.


File: CouchDB.info,  Node: Using curl,  Prev: Using Futon,  Up: Introduction

1.2 Using `curl'
================

The `curl' utility is a command line tool available on Unix, Linux, Mac
OS X and Windows and many other platforms. `curl' provides easy access
to the HTTP protocol (among others) directly from the command-line and
is therefore an ideal way of interacting with CouchDB over the HTTP
REST API.

  For simple `GET' requests you can supply the URL of the request. For
example, to get the database information:

    shell> curl http://127.0.0.1:5984

This returns the database information (formatted in the output below for
clarity):

    {
       "couchdb" : "Welcome",
       "version" : "|version|",
    }


     Note: For some URLs, especially those that include special
     characters such as ampersand, exclamation mark, or question mark,
     you should quote the URL you are specifying on the command line.
     For example:

         shell> curl 'http://couchdb:5984/_uuids?count=5'



  You can explicitly set the HTTP command using the `-X' command line
option. For example, when creating a database, you set the name of the
database in the URL you send using a PUT request:

    shell> curl -X PUT http://127.0.0.1:5984/demo
    {"ok":true}

But to obtain the database information you use a `GET' request (with
the return information formatted for clarity):

    shell> curl -X GET http://127.0.0.1:5984/demo
    {
       "compact_running" : false,
       "doc_count" : 0,
       "db_name" : "demo",
       "purge_seq" : 0,
       "committed_update_seq" : 0,
       "doc_del_count" : 0,
       "disk_format_version" : 5,
       "update_seq" : 0,
       "instance_start_time" : "1306421773496000",
       "disk_size" : 79
    }

For certain operations, you must specify the content type of request,
which you do by specifying the `Content-Type' header using the `-H'
command-line option:

    shell> curl -H 'Content-Type: application/json' http://127.0.0.1:5984/_uuids

You can also submit 'payload' data, that is, data in the body of the
HTTP request using the `-d' option. This is useful if you need to
submit JSON structures, for example document data, as part of the
request. For example, to submit a simple document to the `demo'
database:

    shell> curl -H 'Content-Type: application/json' \
                -X POST http://127.0.0.1:5984/demo \
                -d '{"company": "Example, Inc."}'
    {"ok":true,"id":"8843faaf0b831d364278331bc3001bd8",
     "rev":"1-33b9fbce46930280dab37d672bbc8bb9"}

In the above example, the argument after the `-d' option is the JSON of
the document we want to submit.

  The document can be accessed by using the automatically generated
document ID that was returned:

    shell> curl -X GET http://127.0.0.1:5984/demo/8843faaf0b831d364278331bc3001bd8
    {"_id":"8843faaf0b831d364278331bc3001bd8",
     "_rev":"1-33b9fbce46930280dab37d672bbc8bb9",
     "company":"Example, Inc."}

The API samples in the *note API Basics: f. show the HTTP command, URL
and any payload information that needs to be submitted (and the
expected return value). All of these examples can be reproduced using
`curl' with the command-line examples shown above.


File: CouchDB.info,  Node: API Basics,  Next: Configuration,  Prev: Introduction,  Up: Top

2 API Basics
************

The CouchDB API is the primary method of interfacing to a CouchDB
instance. Requests are made using HTTP and requests are used to request
information from the database, store new data, and perform views and
formatting of the information stored within the documents.

  Requests to the API can be categorised by the different areas of the
CouchDB system that you are accessing, and the HTTP method used to send
the request. Different methods imply different operations, for example
retrieval of information from the database is typically handled by the
`GET' operation, while updates are handled by either a `POST' or `PUT'
request. There are some differences between the information that must
be supplied for the different methods. For a guide to the basic HTTP
methods and request structure, see *note Request Format and Responses:
12.

  For nearly all operations, the submitted data, and the returned data
structure, is defined within a JavaScript Object Notation (JSON) object.
Basic information on the content and data types for JSON are provided in
*note JSON Basics: 13.

  Errors when accessing the CouchDB API are reported using standard HTTP
Status Codes. A guide to the generic codes returned by CouchDB are
provided in *note HTTP Status Codes: 14.

  When accessing specific areas of the CouchDB API, specific information
and examples on the HTTP methods and request, JSON structures, and error
codes are provided. For a guide to the different areas of the API, see
*note API Reference: 15.

* Menu:

* Request Format and Responses::
* HTTP Headers::
* JSON Basics::
* HTTP Status Codes::
* HTTP Range Requests::


File: CouchDB.info,  Node: Request Format and Responses,  Next: HTTP Headers,  Up: API Basics

2.1 Request Format and Responses
================================

CouchDB supports the following HTTP request methods:

   - `GET'

     Request the specified item. As with normal HTTP requests, the
     format of the URL defines what is returned. With CouchDB this can
     include static items, database documents, and configuration and
     statistical information. In most cases the information is returned
     in the form of a JSON document.

   - `HEAD'

     The `HEAD' method is used to get the HTTP header of a `GET'
     request without the body of the response.

   - `POST'

     Upload data. Within CouchDB `POST' is used to set values, including
     uploading documents, setting document values, and starting certain
     administration commands.

   - `PUT'

     Used to put a specified resource. In CouchDB `PUT' is used to
     create new objects, including databases, documents, views and
     design documents.

   - `DELETE'

     Deletes the specified resource, including documents, views, and
     design documents.

   - `COPY'

     A special method that can be used to copy documents and objects.

  If you use the an unsupported HTTP request type with a URL that does
not support the specified type, a 405 error will be returned, listing
the supported HTTP methods. For example:

    {
        "error":"method_not_allowed",
        "reason":"Only GET,HEAD allowed"
    }

The CouchDB design document API and the functions when returning HTML
(for example as part of a show or list) enables you to include custom
HTTP headers through the `headers' block of the return object.


File: CouchDB.info,  Node: HTTP Headers,  Next: JSON Basics,  Prev: Request Format and Responses,  Up: API Basics

2.2 HTTP Headers
================

Because CouchDB uses HTTP for all communication, you need to ensure that
the correct HTTP headers are supplied (and processed on retrieval) so
that you get the right format and encoding. Different environments and
clients will be more or less strict on the effect of these HTTP headers
(especially when not present). Where possible you should be as specific
as possible.

* Menu:

* Request Headers::
* Response Headers::


File: CouchDB.info,  Node: Request Headers,  Next: Response Headers,  Up: HTTP Headers

2.2.1 Request Headers
---------------------

   - `Content-type'

     Specifies the content type of the information being supplied within
     the request. The specification uses MIME type specifications. For
     the majority of requests this will be JSON (`application/json').
     For some settings the MIME type will be plain text. When uploading
     attachments it should be the corresponding MIME type for the
     attachment or binary (`application/octet-stream').

     The use of the `Content-type' on a request is highly recommended.

   - `Accept'

     Specifies the list of accepted data types to be returned by the
     server (i.e. that are accepted/understandable by the client). The
     format should be a list of one or more MIME types, separated by
     colons.

     For the majority of requests the definition should be for JSON data
     (`application/json'). For attachments you can either specify the
     MIME type explicitly, or use `*/*' to specify that all file types
     are supported. If the `Accept' header is not supplied, then the
     `*/*' MIME type is assumed (i.e. client accepts all formats).

     The use of `Accept' in queries for CouchDB is not required, but is
     highly recommended as it helps to ensure that the data returned can
     be processed by the client.

     If you specify a data type using the `Accept' header, CouchDB will
     honor the specified type in the `Content-type' header field
     returned. For example, if you explicitly request `application/json'
     in the `Accept' of a request, the returned HTTP headers will use
     the value in the returned `Content-type' field.

     For example, when sending a request without an explicit `Accept'
     header, or when specifying `*/*':

         GET /recipes HTTP/1.1
         Host: couchdb:5984
         Accept: */*

     The returned headers are:

         Server: CouchDB/1.0.1 (Erlang OTP/R13B)
         Date: Thu, 13 Jan 2011 13:39:34 GMT
         Content-Type: text/plain;charset=utf-8
         Content-Length: 227
         Cache-Control: must-revalidate

     Note that the returned content type is `text/plain' even though the
     information returned by the request is in JSON format.

     Explicitly specifying the `Accept' header:

         GET /recipes HTTP/1.1
         Host: couchdb:5984
         Accept: application/json

     The headers returned include the `application/json' content type:

         Server: CouchDB/|version| (Erlang OTP/R13B)
         Date: Thu, 13 Jan 2011 13:40:11 GMT
         Content-Type: application/json
         Content-Length: 227
         Cache-Control: must-revalidate




File: CouchDB.info,  Node: Response Headers,  Prev: Request Headers,  Up: HTTP Headers

2.2.2 Response Headers
----------------------

Response headers are returned by the server when sending back content
and include a number of different header fields, many of which are
standard HTTP response header and have no significance to CouchDB
operation. The list of response headers important to CouchDB are listed
below.

   - `Content-type'

     Specifies the MIME type of the returned data. For most request, the
     returned MIME type is `text/plain'. All text is encoded in Unicode
     (UTF-8), and this is explicitly stated in the returned
     `Content-type', as `text/plain;charset=utf-8'.

   - `Cache-control'

     The cache control HTTP response header provides a suggestion for
     client caching mechanisms on how to treat the returned information.
     CouchDB typically returns the `must-revalidate', which indicates
     that the information should be revalidated if possible. This is
     used to ensure that the dynamic nature of the content is correctly
     updated.

   - `Content-length'

     The length (in bytes) of the returned content.

   - `Etag'

     The `Etag' HTTP header field is used to show the revision for a
     document, or a view.

     ETags have been assigned to a map/reduce group (the collection of
     views in a single design document). Any change to any of the
     indexes for those views would generate a new ETag for all view
     URL's in a single design doc, even if that specific view's results
     had not changed.

     Each `_view' URL has its own ETag which only gets updated when
     changes are made to the database that effect that index. If the
     index for that specific view does not change, that view keeps the
     original ETag head (therefore sending back 304 Not Modified more
     often).


File: CouchDB.info,  Node: JSON Basics,  Next: HTTP Status Codes,  Prev: HTTP Headers,  Up: API Basics

2.3 JSON Basics
===============

The majority of requests and responses to CouchDB use the JavaScript
Object Notation (JSON) for formatting the content and structure of the
data and responses.

  JSON is used because it is the simplest and easiest to use solution
for working with data within a web browser, as JSON structures can be
evaluated and used as JavaScript objects within the web browser
environment. JSON also integrates with the server-side JavaScript used
within CouchDB.

  JSON supports the same basic types as supported by JavaScript, these
are:

   - Number (either integer or floating-point).

   - String; this should be enclosed by double-quotes and supports
     Unicode characters and backslash escaping. For example:

         "A String"


   - Boolean - a `true' or `false' value. You can use these strings
     directly. For example:

         { "value": true}


   - Array - a list of values enclosed in square brackets. For example:

         ["one", "two", "three"]


   - Object - a set of key/value pairs (i.e. an associative array, or
     hash). The key must be a string, but the value can be any of the
     supported JSON values. For example:

         {
            "servings" : 4,
            "subtitle" : "Easy to make in advance, and then cook when ready",
            "cooktime" : 60,
            "title" : "Chicken Coriander"
         }

     In CouchDB, the JSON object is used to represent a variety of
     structures, including the main CouchDB document.

  Parsing JSON into a JavaScript object is supported through the
`JSON.parse()' function in JavaScript, or through various libraries that
will perform the parsing of the content into a JavaScript object for
you. Libraries for parsing and generating JSON are available in many
languages, including Perl, Python, Ruby, Erlang and others.

     Warning: Care should be taken to ensure that your JSON structures
     are valid, invalid structures will cause CouchDB to return an HTTP
     status code of 500 (server error).


File: CouchDB.info,  Node: HTTP Status Codes,  Next: HTTP Range Requests,  Prev: JSON Basics,  Up: API Basics

2.4 HTTP Status Codes
=====================

With the interface to CouchDB working through HTTP, error codes and
statuses are reported using a combination of the HTTP status code
number, and corresponding data in the body of the response data.

  A list of the error codes returned by CouchDB, and generic
descriptions of the related errors are provided below. The meaning of
different status codes for specific request types are provided in the
corresponding API call reference.

   - `200 - OK'

     Request completed successfully.

   - `201 - Created'

     Document created successfully.

   - `202 - Accepted'

     Request has been accepted, but the corresponding operation may not
     have completed. This is used for background operations, such as
     database compaction.

   - `304 - Not Modified'

     The additional content requested has not been modified. This is
     used with the ETag system to identify the version of information
     returned.

   - `400 - Bad Request'

     Bad request structure. The error can indicate an error with the
     request URL, path or headers. Differences in the supplied MD5 hash
     and content also trigger this error, as this may indicate message
     corruption.

   - `401 - Unauthorized'

     The item requested was not available using the supplied
     authorization, or authorization was not supplied.

   - `403 - Forbidden'

     The requested item or operation is forbidden.

   - `404 - Not Found'

     The requested content could not be found. The content will include
     further information, as a JSON object, if available. The structure
     will contain two keys, `error' and `reason'. For example:

         {"error":"not_found","reason":"no_db_file"}


   - `405 - Resource Not Allowed'

     A request was made using an invalid HTTP request type for the URL
     requested. For example, you have requested a `PUT' when a `POST'
     is required. Errors of this type can also triggered by invalid URL
     strings.

   - `406 - Not Acceptable'

     The requested content type is not supported by the server.

   - `409 - Conflict'

     Request resulted in an update conflict.

   - `412 - Precondition Failed'

     The request headers from the client and the capabilities of the
     server do not match.

   - `415 - Bad Content Type'

     The content types supported, and the content type of the
     information being requested or submitted indicate that the content
     type is not supported.

   - `416 - Requested Range Not Satisfiable'

     The range specified in the request header cannot be satisfied by
     the server.

   - `417 - Expectation Failed'

     When sending documents in bulk, the bulk load operation failed.

   - `500 - Internal Server Error'

     The request was invalid, either because the supplied JSON was
     invalid, or invalid information was supplied as part of the
     request.


File: CouchDB.info,  Node: HTTP Range Requests,  Prev: HTTP Status Codes,  Up: API Basics

2.5 HTTP Range Requests
=======================

HTTP allows you to specify byte ranges for requests. This allows the
implementation of resumable downloads and skippable audio and video
streams alike. This is available for all attachments inside CouchDB.

  This is just a real quick run through how this looks under the hood.
Usually, you will have larger binary files to serve from CouchDB, like
MP3s and videos, but to make things a little more obvious, I use a text
file here (Note that I use the `application/octet-stream' Content-Type
instead of `text/plain').

    shell> cat file.txt
    My hovercraft is full of eels!

Now let's store this text file as an attachment in CouchDB. First, we
create a database:

    shell> curl -X PUT http://127.0.0.1:5984/test
    {"ok":true}

Then we create a new document and the file attachment in one go:

    shell> curl -X PUT http://127.0.0.1:5984/test/doc/file.txt \
                -H "Content-Type: application/octet-stream" -d@file.txt
    {"ok":true,"id":"doc","rev":"1-287a28fa680ae0c7fb4729bf0c6e0cf2"}

Now we can request the whole file easily:

    shell> curl -X GET http://127.0.0.1:5984/test/doc/file.txt
    My hovercraft is full of eels!

But say we only want the first 13 bytes:

    shell> curl -X GET http://127.0.0.1:5984/test/doc/file.txt \
                -H "Range: bytes=0-12"
    My hovercraft

HTTP supports many ways to specify single and even multiple byte
ranges. Read all about it in RFC 2616(1).

     Note: Databases that have been created with CouchDB 1.0.2 or
     earlier will support range requests in 1.3, but they are using a
     less-optimal algorithm. If you plan to make heavy use of this
     feature, make sure to compact your database with CouchDB 1.3 to
     take advantage of a better algorithm to find byte ranges.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2616#section-14.27


File: CouchDB.info,  Node: Configuration,  Next: Replicator Database,  Prev: API Basics,  Up: Top

3 Configuration
***************

* Menu:

* CouchDB Configuration Files::
* Configuration File Locations::
* Update Notifications::
* MochiWeb Server Options::
* Socket Options Configuration Setting::
* Virtual Hosts::
* HTTP Rewrite Handler::
* Configuring Server Administrators::
* OS Daemons::
* Native SSL Support::
* HTTP Proxying::
* Cross-Origin Resource Sharing::


File: CouchDB.info,  Node: CouchDB Configuration Files,  Next: Configuration File Locations,  Up: Configuration

3.1 CouchDB Configuration Files
===============================


File: CouchDB.info,  Node: Configuration File Locations,  Next: Update Notifications,  Prev: CouchDB Configuration Files,  Up: Configuration

3.2 Configuration File Locations
================================

CouchDB reads files from the following locations, in the following
order.

  1. `PREFIX/default.ini'

  2. `PREFIX/default.d/*'

  3. `PREFIX/local.ini'

  4. `PREFIX/local.d/*'

  Settings in successive documents override the settings in earlier
entries. For example, setting the `bind_address' parameter in
`local.ini' would override any setting in `default.ini'.

     Warning: The `default.ini' file may be overwritten during an
     upgrade or re-installation, so localised changes should be made to
     the `local.ini' file or files within the `local.d' directory.


File: CouchDB.info,  Node: Update Notifications,  Next: MochiWeb Server Options,  Prev: Configuration File Locations,  Up: Configuration

3.3 Update Notifications
========================


File: CouchDB.info,  Node: MochiWeb Server Options,  Next: Socket Options Configuration Setting,  Prev: Update Notifications,  Up: Configuration

3.4 MochiWeb Server Options
===========================

Server options for the MochiWeb component of CouchDB can be added to the
configuration files. Settings should be added to the `server_options'
option of the `[httpd]' section of `local.ini'. For example:

    [httpd]
    server_options = [{backlog, 128}, {acceptor_pool_size, 16}]



File: CouchDB.info,  Node: Socket Options Configuration Setting,  Next: Virtual Hosts,  Prev: MochiWeb Server Options,  Up: Configuration

3.5 Socket Options Configuration Setting
========================================

The socket options for the listening socket in CouchDB can now be set
within the CouchDB configuration file. The setting should be added to
the `[httpd]' section of the file using the option name
`socket_options'. The specification is as a list of tuples. For example:

    [httpd]
    socket_options = [{recbuf, 262144}, {sndbuf, 262144}, {nodelay, true}]

The options supported are a subset of full options supported by the
TCP/IP stack. A list of the supported options are provided in the
Erlang inet(1) documentation.

  ---------- Footnotes ----------

  (1) http://www.erlang.org/doc/man/inet.html#setopts-2


File: CouchDB.info,  Node: Virtual Hosts,  Next: HTTP Rewrite Handler,  Prev: Socket Options Configuration Setting,  Up: Configuration

3.6 Virtual Hosts
=================

CouchDB, since 0.11.0, can map requests to different locations based on
the `Host' header, even if they arrive on the some inbound IP address.

  This allows different virtual hosts on the same machine to map to
different databases or design documents, etc. The most common use case
is to map a virtual host to a Rewrite Handler, to provide full control
over the application's URIs.

  To add a virtual host, add a CNAME pointer to the DNS for your domain
name. For development and testing, it is sufficient to add an entry in
the hosts file, typically `/etc/hosts`' on Unix-like operating systems:

    # CouchDB vhost definitions, refer to local.ini for further details
    127.0.0.1       sofa.couchdb

Test that this is working:

    $ ping sofa.couchdb
    PING sofa.couchdb (127.0.0.1) 56(84) bytes of data.
    64 bytes from localhost.localdomain (127.0.0.1): icmp_req=1 ttl=64 time=0.025 ms
    64 bytes from localhost.localdomain (127.0.0.1): icmp_req=2 ttl=64 time=0.051 ms
    ^C

Finally, add an entry to your *note configuration file: 7. in the
`[vhosts]' section:

    [vhosts]
    sofa.couchdb:5984 = /sofa/_design/sofa/_rewrite

If your CouchDB is listening on the default HTTP port, or is sitting
behind a proxy, then don't specify a port number in the vhost key.

  With the above setup, a request to `http://sofa.couchdb:5984/sweet-o'
will be mapped to
`http://127.0.0.1:5984/sofa/_design/sofa/_rewrite/sweet-o'

  New in version 0.11.0: added `vhosts' functionality


File: CouchDB.info,  Node: HTTP Rewrite Handler,  Next: Configuring Server Administrators,  Prev: Virtual Hosts,  Up: Configuration

3.7 HTTP Rewrite Handler
========================

Following on from *note virtual hosts: 26, CouchDB includes a custom
URL rewriter.  All rewriting is done from
`/dbname/_design/ddocname/_rewrite' by default.

  The rewriter is flexible, and can handle methods and custom query
formats.

  Each rule should be in the `rewrites' top-level key of the design doc.
Example of a complete rule :

    {
        ....
        "rewrites": [
        {
            "from": "",
            "to": "index.html",
            "method": "GET",
            "query": {}
        }
        ]
    }

*from*: is the path rule used to bind current uri to the rule. It uses
pattern matching for that.

  *to*: rule to rewrite an url. It can contain variables depending on
binding variables discovered during pattern matching and query args
(url args and from the query member.)

  *method*: method to bind the request method to the rule. If method is
missing, any method will be matched in the rewrite.

  *query*: optional query arguments, that may contain dynamic variables,
by binding keys in the to be used with the matching URL.

  `to' and `from' are paths with patterns. The pattern can be strings
starting with  `:' or `*', for example `/somepath/:var/*'.

  The pattern matching is done by first matching the request method to a
rule. Then it will try to match the path to one specific rule. If no
rule match, then a 404 error is displayed.

  The path is converted into an erlang list, by regex splitting on `/'.
Each variable is converted into an atom. The subsequent pattern
matching step is done by splitting `/' in the request url into a list
of atoms. A string pattern will match the equivalent token. The `*'
atom will match any number of tokens, but may only be present as the
last pattern in the path. If all tokens are matched, and all path terms
have been consumed, then the overall path specification matches.

  Once a matching `from' rule is found we rewrite the request url using
the `from', `to', and `query' members. Each identified token will be
reused within the rule, and in the subsequent query if required. The
identified tokens are matched to the rule and will replace var. If `*'
is found in the rule it will contain any remaining suffix.

  The rewriter is re-entrant, and has a configurable recursion limit,
set by default at 100.


File: CouchDB.info,  Node: Configuring Server Administrators,  Next: OS Daemons,  Prev: HTTP Rewrite Handler,  Up: Configuration

3.8 Configuring Server Administrators
=====================================

A default CouchDB install provides admin-level access to all connecting
users.  This configuration is known as `Admin Party', and is not
recommended for in-production usage. You can crash the party simply by
creating the first admin account. CouchDB server administrators and
passwords are not stored in the `_users' database, but in the
`local.ini' file, which should be appropriately secured and readable
only by system administrators.

    [admins]
    ;admin = mysecretpassword
    admin = -hashed-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90
    architect = -pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000

Administrators can be added directly to the `[admins]' section, and when
CouchDB is restarted, the passwords will be salted and encrypted. You
may also use the HTTP interface to create administrator accounts; this
way, you don't need to restart CouchDB, and there's no need to
temporarily store or transmit passwords in plaintext. The HTTP
`_config/admins' endpoint supports querying, deleting or creating new
admin accounts:

    shell> GET /_config/admins HTTP/1.1
        Accept: application/json
        Host: localhost:5984

    HTTP/1.1 200 OK
        Cache-Control: must-revalidate
        Content-Length: 196
        Content-Type: application/json
        Date: Fri, 30 Nov 2012 11:37:18 GMT
        Server: CouchDB/1.3.0 (Erlang OTP/R15B02)


    {
        "admin": "-hashed-6d3c30241ba0aaa4e16c6ea99224f915687ed8cd,7f4a3e05e0cbc6f48a0035e3508eef90",
        "architect": "-pbkdf2-43ecbd256a70a3a2f7de40d2374b6c3002918834,921a12f74df0c1052b3e562a23cd227f,10000"
    }

Further details are available in `security_', including configuring the
work factor for `PBKDF2', and the algorithm itself at PBKDF2
(RFC-2898)(1).

  New in version 1.3.0: `PBKDF2' server-side hashed salted password
support added, now as a synchronous call for the `_config/admins' API.

  ---------- Footnotes ----------

  (1) http://tools.ietf.org/html/rfc2898


File: CouchDB.info,  Node: OS Daemons,  Next: Native SSL Support,  Prev: Configuring Server Administrators,  Up: Configuration

3.9 OS Daemons
==============

CouchDB now supports starting external processes. The support is simple
and enables CouchDB to start each configured OS daemon. If the daemon
stops at any point, CouchDB will restart it (with protection to ensure
regularly failing daemons are not repeatedly restarted).

  The daemon starting process is one-to-one; for each each configured
daemon in the configuration file, CouchDB will start exactly one
instance. If you need to run multiple instances, then you must create
separate individual configurations. Daemons are configured within the
`[os_daemons]' section of your configuration file (`local.ini'). The
format of each configured daemon is:

    NAME = PATH ARGS

Where `NAME' is an arbitrary (and unique) name to identify the daemon;
`PATH' is the full path to the daemon to be executed; `ARGS' are any
required arguments to the daemon.

  For example:

    [os_daemons]
    basic_responder = /usr/local/bin/responder.js

There is no interactivity between CouchDB and the running process, but
you can use the OS Daemons service to create new HTTP servers and
responders and then use the new proxy service to redirect requests and
output to the CouchDB managed service. For more information on proxying,
see *note HTTP Proxying: 2b. For further background on the OS Daemon
service, see CouchDB Externals API(1).

  ---------- Footnotes ----------

  (1) http://davispj.com/2010/09/26/new-couchdb-externals-api.html


File: CouchDB.info,  Node: Native SSL Support,  Next: HTTP Proxying,  Prev: OS Daemons,  Up: Configuration

3.10 Native SSL Support
=======================

CouchDB 1.3 supports SSL natively. All your secure connection needs can
now be served without needing to setup and maintain a separate proxy
server that handles SSL.

  SSL setup can be tricky, but the configuration in CouchDB was designed
to be as easy as possible. All you need is two files; a certificate and
a private key. If you bought an official SSL certificate from a
certificate authority, both should be in your possession already.

  If you just want to try this out and don't want to pay anything
upfront, you can create a self-signed certificate. Everything will work
the same, but clients will get a warning about an insecure certificate.

  You will need the OpenSSL command line tool installed. It probably
already is.

    shell> mkdir cert && cd cert
    shell> openssl genrsa > privkey.pem
    shell> openssl req -new -x509 -key privkey.pem -out mycert.pem -days 1095
    shell> ls
    mycert.pem privkey.pem

Now, you need to edit CouchDB's configuration, either by editing your
`local.ini' file or using the `/_config' API calls or the configuration
screen in Futon. Here is what you need to do in `local.ini', you can
infer what needs doing in the other places.

  Be sure to make these edits. Under `[daemons]' you should see:

    ; enable SSL support by uncommenting the following line and supply the PEM's below.
    ; the default ssl port CouchDB listens on is 6984
    ;httpsd = {couch_httpd, start_link, [https]}

Here uncomment the last line:

    httpsd = {couch_httpd, start_link, [https]}

Next, under `[ssl]' you will see:

    ;cert_file = /full/path/to/server_cert.pem
    ;key_file = /full/path/to/server_key.pem

Uncomment and adjust the paths so it matches your system's paths:

    cert_file = /home/jan/cert/mycert.pem
    key_file = /home/jan/cert/privkey.pem

For more information please read
<http://www.openssl.org/docs/HOWTO/certificates.txt>.

  Now start (or restart) CouchDB. You should be able to connect to it
using HTTPS on port 6984:

    shell> curl https://127.0.0.1:6984/
    curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
    error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
    More details here: http://curl.haxx.se/docs/sslcerts.html

    curl performs SSL certificate verification by default, using a "bundle"
    of Certificate Authority (CA) public keys (CA certs). If the default
    bundle file isn't adequate, you can specify an alternate file
    using the --cacert option.
    If this HTTPS server uses a certificate signed by a CA represented in
    the bundle, the certificate verification probably failed due to a
    problem with the certificate (it might be expired, or the name might
    not match the domain name in the URL).
    If you'd like to turn off curl's verification of the certificate, use
    the -k (or --insecure) option.

Oh no what happened?! — Remember, clients will notify their users that
your certificate is self signed. `curl' is the client in this case and
it notifies you. Luckily you trust yourself (don't you?) and you can
specify the `-k' option as the message reads:

    shell> curl -k https://127.0.0.1:6984/
    {"couchdb":"Welcome","version":"|version|"}

All done.


File: CouchDB.info,  Node: HTTP Proxying,  Next: Cross-Origin Resource Sharing,  Prev: Native SSL Support,  Up: Configuration

3.11 HTTP Proxying
==================

The HTTP proxy feature makes it easy to map and redirect different
content through your CouchDB URL. The proxy works by mapping a pathname
and passing all content after that prefix through to the configured
proxy address.

  Configuration of the proxy redirect is handled through the
`[httpd_global_handlers]' section of the CouchDB configuration file
(typically `local.ini'). The format is:

    [httpd_global_handlers]
    PREFIX = {couch_httpd_proxy, handle_proxy_req, <<"DESTINATION">>}

Where:

   - `PREFIX'

     Is the string that will be matched. The string can be any valid
     qualifier, although to ensure that existing database names are not
     overridden by a proxy configuration, you can use an underscore
     prefix.

   - `DESTINATION'

     The fully-qualified URL to which the request should be sent. The
     destination must include the `http' prefix. The content is used
     verbatim in the original request, so you can also forward to
     servers on different ports and to specific paths on the target
     host.

  The proxy process then translates requests of the form:

    http://couchdb:5984/PREFIX/path

To:

    DESTINATION/path


     Note: Everything after `PREFIX' including the required forward
     slash will be appended to the `DESTINATION'.

  The response is then communicated back to the original client.

  For example, the following configuration:

    _google = {couch_httpd_proxy, handle_proxy_req, <<"http://www.google.com">>}

Would forward all requests for `http://couchdb:5984/_google' to the
Google website.

  The service can also be used to forward to related CouchDB services,
such as Lucene:

    [httpd_global_handlers]
    _fti = {couch_httpd_proxy, handle_proxy_req, <<"http://127.0.0.1:5985">>}


     Note: The proxy service is basic. If the request is not identified
     by the `DESTINATION', or the remainder of the `PATH' specification
     is incomplete, the original request URL is interpreted as if the
     `PREFIX' component of that URL does not exist.

     For example, requesting `http://couchdb:5984/_intranet/media' when
     `/media' on the proxy destination does not exist, will cause the
     request URL to be interpreted as `http://couchdb:5984/media'. Care
     should be taken to ensure that both requested URLs and destination
     URLs are able to cope.


File: CouchDB.info,  Node: Cross-Origin Resource Sharing,  Prev: HTTP Proxying,  Up: Configuration

3.12 Cross-Origin Resource Sharing
==================================

CORS, or "Cross-Origin Resource Sharing", allows a resource such as a
web page running JavaScript inside a browser, to make AJAX requests
(XMLHttpRequests) to a different domain, without compromising the
security of either party.

  A typical use case is to have a static website hosted on a CDN make
requests to another resource, such as a hosted CouchDB instance. This
avoids needing an intermediary proxy, using JSONP or similar workarounds
to retrieve and host content.

  While CouchDB's integrated HTTP server and support for document
attachments makes this less of a constraint for pure CouchDB projects,
there are many cases where separating the static content from the
database access is desirable, and CORS makes this very straightforward.

  By supporting CORS functionality, a CouchDB instance can accept direct
connections to protected databases and instances, without the browser
functionality being blocked due to same-origin constraints. CORS is
supported today on over 90% of recent browsers.

  CORS support is provided as experimental functionality in 1.3.0, and
as such will need to be enabled specifically in CouchDB's
configuration. While all origins are forbidden from making requests by
default, support is available for simple requests, preflight requests
and per-vhost configuration.

  New in version 1.3.0.

* Menu:

* Enabling CORS::
* Passing Credentials::
* Tightening Access::
* Configuration per vhost::
* Useful References::


File: CouchDB.info,  Node: Enabling CORS,  Next: Passing Credentials,  Up: Cross-Origin Resource Sharing

3.12.1 Enabling CORS
--------------------

To enable CORS support, you need to set the `enable_cors = true' option
in the `[httpd]' section of `local.ini', and add a `[cors]' section
containing a `origins = *' setting. Note that by default, no origins are
accepted; you must either use a wildcard or whitelist.

    [httpd]
    enable_cors = true

    [cors]
    origins = *



File: CouchDB.info,  Node: Passing Credentials,  Next: Tightening Access,  Prev: Enabling CORS,  Up: Cross-Origin Resource Sharing

3.12.2 Passing Credentials
--------------------------

By default, neither authentication headers nor cookies are included in
requests and responses. To do so requires both setting
`XmlHttpRequest.withCredentials = true' on the request object in the
browser and enabling credentials support in CouchDB.

    [cors]
    credentials = true

CouchDB will respond to a credentials-enabled CORS request with an
additional header, `Access-Control-Allow-Credentials=true'.


File: CouchDB.info,  Node: Tightening Access,  Next: Configuration per vhost,  Prev: Passing Credentials,  Up: Cross-Origin Resource Sharing

3.12.3 Tightening Access
------------------------

Access can be restricted by protocol, host and optionally by port:

    [cors]
    ; List of origins, separated by a comma (protocol, host, optional port)
    ; refer to http://tools.ietf.org/html/rfc6454 for specification
    origins = http://localhost, https://localhost, http://www.number10.gov.uk:80

Specific HTTP methods may also be restricted:

    [cors]
    ; List of accepted methods, comma-separated
    ; refer to http://tools.ietf.org/html/rfc2616, rfc2817, rfc5789
    methods = GET, POST, PUT, DELETE



File: CouchDB.info,  Node: Configuration per vhost,  Next: Useful References,  Prev: Tightening Access,  Up: Cross-Origin Resource Sharing

3.12.4 Configuration per vhost
------------------------------

All CORS-related settings may be configured on a per-vhost basis. For
example, the configuration section for `http://example.com/' would be
contained in:

    [cors:http://example.com]
    credentials = false
    origins = *
    methods = GET, PUT, HEAD



File: CouchDB.info,  Node: Useful References,  Prev: Configuration per vhost,  Up: Cross-Origin Resource Sharing

3.12.5 Useful References
------------------------

   - Original JIRA implementation ticket(1)

  Standards and References:

   - IETF RFCs relating to methods RFC 2618(2), RFC 2817(3), and RFC
     5789(4)

   - IETF RFC 6454 for Web Origins(5)

   - W3C CORS standard(6)

  Mozilla Developer Network Resources:

   - Same origin policy for URIs(7)

   - HTTP Access Control(8)

   - Server-side Access Control(9)

   - Javascript same origin policy(10)

  Client-side CORS support and usage:

   - CORS browser support matrix(11)

   - CORS tutorial(12)

   - Cross-Site XMLHttpRequests with CORS(13)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-431

  (2) http://tools.ietf.org/html/rfc2616

  (3) http://tools.ietf.org/html/rfc2817

  (4) http://tools.ietf.org/html/rfc5789

  (5) http://tools.ietf.org/html/rfc6454

  (6) http://www.w3.org/TR/cors

  (7)
https://developer.mozilla.org/en-US/docs/Same-origin_policy_for_file:_URIs

  (8) https://developer.mozilla.org/En/HTTP_access_control

  (9) https://developer.mozilla.org/En/Server-Side_Access_Control

  (10)
https://developer.mozilla.org/en-US/docs/Same_origin_policy_for_JavaScript

  (11) http://caniuse.com/cors

  (12) http://www.html5rocks.com/en/tutorials/cors/

  (13)
http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors


File: CouchDB.info,  Node: Replicator Database,  Next: Design Docs,  Prev: Configuration,  Up: Top

4 Replicator Database
*********************

A database where you `PUT'/`POST' documents to trigger replications and
you `DELETE' to cancel ongoing replications. These documents have
exactly the same content as the JSON objects we used to `POST' to
`_replicate' (fields `source', `target', `create_target', `continuous',
`doc_ids', `filter', `query_params'.

  Replication documents can have a user defined `_id'. Design documents
(and `_local' documents) added to the replicator database are ignored.

  The default name of this database is `_replicator'. The name can be
changed in the `local.ini' configuration, section `[replicator]',
parameter `db'.

* Menu:

* Basics::
* Documents describing the same replication::
* Canceling replications::
* Server restart::
* Changing the Replicator Database::
* Replicating the replicator database::
* Delegations::


File: CouchDB.info,  Node: Basics,  Next: Documents describing the same replication,  Up: Replicator Database

4.1 Basics
==========

Let's say you PUT the following document into `_replicator':

    {
        "_id": "my_rep",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "create_target":  true
    }

In the couch log you'll see 2 entries like these:

    [Thu, 17 Feb 2011 19:43:59 GMT] [info] [<0.291.0>] Document `my_rep` triggered replication `c0ebe9256695ff083347cbf95f93e280+create_target`
    [Thu, 17 Feb 2011 19:44:37 GMT] [info] [<0.124.0>] Replication `c0ebe9256695ff083347cbf95f93e280+create_target` finished (triggered by document `my_rep`)

As soon as the replication is triggered, the document will be updated by
CouchDB with 3 new fields:

    {
        "_id": "my_rep",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "create_target":  true,
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297974122
    }

Special fields set by the replicator start with the prefix
`_replication_'.

   - `_replication_id'

     The ID internally assigned to the replication. This is also the ID
     exposed by `/_active_tasks'.

   - `_replication_state'

     The current state of the replication.

   - `_replication_state_time'

     A Unix timestamp (number of seconds since 1 Jan 1970) that tells us
     when the current replication state (marked in `_replication_state')
     was set.

  When the replication finishes, it will update the `_replication_state'
field (and `_replication_state_time') with the value `completed', so
the document will look like:

    {
        "_id": "my_rep",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "create_target":  true,
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "completed",
        "_replication_state_time":  1297974122
    }

When an error happens during replication, the `_replication_state'
field is set to `error' (and `_replication_state' gets updated of
course).

  When you PUT/POST a document to the `_replicator' database, CouchDB
will attempt to start the replication up to 10 times (configurable under
`[replicator]', parameter `max_replication_retry_count'). If it fails
on the first attempt, it waits 5 seconds before doing a second attempt.
If the second attempt fails, it waits 10 seconds before doing a third
attempt. If the third attempt fails, it waits 20 seconds before doing a
fourth attempt (each attempt doubles the previous wait period).  When
an attempt fails, the Couch log will show you something like:

    [error] [<0.149.0>] Error starting replication `67c1bb92010e7abe35d7d629635f18b6+create_target` (document `my_rep_2`): {db_not_found,<<"could not open http://myserver:5986/foo/">>


     Note: The `_replication_state' field is only set to `error' when
     all the attempts were unsuccessful.

  There are only 3 possible values for the `_replication_state' field:
`triggered', `completed' and `error'. Continuous replications never get
their state set to `completed'.


File: CouchDB.info,  Node: Documents describing the same replication,  Next: Canceling replications,  Prev: Basics,  Up: Replicator Database

4.2 Documents describing the same replication
=============================================

Lets suppose 2 documents are added to the `_replicator' database in the
following order:

    {
        "_id": "doc_A",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar"
    }

and

    {
        "_id": "doc_B",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar"
    }

Both describe exactly the same replication (only their `_ids' differ).
In this case document `doc_A' triggers the replication, getting updated
by CouchDB with the fields `_replication_state',
`_replication_state_time' and `_replication_id', just like it was
described before. Document `doc_B' however, is only updated with one
field, the `_replication_id' so it will look like this:

    {
        "_id": "doc_B",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280"
    }

While document `doc_A' will look like this:

    {
        "_id": "doc_A",
        "source":  "http://myserver.com:5984/foo",
        "target":  "bar",
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297974122
    }

Note that both document get exactly the same value for the
`_replication_id' field. This way you can identify which documents
refer to the same replication - you can for example define a view which
maps replication IDs to document IDs.


File: CouchDB.info,  Node: Canceling replications,  Next: Server restart,  Prev: Documents describing the same replication,  Up: Replicator Database

4.3 Canceling replications
==========================

To cancel a replication simply `DELETE' the document which triggered
the replication. The Couch log will show you an entry like the
following:

    [Thu, 17 Feb 2011 20:16:29 GMT] [info] [<0.125.0>] Stopped replication `c0ebe9256695ff083347cbf95f93e280+continuous+create_target` because replication document `doc_A` was deleted


     Note: You need to `DELETE' the document that triggered the
     replication.  `DELETE'-ing another document that describes the
     same replication but did not trigger it, will not cancel the
     replication.


File: CouchDB.info,  Node: Server restart,  Next: Changing the Replicator Database,  Prev: Canceling replications,  Up: Replicator Database

4.4 Server restart
==================

When CouchDB is restarted, it checks its `_replicator' database and
restarts any replication that is described by a document that either has
its `_replication_state' field set to `triggered' or it doesn't have
yet the `_replication_state' field set.

     Note: Continuous replications always have a `_replication_state'
     field with the value `triggered', therefore they're always
     restarted when CouchDB is restarted.


File: CouchDB.info,  Node: Changing the Replicator Database,  Next: Replicating the replicator database,  Prev: Server restart,  Up: Replicator Database

4.5 Changing the Replicator Database
====================================

Imagine your replicator database (default name is `_replicator') has the
two following documents that represent pull replications from servers A
and B:

    {
        "_id": "rep_from_A",
        "source":  "http://aserver.com:5984/foo",
        "target":  "foo_a",
        "continuous":  true,
        "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297971311
    }


    {
        "_id": "rep_from_B",
        "source":  "http://bserver.com:5984/foo",
        "target":  "foo_b",
        "continuous":  true,
        "_replication_id":  "231bb3cf9d48314eaa8d48a9170570d1",
        "_replication_state":  "triggered",
        "_replication_state_time":  1297974122
    }

Now without stopping and restarting CouchDB, you change the name of the
replicator database to `another_replicator_db':

    $ curl -X PUT http://localhost:5984/_config/replicator/db -d '"another_replicator_db"'
    "_replicator"

As soon as this is done, both pull replications defined before, are
stopped. This is explicitly mentioned in CouchDB's log:

    [Fri, 11 Mar 2011 07:44:20 GMT] [info] [<0.104.0>] Stopping all ongoing replications because the replicator database was deleted or changed
    [Fri, 11 Mar 2011 07:44:20 GMT] [info] [<0.127.0>] 127.0.0.1 - - PUT /_config/replicator/db 200

Imagine now you add a replication document to the new replicator
database named `another_replicator_db':

    {
        "_id": "rep_from_X",
        "source":  "http://xserver.com:5984/foo",
        "target":  "foo_x",
        "continuous":  true
    }

From now own you have a single replication going on in your system: a
pull replication pulling from server X. Now you change back the
replicator database to the original one `_replicator':

    $ curl -X PUT http://localhost:5984/_config/replicator/db -d '"_replicator"'
    "another_replicator_db"

Immediately after this operation, the replication pulling from server X
will be stopped and the replications defined in the `_replicator'
database (pulling from servers A and B) will be resumed.

  Changing again the replicator database to `another_replicator_db' will
stop the pull replications pulling from servers A and B, and resume the
pull replication pulling from server X.


File: CouchDB.info,  Node: Replicating the replicator database,  Next: Delegations,  Prev: Changing the Replicator Database,  Up: Replicator Database

4.6 Replicating the replicator database
=======================================

Imagine you have in server C a replicator database with the two
following pull replication documents in it:

    {
         "_id": "rep_from_A",
         "source":  "http://aserver.com:5984/foo",
         "target":  "foo_a",
         "continuous":  true,
         "_replication_id":  "c0ebe9256695ff083347cbf95f93e280",
         "_replication_state":  "triggered",
         "_replication_state_time":  1297971311
    }


    {
         "_id": "rep_from_B",
         "source":  "http://bserver.com:5984/foo",
         "target":  "foo_b",
         "continuous":  true,
         "_replication_id":  "231bb3cf9d48314eaa8d48a9170570d1",
         "_replication_state":  "triggered",
         "_replication_state_time":  1297974122
    }

Now you would like to have the same pull replications going on in server
D, that is, you would like to have server D pull replicating from
servers A and B. You have two options:

   - Explicitly add two documents to server's D replicator database

   - Replicate server's C replicator database into server's D replicator
     database

  Both alternatives accomplish exactly the same goal.


File: CouchDB.info,  Node: Delegations,  Prev: Replicating the replicator database,  Up: Replicator Database

4.7 Delegations
===============

Replication documents can have a custom `user_ctx' property. This
property defines the user context under which a replication runs. For
the old way of triggering replications (POSTing to `/_replicate/'),
this property was not needed (it didn't exist in fact) - this is because
at the moment of triggering the replication it has information about the
authenticated user. With the replicator database, since it's a regular
database, the information about the authenticated user is only present
at the moment the replication document is written to the database - the
replicator database implementation is like a `_changes' feed consumer
(with `?include_docs=true') that reacts to what was written to the
replicator database - in fact this feature could be implemented with an
external script/program. This implementation detail implies that for non
admin users, a `user_ctx' property, containing the user's name and a
subset of his/her roles, must be defined in the replication document.
This is ensured by the document update validation function present in
the default design document of the replicator database. This validation
function also ensure that a non admin user can set a user name property
in the `user_ctx' property that doesn't match his/her own name (same
principle applies for the roles).

  For admins, the `user_ctx' property is optional, and if it's missing
it defaults to a user context with name null and an empty list of roles
- this mean design documents will not be written to local targets. If
writing design documents to local targets is desired, the a user context
with the roles `_admin' must be set explicitly.

  Also, for admins the `user_ctx' property can be used to trigger a
replication on behalf of another user. This is the user context that
will be passed to local target database document validation functions.

     Note: The `user_ctx' property only has effect for local endpoints.

  Example delegated replication document:

    {
         "_id": "my_rep",
         "source":  "http://bserver.com:5984/foo",
         "target":  "bar",
         "continuous":  true,
         "user_ctx": {
              "name": "joe",
              "roles": ["erlanger", "researcher"]
         }
    }

As stated before, for admins the `user_ctx' property is optional, while
for regular (non admin) users it's mandatory. When the roles property of
`user_ctx' is missing, it defaults to the empty list `[ ]'.


File: CouchDB.info,  Node: Design Docs,  Next: Query Servers,  Prev: Replicator Database,  Up: Top

5 Design Docs
*************

In this section we'll show how to write design documents, using the
built-in *note JavaScript Query Server: 42.

  But before we start to write our first function, let's take a look at
the list of common objects that will be used during our code journey -
we'll be using them extensively within each function:

   - *note Database information object: 43.

   - *note Request object: 44.

   - *note Response object: 45.

   - *note UserCtx object: 46.

   - *note Database Security object: 47.

   - *note Guide to JavaScript Query Server: 42.

* Menu:

* View functions::
* Show functions::
* List functions::
* Update functions::
* Filter functions::
* Validate document update functions::

View functions

* Map functions::
* Reduce and rereduce functions::

Filter functions

* Classic filters::
* View filters::


File: CouchDB.info,  Node: View functions,  Next: Show functions,  Up: Design Docs

5.1 View functions
==================

Views are the primary tool used for querying and reporting on CouchDB
databases.

* Menu:

* Map functions::
* Reduce and rereduce functions::


File: CouchDB.info,  Node: Map functions,  Next: Reduce and rereduce functions,  Up: View functions

5.1.1 Map functions
-------------------

 -- Javascript Function: mapfun (doc)
          Arguments:

             * *doc* - Processed document object.

Map functions should take a single argument as document object and
optionally emits paired values also known as `key' and `value'. Since
JavaScript doesn't support generators and `yield' statement it is
emulated via *note emit(): 4c.:

    function(doc){
      if (!doc.tags || !isArray(doc.tags) || !doc.type || doc.type != 'post'){
        return;
      }
      for (var idx in doc.tags){
        emit(doc.tags[idx].toLower(), 1);
      }
    }

In this example the map function produces documents view by tag if they
has `tags' attribute as array and `type' attribute with "post" value.
Note that *note emit(): 4c. function could be called  multiple times,
so the same document will be available by several `keys'.

  Also keep in mind that each document is _sealed_ to prevent situation
when one map function changes document state and the other one received
a modified version.

  For efficiency reasons, documents are passed to a group of map
functions - each document is processed by group of map functions from
all views of related design document. This means that if you trigger
index update for one view in ddoc, all others will get updated too.

  Since `1.1.0' release `map' function supports *note CommonJS: 4d.
modules and access to *note require(): 4e. function.


File: CouchDB.info,  Node: Reduce and rereduce functions,  Prev: Map functions,  Up: View functions

5.1.2 Reduce and rereduce functions
-----------------------------------

 -- Javascript Function: redfun (keys, values[, rereduce])
          Arguments:

             * *keys* - Array of pairs docid-key for related map
               function result.  Always `null' if rereduce is running
               (has `true' value).

             * *values* - Array of map function result values.

             * *rereduce* - Boolean sign of rereduce run.

          Returns: Reduces `values'

Reduce functions takes two required arguments of keys and values lists
- the result of the related map function - and optional third one which
indicates if `rereduce' mode is active or not. `Rereduce' is using for
additional reduce values list, so when it is `true' there is no
information about related `keys' (first argument is `null').

  Note, that if produced result by `reduce' function is longer than
initial values list then a Query Server error will be raised. However,
this behavior could be disabled by setting `reduce_limit' config option
to `false':

    [query_server_config]
    reduce_limit = false

While disabling `reduce_limit' might be useful for debug proposes,
remember, that main task of reduce functions is to _reduce_ mapped
result, not to make it even bigger. Generally, your reduce function
should converge rapidly to a single value - which could be an array or
similar object.

  Also CouchDB has three built-in reduce functions. These are
implemented in Erlang and run right inside CouchDB, so they are much
faster than the equivalent JavaScript functions: `_sum', `_count' and
`_stats'. Their equivalents in JavaScript below:

    // could be replaced by _sum
    function(keys, values){
      sum(values);
    }

    // could be replaced by _count
    function(keys, values, rereduce){
      if (rereduce){
        return sum(values);
      } else {
        return values.length;
      }
    }

    // could be replaced by _stats
    function(keys, values, rereduce){
      return {
        'sum': sum(values),
        'min': Math.min.apply(null, values),
        'max': Math.max.apply(null, values),
        'count': values.length,
        'sumsqr': (function(){
          _sumsqr = 0;
          for(var idx in values){
            _sumsqr += values[idx] * values[idx];
          }
          return _sumsqr;
        })(),
      }
    }


     Note: *Why don't reduce functions support CommonJS modules?*

     While `map' functions have limited access to stored modules through
     *note require(): 4e. function there is no such feature for
     `reduce' functions.  The reason lies deep inside in mechanism how
     `map' and `reduce' functions are processed by Query Server. Let's
     take a look on `map' functions first:

       1. CouchDB sends all `map' functions for processed design
          document to Query Server.

       2. Query Server handles them one by one, compiles and puts them
          onto an internal stack.

       3. After all `map' functions had been processed, CouchDB will
          send the remaining documents to index one by one.

       4. The Query Server receives the document object and applies it
          to every function from the stack. The emitted results are
          then joined into a single array and sent back to CouchDB.

     Now let's see how `reduce' functions are handled:

       1. CouchDB sends _as single command_ list of available `reduce'
          functions with result list of key-value pairs that was
          previously received as result of `map' functions work.

       2. Query Server compiles reduce functions and applies them to
          key-value lists. Reduced result sends back to CouchDB.

     As you may note, `reduce' functions been applied in single shot
     while `map' ones are applied in an iterative way per each
     document. This means that it's possible for `map' functions to
     precompile CommonJS libraries and use them during the entire view
     processing, but for `reduce' functions it will be compiled again
     and again for each view result reduction, which will lead to
     performance degradation (`reduce' function are already does hard
     work to make large result smaller).


File: CouchDB.info,  Node: Show functions,  Next: List functions,  Prev: View functions,  Up: Design Docs

5.2 Show functions
==================

 -- Javascript Function: showfun (doc, req)
          Arguments:

             * *doc* - Processed document, may be omitted.

             * *req* - *note Request object: 44.

          Returns: *note Response object: 45.

          Return type: object or string

Show functions are used to represent documents in various formats,
commonly as HTML page with nicer formatting. They can also be used to
run server-side functions without requiring a pre-existing document.

  Basic example of show function could be:

    function(doc, req){
      if (doc){
        return "Hello from " + doc._id + "!";
      } else {
        return "Hello, world!";
      }
    }

Also, there is more simple way to return json encoded data:

    function(doc, req){
      return {
        'json': {
          'id': doc['_id'],
          'rev': doc['_rev']
        }
      }
    }

and even files (this one is CouchDB logo):

    function(doc, req){
      return {
        'headers': {
          'Content-Type' : 'image/png',
        },
        'base64': ''.concat(
          'iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAAAsV',
          'BMVEUAAAD////////////////////////5ur3rEBn////////////////wDBL/',
          'AADuBAe9EB3IEBz/7+//X1/qBQn2AgP/f3/ilpzsDxfpChDtDhXeCA76AQH/v7',
          '/84eLyWV/uc3bJPEf/Dw/uw8bRWmP1h4zxSlD6YGHuQ0f6g4XyQkXvCA36MDH6',
          'wMH/z8/yAwX64ODeh47BHiv/Ly/20dLQLTj98PDXWmP/Pz//39/wGyJ7Iy9JAA',
          'AADHRSTlMAbw8vf08/bz+Pv19jK/W3AAAAg0lEQVR4Xp3LRQ4DQRBD0QqTm4Y5',
          'zMxw/4OleiJlHeUtv2X6RbNO1Uqj9g0RMCuQO0vBIg4vMFeOpCWIWmDOw82fZx',
          'vaND1c8OG4vrdOqD8YwgpDYDxRgkSm5rwu0nQVBJuMg++pLXZyr5jnc1BaH4GT',
          'LvEliY253nA3pVhQqdPt0f/erJkMGMB8xucAAAAASUVORK5CYII=')
      }
    }

But what if you need to represent data in different formats via a
single function?  Functions *note registerType(): 54. and *note
provides(): 55. are your the best friends in that question:

    function(doc, req){
      provides('json', function(){
        return {'json': doc}
      });
      provides('html', function(){
        return '<pre>' + toJSON(doc) + '</pre>'
      })
      provides('xml', function(){
        return {
          'headers': {'Content-Type': 'application/xml'},
          'body' : ''.concat(
            '<?xml version="1.0" encoding="utf-8"?>\n',
            '<doc>',
            (function(){
              escape = function(s){
                return s.replace(/&quot;/g, '"')
                        .replace(/&gt;/g, '>')
                        .replace(/&lt;/g, '<')
                        .replace(/&amp;/g, '&');
              };
              var content = '';
              for(var key in doc){
                if(!doc.hasOwnProperty(key)) continue;
                var value = escape(toJSON(doc[key]));
                var key = escape(key);
                content += ''.concat(
                  '<' + key + '>',
                  value
                  '</' + key + '>'
                )
              }
              return content;
            })(),
            '</doc>'
          )
        }
      })
      registerType('text-json', 'text/json')
      provides('text-json', function(){
        return toJSON(doc);
      })
    }

This function may return `html', `json' , `xml' or our custom `text
json' format representation of same document object with same
processing rules. Probably, the `xml' provider in our function needs
more care to handle nested objects correctly, and keys with invalid
characters, but you've got the idea!

See also
........

CouchDB Wiki:
        - Showing Documents(1)

CouchDB Guide:
        - Show Functions(2)

---------- Footnotes ----------

  (1)
http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Showing_Documents

  (2) http://guide.couchdb.org/editions/1/en/show.html


File: CouchDB.info,  Node: List functions,  Next: Update functions,  Prev: Show functions,  Up: Design Docs

5.3 List functions
==================

 -- Javascript Function: listfun (head, req)
          Arguments:

             * *head* - *note View Head Information: 58.

             * *req* - *note Request object: 44.

          Returns: Last chunk.

          Return type: string

While *note Show functions: 52. are used to customize document
presentation, *note List functions: 57.  are used for same purpose, but
against *note View functions: 48. results.

  The next list function formats view and represents it as a very
simple HTML page:

    function(head, req){
      start({
        'headers': {
          'Content-Type': 'text/html'
        }
      });
      send('<html><body><table>');
      send('<tr><th>ID</th><th>Key</th><th>Value</th></tr>')
      while(row = getRow()){
        send(''.concat(
          '<tr>',
          '<td>' + toJSON(row.id) + '</td>',
          '<td>' + toJSON(row.key) + '</td>',
          '<td>' + toJSON(row.value) + '</td>',
          '</tr>'
        ));
      }
      send('</table></body></html>');
    }

Templates and styles could obviously be used to present data in a nicer
fashion, but this is an excellent starting point. Note that you may also
use *note registerType(): 54. and *note provides(): 55. functions in
the same way as for *note Show functions: 52.!

See also
........

CouchDB Wiki:
        - Listing Views with CouchDB 0.10 and later(1)

CouchDB Guide:
        - Transforming Views with List Functions(2)

---------- Footnotes ----------

  (1)
http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Listing_Views_with_CouchDB_0.10_and_later

  (2) http://guide.couchdb.org/draft/transforming.html


File: CouchDB.info,  Node: Update functions,  Next: Filter functions,  Prev: List functions,  Up: Design Docs

5.4 Update functions
====================

 -- Javascript Function: updatefun (doc, req)
          Arguments:

             * *doc* - Update function target document.

             * *req* - *note Request object: 44.

          Returns: Two-element array: the first element is the (updated
          or new) document, which is committed to the database. If the
          first element is `null' no document will be committed to the
          database.  If you are updating an existing, it should already
          have an `_id' set, and if you are creating a new document,
          make sure to set its `_id' to something, either generated
          based on the input or the `req.uuid' provided. The second
          element is the response that will be sent back to the caller.

Update handlers are functions that clients can request to invoke
server-side logic that will create or update a document. This feature
allows a range of use cases such as providing a server-side last
modified timestamp, updating individual fields in a document without
first getting the latest revision, etc.

  When the request to an update handler includes a document ID in the
URL, the server will provide the function with the most recent version
of that document.  You can provide any other values needed by the
update handler function via the `POST'/`PUT' entity body or query
string parameters of the request.

  The basic example that demonstrates all use-cases of update handlers
below:

    function(doc, req){
        if (!doc){
            if ('id' in req){
                // create new document
                return [{'_id': req['id']}, 'New World']
            }
            // change nothing in database
            return [null, 'Empty World']
        }
        doc['world'] = 'hello';
        doc['edited_by'] = req['userCtx']['name']
        return [doc, 'Edited World!']
    }


See also
........

CouchDB Wiki:
        - Document Update Handlers(1)

---------- Footnotes ----------

  (1) http://wiki.apache.org/couchdb/Document_Update_Handlers


File: CouchDB.info,  Node: Filter functions,  Next: Validate document update functions,  Prev: Update functions,  Up: Design Docs

5.5 Filter functions
====================

 -- Javascript Function: filterfun (doc, req)
          Arguments:

             * *doc* - Processed document object.

             * *req* - *note Request object: 44.

          Returns: Boolean value: `true' means that `doc' passes the
          filter rules, `false' that not.

Filter functions are mostly acts like *note Show functions: 52. and
*note List functions: 57.: they formats, but more correctly to say,
they _filters_ *note changes feed: 5d.

* Menu:

* Classic filters::
* View filters::


File: CouchDB.info,  Node: Classic filters,  Next: View filters,  Up: Filter functions

5.5.1 Classic filters
---------------------

By default the changes feed emits all database documents changes. But
if you're waiting for some special changes, processing all documents is
inefficient.

  Filters are special design document functions that allows changes
feed to emit only specific documents that pass filter rules.

  Lets assume that our database is a mailbox and we need to to handle
only new mails (documents with status `new') events. Assuming that, our
filter function will looks like next one:

    function(doc, req){
      // we need only `mail` documents
      if (doc.type != 'mail'){
        return false;
      }
      // we're interested only in `new` ones
      if (doc.status != 'new'){
        return false;
      }
      return true; // passed!
    }

Filter functions must return `true' in fact if document passed all
defined rules. Now, if you apply this function to changes feed it will
emit only changes about "new mails":

    GET /somedatabase/_changes?filter=mailbox/new_mail HTTP/1.1


    {"results":[
    {"seq":1,"id":"df8eca9da37dade42ee4d7aa3401f1dd","changes":[{"rev":"1-c2e0085a21d34fa1cecb6dc26a4ae657"}]},
    {"seq":7,"id":"df8eca9da37dade42ee4d7aa34024714","changes":[{"rev":"1-29d748a6e87b43db967fe338bcb08d74"}]},
    ],
    "last_seq":27}

Note, that `last_seq' number is 27, but we'd received only two records.
Seems like any other changes was about documents that hasn't passed our
filter.

  Probably, we also need to filter changes feed of our mailbox not only
by single status value: we're also interested in statuses like "spam"
to update spam-filter heuristic rules, "outgoing" to let mail daemon
actually send mails and so on. Creating a lot of similar functions that
actually does similar work isn't good idea - so we need dynamic filter
to go.

  If you have noted, filter functions takes second argument as *note
request: 44. object - it allows to create dynamic filters based on
query parameters, *note user context: 46. and more.

  The dynamic version of our filter now will be next:

    function(doc, req){
      // we need only `mail` documents
      if (doc.type != 'mail'){
        return false;
      }
      // we're interested only in requested status
      if (doc.status != req.query.status){
        return false;
      }
      return true; // passed!
    }

and now we have pass `status' query parameter in request to let filter
match only required documents:

    GET /somedatabase/_changes?filter=mailbox/by_status&status=new HTTP/1.1


    {"results":[
    {"seq":1,"id":"df8eca9da37dade42ee4d7aa3401f1dd","changes":[{"rev":"1-c2e0085a21d34fa1cecb6dc26a4ae657"}]},
    {"seq":7,"id":"df8eca9da37dade42ee4d7aa34024714","changes":[{"rev":"1-29d748a6e87b43db967fe338bcb08d74"}]},
    ],
    "last_seq":27}

and we can change filter behavior with easy:

    GET /somedatabase/_changes?filter=mailbox/by_status&status=spam HTTP/1.1


    {"results":[
    {"seq":11,"id":"8960e91220798fc9f9d29d24ed612e0d","changes":[{"rev":"3-cc6ff71af716ddc2ba114967025c0ee0"}]},
    ],
    "last_seq":27}

Combining filters with `continuous' feed allows to create powerful
event-driven systems.


File: CouchDB.info,  Node: View filters,  Prev: Classic filters,  Up: Filter functions

5.5.2 View filters
------------------

View filters are the same as above, with one small difference: they use
views `map' function instead to `filter' one to process the changes
feed. Each time when a key-value pair could be emitted, a change is
returned. This allows to avoid creating filter functions that are
mostly does same works as views.

  To use them just specify `_view' value for `filter' parameter and
`designdoc/viewname' for `view' one:

    GET /somedatabase/_changes?filter=_view&view=dname/viewname  HTTP/1.1


     Note: Since view filters uses `map' functions as filters, they
     can't show any dynamic behavior since *note request object: 44. is
     not available.

See also
........

CouchDB Guide:
        - Guide to filter change notification(1)

CouchDB Wiki:
        - Filtered replication(2)

---------- Footnotes ----------

  (1) http://guide.couchdb.org/draft/notifications.html#filters

  (2) http://wiki.apache.org/couchdb/Replication#Filtered_Replication


File: CouchDB.info,  Node: Validate document update functions,  Prev: Filter functions,  Up: Design Docs

5.6 Validate document update functions
======================================

 -- Javascript Function: validatefun (newDoc, oldDoc, userCtx, secObj)
          Arguments:

             * *newDoc* - New version of document that will be stored.

             * *oldDoc* - Previous version of document that is already
               stored.

             * *userCtx* - *note User Context Object: 46.

             * *secObj* - *note Security Object: 47.

          Throws : `forbidden' error to gracefully prevent document
          storing.

To perform validate operations on document saving there is a special
design function type called `validate_doc_update'.

  Instead of thousands words take a look at the next example of validate
function - this function is used in `_design/_auth' ddoc from `_users'
database to control users documents required field set and modification
permissions:

    function(newDoc, oldDoc, userCtx, secObj) {
        if (newDoc._deleted === true) {
            // allow deletes by admins and matching users
            // without checking the other fields
            if ((userCtx.roles.indexOf('_admin') !== -1) ||
                (userCtx.name == oldDoc.name)) {
                return;
            } else {
                throw({forbidden: 'Only admins may delete other user docs.'});
            }
        }

        if ((oldDoc && oldDoc.type !== 'user') || newDoc.type !== 'user') {
            throw({forbidden : 'doc.type must be user'});
        } // we only allow user docs for now

        if (!newDoc.name) {
            throw({forbidden: 'doc.name is required'});
        }

        if (!newDoc.roles) {
            throw({forbidden: 'doc.roles must exist'});
        }

        if (!isArray(newDoc.roles)) {
            throw({forbidden: 'doc.roles must be an array'});
        }

        if (newDoc._id !== ('org.couchdb.user:' + newDoc.name)) {
            throw({
                forbidden: 'Doc ID must be of the form org.couchdb.user:name'
            });
        }

        if (oldDoc) { // validate all updates
            if (oldDoc.name !== newDoc.name) {
                throw({forbidden: 'Usernames can not be changed.'});
            }
        }

        if (newDoc.password_sha && !newDoc.salt) {
            throw({
                forbidden: 'Users with password_sha must have a salt.' +
                    'See /_utils/script/couch.js for example code.'
            });
        }

        var is_server_or_database_admin = function(userCtx, secObj) {
            // see if the user is a server admin
            if(userCtx.roles.indexOf('_admin') !== -1) {
                return true; // a server admin
            }

            // see if the user a database admin specified by name
            if(secObj && secObj.admins && secObj.admins.names) {
                if(secObj.admins.names.indexOf(userCtx.name) !== -1) {
                    return true; // database admin
                }
            }

            // see if the user a database admin specified by role
            if(secObj && secObj.admins && secObj.admins.roles) {
                var db_roles = secObj.admins.roles;
                for(var idx = 0; idx < userCtx.roles.length; idx++) {
                    var user_role = userCtx.roles[idx];
                    if(db_roles.indexOf(user_role) !== -1) {
                        return true; // role matches!
                    }
                }
            }

            return false; // default to no admin
        }

        if (!is_server_or_database_admin(userCtx, secObj)) {
            if (oldDoc) { // validate non-admin updates
                if (userCtx.name !== newDoc.name) {
                    throw({
                        forbidden: 'You may only update your own user document.'
                    });
                }
                // validate role updates
                var oldRoles = oldDoc.roles.sort();
                var newRoles = newDoc.roles.sort();

                if (oldRoles.length !== newRoles.length) {
                    throw({forbidden: 'Only _admin may edit roles'});
                }

                for (var i = 0; i < oldRoles.length; i++) {
                    if (oldRoles[i] !== newRoles[i]) {
                        throw({forbidden: 'Only _admin may edit roles'});
                    }
                }
            } else if (newDoc.roles.length > 0) {
                throw({forbidden: 'Only _admin may set roles'});
            }
        }

        // no system roles in users db
        for (var i = 0; i < newDoc.roles.length; i++) {
            if (newDoc.roles[i][0] === '_') {
                throw({
                    forbidden:
                    'No system roles (starting with underscore) in users db.'
                });
            }
        }

        // no system names as names
        if (newDoc.name[0] === '_') {
            throw({forbidden: 'Username may not start with underscore.'});
        }

        var badUserNameChars = [':'];

        for (var i = 0; i < badUserNameChars.length; i++) {
            if (newDoc.name.indexOf(badUserNameChars[i]) >= 0) {
                throw({forbidden: 'Character `' + badUserNameChars[i] +
                        '` is not allowed in usernames.'});
            }
        }
    }


     Note: The `return' statement used only for function, it has no
     impact on the validation process.

See also
........

CouchDB Guide:
        - Validation Functions(1)

CouchDB Wiki:
        - Document Update Validation(2)

---------- Footnotes ----------

  (1) http://guide.couchdb.org/editions/1/en/validation.html

  (2) http://wiki.apache.org/couchdb/Document_Update_Validation


File: CouchDB.info,  Node: Query Servers,  Next: Changes Feed,  Prev: Design Docs,  Up: Top

6 Query Servers
***************

* Menu:

* JavaScript::
* Erlang::

JavaScript

* Design functions context::
* CommonJS Modules::


File: CouchDB.info,  Node: JavaScript,  Next: Erlang,  Up: Query Servers

6.1 JavaScript
==============

     Note: While every design function has access to all JavaScript
     objects, the table below describes appropriate usage cases. For
     example, you may use *note emit(): 4c. in *note List functions:
     57, but *note getRow(): 66. is not permitted during *note Map
     functions: 4b.

JS Function                          Reasonable to use in design doc functions
--------------------------------------------------------------------------------------- 
*note emit(): 4c.                    *note Map functions: 4b.
*note getRow(): 66.                  *note List functions: 57.
*note JSON: 67.                      any
*note isArray(): 68.                 any
*note log(): 69.                     any
*note provides(): 55.                *note Show functions: 52, *note List functions:
                                     57.
*note registerType(): 54.            *note Show functions: 52, *note List functions:
                                     57.
*note require(): 4e.                 any, except *note Reduce and rereduce functions:
                                     4f.
*note send(): 6a.                    *note List functions: 57.
*note start(): 6b.                   *note List functions: 57.
*note sum(): 6c.                     any
*note toJSON(): 6d.                  any

* Menu:

* Design functions context::
* CommonJS Modules::


File: CouchDB.info,  Node: Design functions context,  Next: CommonJS Modules,  Up: JavaScript

6.1.1 Design functions context
------------------------------

Each design function executes in a special context of predefined
objects, modules and functions:

 -- Javascript Function: emit (key, value)
     Emits a `key'-`value' pair for further processing by CouchDB after
     the map function is done.

          Arguments:

             * *key* - The view key

             * *value* - The `key's associated value

         function(doc){
           emit(doc._id, doc._rev);
         }



 -- Javascript Function: getRow ()
     Extracts the next row from a related view result.

          Returns: View result row

          Return type: object

         function(head, req){
           send('[');
           row = getRow();
           if (row){
             send(toJSON(row));
             while(row = getRow()){
               send(',');
               send(toJSON(row));
             }
           }
           return ']';
         }



 -- Javascript Data: JSON
     JSON2(1) object.

 -- Javascript Function: isArray (obj)
     A helper function to check if the provided value is an `Array'.

          Arguments:

             * *obj* - Any Javascript value

          Returns: `true' if `obj' is `Array'-typed, `false' otherwise

          Return type: boolean

 -- Javascript Function: log (message)
     Log a message to the CouchDB log (at the `INFO' level).

          Arguments:

             * *message* - Message to be logged

         function(doc){
           log('Procesing doc ' + doc['_id']);
           emit(doc['_id'], null);
         }

     After the map function has run, the following line can be found in
     CouchDB logs (e.g. at `/var/log/couchdb/couch.log'):

         [Sat, 03 Nov 2012 17:38:02 GMT] [info] [<0.7543.0>] OS Process #Port<0.3289> Log :: Processing doc 8d300b86622d67953d102165dbe99467



 -- Javascript Function: provides (key, func)
     Registers callable handler for specified MIME key.

          Arguments:

             * *key* - MIME key previously defined by *note
               registerType(): 54.

             * *func* - MIME type handler

 -- Javascript Function: registerType (key, *mimes)
     Registers list of MIME types by associated `key'.

          Arguments:

             * *key* - MIME types

             * *mimes* - MIME types enumeration

     Predefined mappings (`key'-`array'):

        - *all*: `*/*'

        - *text*: `text/plain; charset=utf-8', `txt'

        - *html*: `text/html; charset=utf-8'

        - *xhtml*: `application/xhtml+xml', `xhtml'

        - *xml*: `application/xml', `text/xml', `application/x-xml'

        - *js*: `text/javascript', `application/javascript',
          `application/x-javascript'

        - *css*: `text/css'

        - *ics*: `text/calendar'

        - *csv*: `text/csv'

        - *rss*: `application/rss+xml'

        - *atom*: `application/atom+xml'

        - *yaml*: `application/x-yaml', `text/yaml'

        - *multipart_form*: `multipart/form-data'

        - *url_encoded_form*: `application/x-www-form-urlencoded'

        - *json*: `application/json', `text/x-json'

 -- Javascript Function: require (path)
     Loads CommonJS module by a specified `path'. The path should not
     start with a slash.

          Arguments:

             * *path* - A CommonJS module path started from design
               document root

          Returns: Exported statements

 -- Javascript Function: send (chunk)
     Sends a single string `chunk' in response.

          Arguments:

             * *chunk* - Text chunk

         function(head, req){
           send('Hello,');
           send(' ');
           send('Couch');
           return !
         }



 -- Javascript Function: start (init_resp)
     Initiates chunked response. As an option, a custom *note response:
     45. object may be sent at this point.  For `list'-functions only!

          Note: list functions may set the `HTTP response code' and
          `headers' by calling this function. This function must be
          called before *note send(): 6a, *note getRow(): 66. or a
          `return' statement; otherwise, the query server will
          implicitly call this function with the empty object (`{}').

         function(head, req){
           start({
             "code": 302,
             "headers": {
               "Location": "http://couchdb.apache.org"
             }
           });
           return "Relax!";
         }



 -- Javascript Function: sum (arr)
     Sum `arr's items.

          Arguments:

             * *arr* - Array of numbers

          Return type: number

 -- Javascript Function: toJSON (obj)
     Encodes `obj' to JSON string. This is an alias for the
     `JSON.stringify' method.

          Arguments:

             * *obj* - JSON encodable object

          Returns: JSON string

  ---------- Footnotes ----------

  (1)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=share/server/json2.js


File: CouchDB.info,  Node: CommonJS Modules,  Prev: Design functions context,  Up: JavaScript

6.1.2 CommonJS Modules
----------------------

Support for CommonJS Modules(1) (introduced in CouchDB 0.11.0) allows
you to create modular design functions without the need for duplication
of functionality.

  Here's a CommonJS module that checks user permissions:

    function user_context(userctx, secobj) {
      var is_admin = function() {
        return userctx.indexOf('_admin') != -1;
      }
      return {'is_admin': is_admin}
    }

    exports['user'] = user_context

Each module has access to additional global variables:

   - *module* (`object'): Contains information about the stored module

        - *id* (`string'): The module id; a JSON path in ddoc context

        - *current* (`code'): Compiled module code object

        - *parent* (`object'): Parent frame

        - *exports* (`object'): Export statements

   - *exports* (`object'): Shortcut to the `module.exports' object

  The CommonJS module can be added to a design document, like so:

    {
       "views": {
          "lib": {
             "security": "function user_context(userctx, secobj) { ... }"
          },
          "validate_doc_update": "function(newdoc, olddoc, userctx, secobj) {
            user = require('lib/security').user(userctx, secobj);
            return user.is_admin();
          }"
       },
       "_id": "_design/test"
    }

Modules paths are relative to the design document's `views' object, but
modules can only be loaded from the object referenced via `lib'. The
`lib' structure can still be used for view functions as well, by simply
storing view functions at e.g. `views.lib.map', `views.lib.reduce', etc.

  ---------- Footnotes ----------

  (1) http://wiki.commonjs.org/wiki/Modules/1.1.1


File: CouchDB.info,  Node: Erlang,  Prev: JavaScript,  Up: Query Servers

6.2 Erlang
==========

     Warning: Unlike the JavaScript query server, the Erlang query
     server does not run in a sandbox. This means Erlang code has full
     access to your OS, filesystem and network, which may lead to
     security issues. While Erlang functions are faster than JavaScript
     ones, you need to be careful about running them, especially if
     they were written by someone else.

     Note: Due to security restrictions, the Erlang query server is
     disabled by default. To enable it, you need to edit your
     `local.ini' to include a `native_query_servers' section:

         [native_query_servers]
         erlang = {couch_native_process, start_link, []}

     Don't forget to restart CouchDB after updating the configuration,
     and use the `language: "erlang"' property in your Erlang design
     documents.

 -- Javascript Function: Emit (Id, Value)
     Emits `key'-`value' pairs to view indexer process.

         fun({Doc}) ->
           <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
           V = proplists:get_value(<<"_id">>, Doc, null),
           Emit(<<K>>, V)
         end.



 -- Javascript Function: FoldRows (Fun, Acc)
     Helper to iterate over all rows in a list function.

          Arguments:

             * *Fun* - Function object.

             * *Acc* - The value previously returned by `Fun'.

         fun(Head, {Req}) ->
           Fun = fun({Row}, Acc) ->
             Id = couch_util:get_value(<<"id">>, Row),
             Send(list_to_binary(io_lib:format("Previous doc id: ~p~n", [Acc]))),
             Send(list_to_binary(io_lib:format("Current  doc id: ~p~n", [Id]))),
             {ok, Id}
           end,
           FoldRows(Fun, nil),
           ""
         end.



 -- Javascript Function: GetRow ()
     Retrieves the next row from a related view result.

         %% FoldRows background implementation.
         %% https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blob;f=src/couchdb/couch_native_process.erl;hb=HEAD#l368
         %%
         foldrows(GetRow, ProcRow, Acc) ->
           case GetRow() of
             nil ->
               {ok, Acc};
             Row ->
               case (catch ProcRow(Row, Acc)) of
                 {ok, Acc2} ->
                   foldrows(GetRow, ProcRow, Acc2);
                 {stop, Acc2} ->
                   {ok, Acc2}
               end
         end.



 -- Javascript Function: Log (Msg)
          Arguments:

             * *Msg* - Log a message at the `INFO' level.

         fun({Doc}) ->
           <<K,_/binary>> = proplists:get_value(<<"_rev">>, Doc, null),
           V = proplists:get_value(<<"_id">>, Doc, null),
           Log(lists:flatten(io_lib:format("Hello from ~s doc!", [V]))),
           Emit(<<K>>, V)
         end.

     After the map function has run, the following line can be found in
     CouchDB logs (e.g. at `/var/log/couchdb/couch.log'):

         [Sun, 04 Nov 2012 11:33:58 GMT] [info] [<0.9144.2>] Hello from 8d300b86622d67953d102165dbe99467 doc!



 -- Javascript Function: Send (Chunk)
     Sends a single string `Chunk' in response.

         fun(Head, {Req}) ->
           Send("Hello,"),
           Send(" "),
           Send("Couch"),
           "!"
         end.

     The function above produces the following response:

         Hello, Couch!



 -- Javascript Function: Start (Headers)
          Arguments:

             * *Headers* - Proplist of *note response object: 45.

     Initialize *note List functions: 57. response. At this point,
     response code and headers may be defined. For example, this
     function redirects to the CouchDB web site:

         fun(Head, {Req}) ->
           Start({[{<<"code">>, 302},
                   {<<"headers">>, {[
                     {<<"Location">>, <<"http://couchdb.apache.org">>}]
                   }}
                 ]}),
           "Relax!"
         end.




File: CouchDB.info,  Node: Changes Feed,  Next: API Reference,  Prev: Query Servers,  Up: Top

7 Changes Feed
**************

* Menu:

* Polling::
* Long Polling::
* Continuous::
* Event Source::


File: CouchDB.info,  Node: Polling,  Next: Long Polling,  Up: Changes Feed

7.1 Polling
===========

A list of changes made to documents in the database, in the order they
were made, can be obtained from the database's `_changes' resource. You
can query the `_changes' resource by issuing a `GET' request with the
following (optional) parameters:

Parameter          Value                                              Default Value       Notes
------------------------------------------------------------------------------------------------------------- 
since              seqnum / now                                       0                   (1)
limit              maxsequences                                       none                (2)
descending         boolean                                            false               (3)
feed               normal / longpoll / continuous / eventsource       normal              (4)
heartbeat          milliseconds                                       60000               (5)
timeout            milliseconds                                       60000               (6)
filter             designdoc/filtername / _view                       none                (7)
include_docs       boolean                                            false               (8)
style              all_docs / main_only                               main_only           (9)
view               designdoc/filtername                               none                (10)

  Notes:

  1. Start the results from the change immediately after the given
     sequence number.

  2. Limit number of result rows to the specified value (note that
     using 0 here has the same effect as 1).

  3. Return the change results in descending sequence order (most
     recent change first)

  4. Select the type of feed.

  5. Period in milliseconds after which an empty line is sent in the
     results.  Only applicable for `longpoll' or `continuous' feeds.
     Overrides any timeout to keep the feed alive indefinitely.

  6. Maximum period in milliseconds to wait for a change before the
     response is sent, even if there are no results. Only applicable
     for `longpoll' or `continuous' feeds. Note that 60000 is also the
     default maximum timeout to prevent undetected dead connections.

     You can change the default maximum timeout in your
     ini-configuration:

         [httpd]
         changes_timeout=#millisecs


  7. Reference to a *note filter function: 5c. from a design document
     that will filter whole stream emitting only filtered events.  See
     the section in the book(1) for more information.

  8. Include the associated document with each result. If there are
     conflicts, only the winning revision is returned.

  9. Specifies how many revisions are returned in the changes array.
     The default, `main_only', will only return the current "winning"
     revision; `all_docs' will return all leaf revisions (including
     conflicts and deleted former conflicts.)

 10. Allows to use view functions as filters. It requires to set
     `filter' special value `_view' to enable this feature. Documents
     counted as "passed" for view filter in case if map function emits
     at least one record for them.

  Changed in version 0.11.0: added `include_docs' parameter

  Changed in version 1.2.0: added `view' parameter and special value
`_view' for `filter' one

  Changed in version 1.3.0: `since' parameter could take `now' value to
start listen changes since current seq number.

  Changed in version 1.3.0: `eventsource' feed type added.

  By default all changes are immediately returned as a JSON object:

    GET /somedatabase/_changes HTTP/1.1


    {"results":[
    {"seq":1,"id":"fresh","changes":[{"rev":"1-967a00dff5e02add41819138abb3284d"}]},
    {"seq":3,"id":"updated","changes":[{"rev":"2-7051cbe5c8faecd085a3fa619e6e6337"}]},
    {"seq":5,"id":"deleted","changes":[{"rev":"2-eec205a9d413992850a6e32678485900"}],"deleted":true}
    ],
    "last_seq":5}

`results' is the list of changes in sequential order. New and changed
documents only differ in the value of the rev; deleted documents
include the `"deleted": true' attribute. (In the `style=all_docs mode',
deleted applies only to the current/winning revision. The other
revisions listed might be deleted even if there is no deleted property;
you have to `GET' them individually to make sure.)

  `last_seq' is the sequence number of the last update returned.
(Currently it will always be the same as the seq of the last item in
results.)

  Sending a `since' param in the query string skips all changes up to
and including the given sequence number:

    GET /somedatabase/_changes?since=3 HTTP/1.1


    {"results":[
    {"seq":5,"id":"deleted","changes":[{"rev":"2-eec205a9d413992850a6e32678485900"}],"deleted":true}
    ],
    "last_seq":5}


  ---------- Footnotes ----------

  (1) http://books.couchdb.org/relax/reference/change-notifications


File: CouchDB.info,  Node: Long Polling,  Next: Continuous,  Prev: Polling,  Up: Changes Feed

7.2 Long Polling
================

The `longpoll' feed (probably most useful used from a browser) is a more
efficient form of polling that waits for a change to occur before the
response is sent. `longpoll' avoids the need to frequently poll CouchDB
to discover nothing has changed!

  The response is basically the same JSON as is sent for the normal
feed.

  A timeout limits the maximum length of time the connection is open.
If there are no changes before the timeout expires the response's
results will be an empty list.


File: CouchDB.info,  Node: Continuous,  Next: Event Source,  Prev: Long Polling,  Up: Changes Feed

7.3 Continuous
==============

Polling the CouchDB server is not a good thing to do. Setting up new
HTTP connections just to tell the client that nothing happened puts
unnecessary strain on CouchDB.

  A continuous feed stays open and connected to the database until
explicitly closed and changes are sent to the client as they happen,
i.e. in near real-time.

  The continuous feed's response is a little different than the other
feed types to simplify the job of the client - each line of the
response is either empty or a JSON object representing a single change,
as found in the normal feed's results.

    GET /somedatabase/_changes?feed=continuous HTTP/1.1


    {"seq":1,"id":"fresh","changes":[{"rev":"1-967a00dff5e02add41819138abb3284d"}]}
    {"seq":3,"id":"updated","changes":[{"rev":"2-7051cbe5c8faecd085a3fa619e6e6337"}]}
    {"seq":5,"id":"deleted","changes":[{"rev":"2-eec205a9d413992850a6e32678485900"}],"deleted":true}
    ... tum tee tum ...
    {"seq":6,"id":"updated","changes":[{"rev":"3-825cb35de44c433bfb2df415563a19de"}]}

Obviously, `... tum tee tum ...' does not appear in the actual
response, but represents a long pause before the change with seq 6
occurred.


File: CouchDB.info,  Node: Event Source,  Prev: Continuous,  Up: Changes Feed

7.4 Event Source
================

The `eventsource' feed provides push notifications that can be consumed
in the form of DOM events in the browser. Refer to the W3C eventsource
specification(1) for further details.

    GET /somedatabase/_changes?feed=eventsource HTTP/1.1


    // define the event handling function
    if (window.EventSource) {

      var source = new EventSource("/somedatabase/_changes?feed=eventsource");
      source.onerror = function(e) {
        alert('EventSource failed.');
      };

      var results = [];
      var sourceListener = function(e) {
        var data = JSON.parse(e.data);
        results.push(data);
      };

      // start listening for events
      source.addEventListener('message', sourceListener, false);

      // stop listening for events
      source.removeEventListener('message', sourceListener, false);

    }


     Note: EventSource connections are subject to cross-origin resource
     sharing restrictions. You might need to use the experimental *note
     CORS support: 30. to get the EventSource to work in your
     application.

  ---------- Footnotes ----------

  (1) http://www.w3.org/TR/eventsource/


File: CouchDB.info,  Node: API Reference,  Next: JSON Structure Reference,  Prev: Changes Feed,  Up: Top

8 API Reference
***************

The components of the API URL path help determine the part of the
CouchDB server that is being accessed. The result is the structure of
the URL request both identifies and effectively describes the area of
the database you are accessing.

  As with all URLs, the individual components are separated by a forward
slash.

  As a general rule, URL components and JSON fields starting with the
`_' (underscore) character represent a special component or entity
within the server or returned object. For example, the URL fragment
`/_all_dbs' gets a list of all of the databases in a CouchDB instance.

  This reference is structured according to the URL structure, as below.

* Menu:

* Database Methods::
* Document Methods::
* Local (non-replicating) Document Methods: Local non-replicating Document Methods.
* Design Document Methods::
* Miscellaneous Methods::
* Configuration Methods::
* Authentication Methods::

Database Methods

* GET /db::
* PUT /db::
* DELETE /db::
* GET /db/_changes::
* POST /db/_compact::
* POST /db/_compact/design-doc::
* POST /db/_view_cleanup::
* POST /db/_ensure_full_commit::
* POST /db/_bulk_docs::
* POST /db/_temp_view::
* POST /db/_purge::
* GET /db/_all_docs::
* POST /db/_all_docs::
* POST /db/_missing_revs::
* POST /db/_revs_diff::
* GET /db/_security::
* PUT /db/_security::
* GET /db/_revs_limit::
* PUT /db/_revs_limit::

GET /db/_changes

* Filtering::

POST /db/_bulk_docs

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::

POST /db/_purge

* Updating Indexes::

Document Methods

* POST /db::
* GET /db/doc::
* HEAD /db/doc::
* PUT /db/doc::
* DELETE /db/doc::
* COPY /db/doc::
* GET /db/doc/attachment::
* PUT /db/doc/attachment::
* DELETE /db/doc/attachment::

POST /db

* Specifying the Document ID::
* UUID generation algorithms::
* Batch Mode Writes::
* Including Attachments::

GET /db/doc

* Attachments::
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::

PUT /db/doc

* Updating an Existing Document::

COPY /db/doc

* Copying a Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

PUT /db/doc/attachment

* Updating an Existing Attachment::

Local (non-replicating) Document Methods

* GET /db/_local/local-doc::
* PUT /db/_local/local-doc::
* DELETE /db/_local/local-doc::
* COPY /db/_local/local-doc::

Design Document Methods

* GET /db/_design/design-doc::
* PUT /db/_design/design-doc::
* DELETE /db/_design/design-doc::
* COPY /db/_design/design-doc::
* GET /db/_design/design-doc/attachment::
* PUT /db/_design/design-doc/attachment::
* DELETE /db/_design/design-doc/attachment::
* GET /db/_design/design-doc/_info::
* GET /db/_design/design-doc/_view/view-name::
* POST /db/_design/design-doc/_view/view-name::
* GET /db/_design/design-doc/_show/show-name::
* POST /db/_design/design-doc/_show/show-name/doc::
* GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name::
* POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name::
* GET /db/_design/design-doc/_list/list-name/view-name::
* POST /db/_design/design-doc/_list/list-name/view-name::
* PUT /db/_design/design-doc/_update/updatename/doc::
* POST /db/_design/design-doc/_update/updatename::
* ALL /db/_design/design-doc/_rewrite/rewrite-name/anything::

COPY /db/_design/design-doc

* Copying a Design Document::
* Copying from a Specific Revision: Copying from a Specific Revision<2>.
* Copying to an Existing Design Document::

GET /db/_design/design-doc/_view/view-name

* Querying Views and Indexes::
* Sorting Returned Rows::
* Specifying Start and End Values::
* Using Limits and Skipping Rows::
* View Reduction and Grouping::

POST /db/_design/design-doc/_view/view-name

* Multi-document Fetching::

Miscellaneous Methods

* GET /::
* GET /_active_tasks::
* GET /_all_dbs::
* GET /_log::
* POST /_replicate::
* POST /_restart::
* GET /_stats::
* GET /_utils::
* GET /_uuids::
* GET /favicon.ico: GET /favicon ico.

POST /_replicate

* Replication Operation::
* Specifying the Source and Target Database::
* Single Replication::
* Continuous Replication::
* Canceling Continuous Replication::

Configuration Methods

* GET /_config::
* GET /_config/section::
* GET /_config/section/key::
* PUT /_config/section/key::
* DELETE /_config/section/key::


File: CouchDB.info,  Node: Database Methods,  Next: Document Methods,  Up: API Reference

8.1 Database Methods
====================

The Database methods provide an interface to an entire database withing
CouchDB. These are database, rather than document, level requests.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
GET          /db                           Returns database information
PUT          /db                           Create a new database
DELETE       /db                           Delete an existing database
GET          /db/_all_docs                 Returns a built-in view of all documents in
                                           this database
POST         /db/_all_docs                 Returns certain rows from the built-in view of
                                           all documents
POST         /db/_bulk_docs                Insert multiple documents in to the database
                                           in a single request
GET          /db/_changes                  Returns changes for the given database
POST         /db/_compact                  Starts a compaction for the database
POST         /db/_compact/design-doc       Starts a compaction for all the views in the
                                           selected design document
POST         /db/_ensure_full_commit       Makes sure all uncommitted changes are written
                                           and synchronized to the disk
POST         /db/_missing_revs             Given a list of document revisions, returns
                                           the document revisions that do not exist in
                                           the database
POST         /db/_purge                    Purge some historical documents entirely from
                                           database history
POST         /db/_revs_diff                Given a list of document revisions, returns
                                           differences between the given revisions and
                                           ones that are in the database
GET          /db/_revs_limit               Gets the limit of historical revisions to
                                           store for a single document in the database
PUT          /db/_revs_limit               Sets the limit of historical revisions to
                                           store for a single document in the database
GET          /db/_security                 Returns the special security object for the
                                           database
PUT          /db/_security                 Sets the special security object for the
                                           database
POST         /db/_temp_view                Execute a given view function for all
                                           documents and return the result
POST         /db/_view_cleanup             Removes view files that are not used by any
                                           design document

  For all the database methods, the database name within the URL path
should be the database name that you wish to perform the operation on.
For example, to obtain the meta information for the database `recipes',
you would use the HTTP request:

    GET /recipes

For clarity, the form below is used in the URL paths:

    GET /db

Where `db' is the name of any database.

* Menu:

* GET /db::
* PUT /db::
* DELETE /db::
* GET /db/_changes::
* POST /db/_compact::
* POST /db/_compact/design-doc::
* POST /db/_view_cleanup::
* POST /db/_ensure_full_commit::
* POST /db/_bulk_docs::
* POST /db/_temp_view::
* POST /db/_purge::
* GET /db/_all_docs::
* POST /db/_all_docs::
* POST /db/_missing_revs::
* POST /db/_revs_diff::
* GET /db/_security::
* PUT /db/_security::
* GET /db/_revs_limit::
* PUT /db/_revs_limit::


File: CouchDB.info,  Node: GET /db,  Next: PUT /db,  Up: Database Methods

8.1.1 `GET /db'
---------------

   * *Method*: `GET /db'

   * *Request*: None

   * *Response*: Information about the database in JSON format

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *404*: The requested content could not be found. The returned
          content will include further information, as a JSON object,
          if available.

Gets information about the specified database. For example, to retrieve
the information for the database `recipe':

    GET http://couchdb:5984/recipes
    Accept: application/json

The JSON response contains meta information about the database. A sample
of the JSON returned for an empty database is provided below:

    {
       "compact_running" : false,
       "committed_update_seq" : 375048,
       "disk_format_version" : 5,
       "disk_size" : 33153123,
       "doc_count" : 18386,
       "doc_del_count" : 0,
       "db_name" : "recipes",
       "instance_start_time" : "1290700340925570",
       "purge_seq" : 10,
       "update_seq" : 375048
    }

The elements of the returned structure are shown in the table below:

Field                                  Description
--------------------------------------------------------------------------------------- 
committed_update_seq                   The number of committed update.
compact_running                        Set to true if the database compaction routine
                                       is operating on this database.
db_name                                The name of the database.
disk_format_version                    The version of the physical format used for
                                       the data when it is stored on disk.
disk_size                              Size in bytes of the data as stored on the
                                       disk. Views indexes are not included in the
                                       calculation.
doc_count                              A count of the documents in the specified
                                       database.
doc_del_count                          Number of deleted documents
instance_start_time                    Timestamp of when the database was created,
                                       expressed in milliseconds since the epoch.
purge_seq                              The number of purge operations on the database.
update_seq                             The current number of updates to the database.


File: CouchDB.info,  Node: PUT /db,  Next: DELETE /db,  Prev: GET /db,  Up: Database Methods

8.1.2 `PUT /db'
---------------

   * *Method*: `PUT /db'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *400*: Invalid database name

        * *412*: Database already exists

Creates a new database. The database name must be composed of one or
more of the following characters:

   - Lowercase characters (`a-z')

   - Name must begin with a lowercase letter

   - Digits (`0-9')

   - Any of the characters `_', `$', `(', `)', `+', `-', and `/'.

  Trying to create a database that does not meet these requirements will
return an error quoting these restrictions.

  To create the database `recipes':

    PUT http://couchdb:5984/recipes
    Content-Type: application/json

The returned content contains the JSON status:

    {
       "ok" : true
    }

Anything should be treated as an error, and the problem should be taken
form the HTTP response code.


File: CouchDB.info,  Node: DELETE /db,  Next: GET /db/_changes,  Prev: PUT /db,  Up: Database Methods

8.1.3 `DELETE /db'
------------------

   * *Method*: `DELETE /db'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *200*: Database has been deleted

        * *404*: The requested content could not be found. The returned
          content will include further information, as a JSON object,
          if available.

Deletes the specified database, and all the documents and attachments
contained within it.

  To delete the database `recipes' you would send the request:

    DELETE http://couchdb:5984/recipes
    Content-Type: application/json

If successful, the returned JSON will indicate success

    {
       "ok" : true
    }



File: CouchDB.info,  Node: GET /db/_changes,  Next: POST /db/_compact,  Prev: DELETE /db,  Up: Database Methods

8.1.4 `GET /db/_changes'
------------------------

   * *Method*: `GET /db/_changes'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: doc_ids

             * *Description*:  Specify the list of documents IDs to be
               filtered

             * *Optional*: yes

             * *Type*: json

             * *Default*: none

        * *Argument*: feed

             * *Description*:  Type of feed

             * *Optional*: yes

             * *Type*: string

             * *Default*: normal

             * *Supported Values*:

                  * *continuous*: Continuous (non-polling) mode

                  * *longpoll*: Long polling mode

                  * *normal*: Normal mode

        * *Argument*: filter

             * *Description*:  Filter function from a design document
               to get updates

             * *Optional*: yes

             * *Type*: string

             * *Default*: none

             * *Supported Values*:

        * *Argument*: heartbeat

             * *Description*:  Period after which an empty line is sent
               during longpoll or continuous

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 60000

             * *Quantity*: milliseconds

        * *Argument*: include_docs

             * *Description*:  Include the document with the result

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: limit

             * *Description*:  Maximum number of rows rows to return

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: none

        * *Argument*: since

             * *Description*:  Start the results from changes
               immediately after the specified sequence number

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 0

Obtains a list of the changes made to the database. This can be used to
monitor for update and modifications to the database for post processing
or synchronization. There are three different types of supported changes
feeds, poll, longpoll, and continuous. All requests are poll requests by
default. You can select any feed type explicitly using the `feed' query
argument.

   - *Poll*

     With polling you can request the changes that have occured since a
     specific sequence number. This returns the JSON structure
     containing the changed document information. When you perform a
     poll change request, only the changes since the specific sequence
     number are returned. For example, the query

         DELETE http://couchdb:5984/recipes/_changes
         Content-Type: application/json

     Will get all of the changes in the database. You can request a
     starting point using the `since' query argument and specifying the
     sequence number. You will need to record the latest sequence number
     in your client and then use this when making another request as the
     new value to the `since' parameter.

   - *Longpoll*

     With long polling the request to the server will remain open until
     a change is made on the database, when the changes will be
     reported, and then the connection will close. The long poll is
     useful when you want to monitor for changes for a specific purpose
     without wanting to monitoring continuously for changes.

     Because the wait for a change can be significant you can set a
     timeout before the connection is automatically closed (the
     `timeout' argument). You can also set a heartbeat interval (using
     the `heartbeat' query argument), which sends a newline to keep the
     connection open.

   - *Continuous*

     Continuous sends all new changes back to the client immediately,
     without closing the connection. In continuous mode the format of
     the changes is slightly different to accommodate the continuous
     nature while ensuring that the JSON output is still valid for each
     change notification.

     As with the longpoll feed type you can set both the timeout and
     heartbeat intervals to ensure that the connection is kept open for
     new changes and updates.

  The return structure for `normal' and `longpoll' modes is a JSON
array of changes objects, and the last update sequence number. The
structure is described in the following table.

Field                                  Description
--------------------------------------------------------------------------------------- 
last_seq                               Last change sequence number.
results [array]                        Changes made to a database
changes [array]                        List of changes, field-by-field, for this
                                       document
id                                     Document ID
seq                                    Update sequence number

  The return format for `continuous' mode the server sends a `CRLF'
(carriage-return, linefeed) delimited line for each change. Each line
contains the *note JSON object: 8b.

  You can also request the full contents of each document change
(instead of just the change notification) by using the `include_docs'
parameter.

* Menu:

* Filtering::


File: CouchDB.info,  Node: Filtering,  Up: GET /db/_changes

8.1.4.1 Filtering
.................

You can filter the contents of the changes feed in a number of ways. The
most basic way is to specify one or more document IDs to the query. This
causes the returned structure value to only contain changes for the
specified IDs. Note that the value of this query argument should be a
JSON formatted array.

  You can also filter the `_changes' feed by defining a filter function
within a design document. The specification for the filter is the same
as for replication filters. You specify the name of the filter function
to the `filter' parameter, specifying the design document name and
filter name. For example:

    GET /db/_changes?filter=design_doc/filtername

The `_changes' feed can be used to watch changes to specific document
ID's or the list of `_design' documents in a database. If the `filters'
parameter is set to `_doc_ids' a list of doc IDs can be passed in the
`doc_ids' parameter as a JSON array. For more information, see *note
Changes Feed: 5d.


File: CouchDB.info,  Node: POST /db/_compact,  Next: POST /db/_compact/design-doc,  Prev: GET /db/_changes,  Up: Database Methods

8.1.5 `POST /db/_compact'
-------------------------

   * *Method*: `POST /db/_compact'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *202*: Compaction request has been accepted

        * *404*: The requested content could not be found. The returned
          content will include further information, as a JSON object,
          if available.

Request compaction of the specified database. Compaction compresses the
disk database file by performing the following operations:

   - Writes a new version of the database file, removing any unused
     sections from the new version during write. Because a new file is
     temporary created for this purpose, you will need twice the current
     storage space of the specified database in order for the compaction
     routine to complete.

   - Removes old revisions of documents from the database, up to the
     per-database limit specified by the `_revs_limit' database
     parameter. See *note GET /db: 85.

  Compaction can only be requested on an individual database; you cannot
compact all the databases for a CouchDB instance. The compaction process
runs as a background process.

  You can determine if the compaction process is operating on a database
by obtaining the database meta information, the `compact_running' value
of the returned database structure will be set to true. See *note GET
/db: 85.

  You can also obtain a list of running processes to determine whether
compaction is currently running. See *note GET /_active_tasks: 9.


File: CouchDB.info,  Node: POST /db/_compact/design-doc,  Next: POST /db/_view_cleanup,  Prev: POST /db/_compact,  Up: Database Methods

8.1.6 `POST /db/_compact/design-doc'
------------------------------------

   * *Method*: `POST /db/_compact/design-doc'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *202*: Compaction request has been accepted

        * *404*: The requested content could not be found. The returned
          content will include further information, as a JSON object,
          if available.

Compacts the view indexes associated with the specified design document.
You can use this in place of the full database compaction if you know a
specific set of view indexes have been affected by a recent database
change.

  For example, to compact the views associated with the `recipes' design
document:

    POST http://couchdb:5984/recipes/_compact/recipes
    Content-Type: application/json

CouchDB will immediately return with a status indicating that the
compaction request has been received (HTTP status code 202):

    {
       "ok" : true
    }



File: CouchDB.info,  Node: POST /db/_view_cleanup,  Next: POST /db/_ensure_full_commit,  Prev: POST /db/_compact/design-doc,  Up: Database Methods

8.1.7 `POST /db/_view_cleanup'
------------------------------

   * *Method*: `POST /db/_view_cleanup'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: yes

  Cleans up the cached view output on disk for a given view. For
example:

    POST http://couchdb:5984/recipes/_view_cleanup
    Content-Type: application/json

If the request is successful, a basic status message us returned:

    {
       "ok" : true
    }



File: CouchDB.info,  Node: POST /db/_ensure_full_commit,  Next: POST /db/_bulk_docs,  Prev: POST /db/_view_cleanup,  Up: Database Methods

8.1.8 `POST /db/_ensure_full_commit'
------------------------------------

   * *Method*: `POST /db/_ensure_full_commit'

   * *Request*: None

   * *Response*: JSON success statement

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *202*: Commit completed successfully

        * *404*: The requested content could not be found. The returned
          content will include further information, as a JSON object,
          if available.

Commits any recent changes to the specified database to disk. You should
call this if you want to ensure that recent changes have been written.
For example, to commit all the changes to disk for the database
`recipes' you would use:

    POST http://couchdb:5984/recipes/_ensure_full_commit
    Content-Type: application/json

This returns a status message, containing the success message and the
timestamp for when the CouchDB instance was started:

    {
      "ok" : true,
      "instance_start_time" : "1288186189373361"
    }



File: CouchDB.info,  Node: POST /db/_bulk_docs,  Next: POST /db/_temp_view,  Prev: POST /db/_ensure_full_commit,  Up: Database Methods

8.1.9 `POST /db/_bulk_docs'
---------------------------

   * *Method*: `POST /db/_bulk_docs'

   * *Request*: JSON of the docs and updates to be applied

   * *Response*: JSON success statement

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *201*: Document(s) have been created or updated

The bulk document API allows you to create and update multiple documents
at the same time within a single request. The basic operation is similar
to creating or updating a single document, except that you batch the
document structure and information and . When creating new documents the
document ID is optional. For updating existing documents, you must
provide the document ID, revision information, and new document values.

  For both inserts and updates the basic structure of the JSON is the
same:

Field                                  Description
--------------------------------------------------------------------------------------- 
all_or_nothing (optional)              Sets the database commit mode to use
                                       all-or-nothing semantics
docs [array]                           Bulk Documents Document
_id (optional)                         List of changes, field-by-field, for this
                                       document
_rev (optional)                        Document ID
_deleted (optional)                    Update sequence number

* Menu:

* Inserting Documents in Bulk::
* Updating Documents in Bulk::
* Bulk Documents Transaction Semantics::
* Bulk Document Validation and Conflict Errors::


File: CouchDB.info,  Node: Inserting Documents in Bulk,  Next: Updating Documents in Bulk,  Up: POST /db/_bulk_docs

8.1.9.1 Inserting Documents in Bulk
...................................

To insert documents in bulk into a database you need to supply a JSON
structure with the array of documents that you want to add to the
database. Using this method you can either include a document ID, or
allow the document ID to be automatically generated.

  For example, the following inserts three new documents, two with the
supplied document IDs, and one which will have a document ID generated:

    {
       "docs" : [
          {
             "_id" : "FishStew",
             "servings" : 4,
             "subtitle" : "Delicious with fresh bread",
             "title" : "Fish Stew"
          },
          {
             "_id" : "LambStew",
             "servings" : 6,
             "subtitle" : "Delicious with scone topping",
             "title" : "Lamb Stew"
          },
          {
             "servings" : 8,
             "subtitle" : "Delicious with suet dumplings",
             "title" : "Beef Stew"
          },
       ]
    }

The return type from a bulk insertion will be 201, with the content of
the returned structure indicating specific success or otherwise messages
on a per-document basis.

  The return structure from the example above contains a list of the
documents created, here with the combination and their revision IDs:

    POST http://couchdb:5984/recipes/_bulk_docs
    Content-Type: application/json

    [
       {
          "id" : "FishStew",
          "rev" : "1-9c65296036141e575d32ba9c034dd3ee",
       },
       {
          "id" : "LambStew",
          "rev" : "1-34c318924a8f327223eed702ddfdc66d",
       },
       {
          "id" : "7f7638c86173eb440b8890839ff35433",
          "rev" : "1-857c7cbeb6c8dd1dd34a0c73e8da3c44",
       }
    ]

The content and structure of the returned JSON will depend on the
transaction semantics being used for the bulk update; see *note Bulk
Documents Transaction Semantics: 95. for more information. Conflicts
and validation errors when updating documents in bulk must be handled
separately; see *note Bulk Document Validation and Conflict Errors: 96.


File: CouchDB.info,  Node: Updating Documents in Bulk,  Next: Bulk Documents Transaction Semantics,  Prev: Inserting Documents in Bulk,  Up: POST /db/_bulk_docs

8.1.9.2 Updating Documents in Bulk
..................................

The bulk document update procedure is similar to the insertion
procedure, except that you must specify the document ID and current
revision for every document in the bulk update JSON string.

  For example, you could send the following request:

    POST http://couchdb:5984/recipes/_bulk_docs
    Content-Type: application/json

    {
       "docs" : [
          {
             "_id" : "FishStew",
             "_rev" : "1-9c65296036141e575d32ba9c034dd3ee",
             "servings" : 4,
             "subtitle" : "Delicious with freshly baked bread",
             "title" : "Fish Stew"
          },
          {
             "_id" : "LambStew",
             "_rev" : "1-34c318924a8f327223eed702ddfdc66d",
             "servings" : 6,
             "subtitle" : "Serve with a wholemeal scone topping",
             "title" : "Lamb Stew"
          },
          {
             "_id" : "7f7638c86173eb440b8890839ff35433"
             "_rev" : "1-857c7cbeb6c8dd1dd34a0c73e8da3c44",
             "servings" : 8,
             "subtitle" : "Hand-made dumplings make a great accompaniment",
             "title" : "Beef Stew"
          }
       ]
    }

The return structure is the JSON of the updated documents, with the new
revision and ID information:

    [
       {
          "id" : "FishStew",
          "rev" : "2-e7af4c4e9981d960ecf78605d79b06d1"
       },
       {
          "id" : "LambStew",
          "rev" : "2-0786321986194c92dd3b57dfbfc741ce"
       },
       {
          "id" : "7f7638c86173eb440b8890839ff35433",
          "rev" : "2-bdd3bf3563bee516b96885a66c743f8e"
       }
    ]

You can optionally delete documents during a bulk update by adding the
`_deleted' field with a value of `true' to each document ID/revision
combination within the submitted JSON structure.

  The return type from a bulk insertion will be 201, with the content of
the returned structure indicating specific success or otherwise messages
on a per-document basis.

  The content and structure of the returned JSON will depend on the
transaction semantics being used for the bulk update; see *note Bulk
Documents Transaction Semantics: 95. for more information. Conflicts
and validation errors when updating documents in bulk must be handled
separately; see *note Bulk Document Validation and Conflict Errors: 96.


File: CouchDB.info,  Node: Bulk Documents Transaction Semantics,  Next: Bulk Document Validation and Conflict Errors,  Prev: Updating Documents in Bulk,  Up: POST /db/_bulk_docs

8.1.9.3 Bulk Documents Transaction Semantics
............................................

CouchDB supports two different modes for updating (or inserting)
documents using the bulk documentation system. Each mode affects both
the state of the documents in the event of system failure, and the level
of conflict checking performed on each document. The two modes are:

   - `non-atomic'

     The default mode is non-atomic, that is, CouchDB will only
     guarantee that some of the documents will be saved when you send
     the request.  The response will contain the list of documents
     successfully inserted or updated during the process. In the event
     of a crash, some of the documents may have been successfully
     saved, and some will have been lost.

     In this mode, the response structure will indicate whether the
     document was updated by supplying the new `_rev' parameter
     indicating a new document revision was created. If the update
     failed, then you will get an `error' of type `conflict'. For
     example:

         [
            {
               "id" : "FishStew",
               "error" : "conflict",
               "reason" : "Document update conflict."
            },
            {
               "id" : "LambStew",
               "error" : "conflict",
               "reason" : "Document update conflict."
            },
            {
               "id" : "7f7638c86173eb440b8890839ff35433",
               "error" : "conflict",
               "reason" : "Document update conflict."
            }
         ]

     In this case no new revision has been created and you will need to
     submit the document update, with the correct revision tag, to
     update the document.

   - `all-or-nothing'

     In all-or-nothing mode, either all documents are written to the
     database, or no documents are written to the database, in the event
     of a system failure during commit.

     In addition, the per-document conflict checking is not performed.
     Instead a new revision of the document is created, even if the new
     revision is in conflict with the current revision in the database.
     The returned structure contains the list of documents with new
     revisions:

         [
            {
               "id" : "FishStew",
               "rev" : "2-e7af4c4e9981d960ecf78605d79b06d1"
            },
            {
               "id" : "LambStew",
               "rev" : "2-0786321986194c92dd3b57dfbfc741ce"
            },
            {
               "id" : "7f7638c86173eb440b8890839ff35433",
               "rev" : "2-bdd3bf3563bee516b96885a66c743f8e"
            }
         ]

     When updating documents using this mode the revision of a document
     included in views will be arbitrary. You can check the conflict
     status for a document by using the `conflicts=true' query argument
     when accessing the view. Conflicts should be handled individually
     to ensure the consistency of your database.

     To use this mode, you must include the `all_or_nothing' field (set
     to true) within the main body of the JSON of the request.

  The effects of different database operations on the different modes
are summarized below:

   * *Transaction Mode*: `Non-atomic'

        * *Transaction*: `Insert'

             * *Cause*: Requested document ID already exists

             * *Resolution*: Resubmit with different document ID, or
               update the existing document

        * *Transaction*: `Update'

             * *Cause*: Revision missing or incorrect

             * *Resolution*: Resubmit with correct revision

   * *Transaction Mode*: `All-or-nothing'

        * *Transaction*: `Insert' / `Update'

             * *Cause*: Additional revision inserted

             * *Resolution*: Resolve conflicted revisions

  Replication of documents is independent of the type of insert or
update.  The documents and revisions created during a bulk insert or
update are replicated in the same way as any other document. This can
mean that if you make use of the all-or-nothing mode the exact list of
documents, revisions (and their conflict state) may or may not be
replicated to other databases correctly.


File: CouchDB.info,  Node: Bulk Document Validation and Conflict Errors,  Prev: Bulk Documents Transaction Semantics,  Up: POST /db/_bulk_docs

8.1.9.4 Bulk Document Validation and Conflict Errors
....................................................

The JSON returned by the `_bulk_docs' operation consists of an array of
JSON structures, one for each document in the original submission.  The
returned JSON structure should be examined to ensure that all of the
documents submitted in the original request were successfully added to
the database.

  The exact structure of the returned information is:

Field                                  Description
--------------------------------------------------------------------------------------- 
docs [array]                           Bulk Documents Document
id                                     Document ID
error                                  Error type
reason                                 Error string with extended reason

  When a document (or document revision) is not correctly committed to
the database because of an error, you should check the `error' field to
determine error type and course of action. Errors will be one of the
following type:

   - `conflict'

     The document as submitted is in conflict. If you used the default
     bulk transaction mode then the new revision will not have been
     created and you will need to re-submit the document to the
     database.  If you used `all-or-nothing' mode then you will need to
     manually resolve the conflicted revisions of the document.

     Conflict resolution of documents added using the bulk docs
     interface is identical to the resolution procedures used when
     resolving conflict errors during replication.

   - `forbidden'

     Entries with this error type indicate that the validation routine
     applied to the document during submission has returned an error.

     For example, if your validation routine includes the following:

         throw({forbidden: 'invalid recipe ingredient'});

     The error returned will be:

         {
            "id" : "7f7638c86173eb440b8890839ff35433",
            "error" : "forbidden",
            "reason" : "invalid recipe ingredient"
         }




File: CouchDB.info,  Node: POST /db/_temp_view,  Next: POST /db/_purge,  Prev: POST /db/_bulk_docs,  Up: Database Methods

8.1.10 `POST /db/_temp_view'
----------------------------

   * *Method*: `POST /db/_temp_view'

   * *Request*: JSON with the temporary view definition

   * *Response*: Temporary view result set

   * *Admin Privileges Required*: yes

  Creates (and executes) a temporary view based on the view function
supplied in the JSON request. For example:

    POST http://couchdb:5984/recipes/_temp_view
    Content-Type: application/json

    {
       "map" : "function(doc) { if (doc.value > 9995) { emit(null, doc.value); } }"
    }

The resulting JSON response is the result from the execution of the
temporary view:

    {
       "total_rows" : 3,
       "rows" : [
          {
             "value" : 9998.41913029012,
             "id" : "05361cc6aa42033878acc1bacb1f39c2",
             "key" : null
          },
          {
             "value" : 9998.94149934853,
             "id" : "1f443f471e5929dd7b252417625ed170",
             "key" : null
          },
          {
             "value" : 9998.01511339154,
             "id" : "1f443f471e5929dd7b252417629c102b",
             "key" : null
          }
       ],
       "offset" : 0
    }

The arguments also available to standard view requests also apply to
temporary views, but the execution of the view may take some time as it
relies on being executed at the time of the request. In addition to the
time taken, they are also computationally very expensive to produce. You
should use a defined view if you want to achieve the best performance.


File: CouchDB.info,  Node: POST /db/_purge,  Next: GET /db/_all_docs,  Prev: POST /db/_temp_view,  Up: Database Methods

8.1.11 `POST /db/_purge'
------------------------

   * *Method*: `POST /db/_purge'

   * *Request*: JSON of the document IDs/revisions to be purged

   * *Response*: JSON structure with purged documents and purge sequence

   * *Admin Privileges Required*: no

  A database purge permanently removes the references to deleted
documents from the database. Deleting a document within CouchDB does
not actually remove the document from the database, instead, the
document is marked as a deleted (and a new revision is created). This
is to ensure that deleted documents are replicated to other databases
as having been deleted. This also means that you can check the status
of a document and identify that the document has been deleted.

  The purge operation removes the references to the deleted documents
from the database. The purging of old documents is not replicated to
other databases. If you are replicating between databases and have
deleted a large number of documents you should run purge on each
database.

     Note: Purging documents does not remove the space used by them on
     disk. To reclaim disk space, you should run a database compact (see
     *note POST /db/_compact: 8e.), and compact views (see *note POST
     /db/_compact/design-doc: 90.).

  To perform a purge operation you must send a request including the
JSON of the document IDs that you want to purge. For example:

    POST http://couchdb:5984/recipes/_purge
    Content-Type: application/json

    {
      "FishStew" : [
        "17-b3eb5ac6fbaef4428d712e66483dcb79"
        ]
    }

The format of the request must include the document ID and one or more
revisions that must be purged.

  The response will contain the purge sequence number, and a list of the
document IDs and revisions successfully purged.

    {
       "purged" : {
          "FishStew" : [
             "17-b3eb5ac6fbaef4428d712e66483dcb79"
          ]
       },
       "purge_seq" : 11
    }


* Menu:

* Updating Indexes::


File: CouchDB.info,  Node: Updating Indexes,  Up: POST /db/_purge

8.1.11.1 Updating Indexes
.........................

The number of purges on a database is tracked using a purge sequence.
This is used by the view indexer to optimize the updating of views that
contain the purged documents.

  When the indexer identifies that the purge sequence on a database has
changed, it compares the purge sequence of the database with that stored
in the view index. If the difference between the stored sequence and
database is sequence is only 1, then the indexer uses a cached list of
the most recently purged documents, and then removes these documents
from the index individually. This prevents completely rebuilding the
index from scratch.

  If the difference between the stored sequence number and current
database sequence is greater than 1, then the view index is entirely
rebuilt. This is an expensive operation as every document in the
database must be examined.


File: CouchDB.info,  Node: GET /db/_all_docs,  Next: POST /db/_all_docs,  Prev: POST /db/_purge,  Up: Database Methods

8.1.12 `GET /db/_all_docs'
--------------------------

   * *Method*: `GET /db/_all_docs'

   * *Request*: None

   * *Response*: JSON object containing document information, ordered
     by the document ID

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: descending

             * *Description*:  Return the documents in descending by
               key order

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: endkey

             * *Description*:  Stop returning records when the
               specified key is reached

             * *Optional*: yes

             * *Type*: string

        * *Argument*: endkey_docid

             * *Description*:  Stop returning records when the
               specified document ID is reached

             * *Optional*: yes

             * *Type*: string

        * *Argument*: group

             * *Description*:  Group the results using the reduce
               function to a group or single row

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: group_level

             * *Description*:  Specify the group level to be used

             * *Optional*: yes

             * *Type*: numeric

        * *Argument*: include_docs

             * *Description*:  Include the full content of the
               documents in the return

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: inclusive_end

             * *Description*:  Specifies whether the specified end key
               should be included in the result

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: true

        * *Argument*: key

             * *Description*:  Return only documents that match the
               specified key

             * *Optional*: yes

             * *Type*: string

        * *Argument*: limit

             * *Description*:  Limit the number of the returned
               documents to the specified number

             * *Optional*: yes

             * *Type*: numeric

        * *Argument*: reduce

             * *Description*:  Use the reduction function

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: true

        * *Argument*: skip

             * *Description*:  Skip this number of records before
               starting to return the results

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 0

        * *Argument*: stale

             * *Description*:  Allow the results from a stale view to
               be used

             * *Optional*: yes

             * *Type*: string

             * *Default*:

             * *Supported Values*:

                  * *ok*: Allow stale views

        * *Argument*: startkey

             * *Description*:  Return records starting with the
               specified key

             * *Optional*: yes

             * *Type*: string

        * *Argument*: startkey_docid

             * *Description*:  Return records starting with the
               specified document ID

             * *Optional*: yes

             * *Type*: string

Returns a JSON structure of all of the documents in a given database.
The information is returned as a JSON structure containing meta
information about the return structure, and the list documents and basic
contents, consisting the ID, revision and key. The key is generated from
the document ID.

Field                                  Description
--------------------------------------------------------------------------------------- 
offset                                 Offset where the document list started
rows [array]                           Array of document object
total_rows                             Number of documents in the database/view
update_seq                             Current update sequence for the database

  By default the information returned contains only the document ID and
revision. For example, the request:

    GET http://couchdb:5984/recipes/_all_docs
    Accept: application/json

Returns the following structure:

    {
       "total_rows" : 18386,
       "rows" : [
          {
             "value" : {
                "rev" : "1-bc0d5aed1e339b1cc1f29578f3220a45"
             },
             "id" : "Aberffrawcake",
             "key" : "Aberffrawcake"
          },
          {
             "value" : {
                "rev" : "3-68a20c89a5e70357c20148f8e82ca331"
             },
             "id" : "Adukiandorangecasserole-microwave",
             "key" : "Adukiandorangecasserole-microwave"
          },
          {
             "value" : {
                "rev" : "3-9b2851ed9b6f655cc4eb087808406c60"
             },
             "id" : "Aioli-garlicmayonnaise",
             "key" : "Aioli-garlicmayonnaise"
          },
          ...
             ],
       "offset" : 0
    }

The information is returned in the form of a temporary view of all the
database documents, with the returned key consisting of the ID of the
document. The remainder of the interface is therefore identical to the
View query arguments and their behavior.


File: CouchDB.info,  Node: POST /db/_all_docs,  Next: POST /db/_missing_revs,  Prev: GET /db/_all_docs,  Up: Database Methods

8.1.13 `POST /db/_all_docs'
---------------------------

   * *Method*: `POST /db/_all_docs'

   * *Request*: JSON of the document IDs you want included

   * *Response*: JSON of the returned view

   * *Admin Privileges Required*: no

  The `POST' to `_all_docs' allows to specify multiple keys to be
selected from the database. This enables you to request multiple
documents in a single request, in place of multiple *note GET /db/doc:
9f. requests.

  The request body should contain a list of the keys to be returned as
an array to a `keys' object. For example:

    POST http://couchdb:5984/recipes/_all_docs
    User-Agent: MyApp/0.1 libwww-perl/5.837

    {
       "keys" : [
          "Zingylemontart",
          "Yogurtraita"
       ]
    }

The return JSON is the all documents structure, but with only the
selected keys in the output:

    {
       "total_rows" : 2666,
       "rows" : [
          {
             "value" : {
                "rev" : "1-a3544d296de19e6f5b932ea77d886942"
             },
             "id" : "Zingylemontart",
             "key" : "Zingylemontart"
          },
          {
             "value" : {
                "rev" : "1-91635098bfe7d40197a1b98d7ee085fc"
             },
             "id" : "Yogurtraita",
             "key" : "Yogurtraita"
          }
       ],
       "offset" : 0
    }



File: CouchDB.info,  Node: POST /db/_missing_revs,  Next: POST /db/_revs_diff,  Prev: POST /db/_all_docs,  Up: Database Methods

8.1.14 `POST /db/_missing_revs'
-------------------------------

   * *Method*: `POST /db/_missing_revs'

   * *Request*: JSON list of document revisions

   * *Response*: JSON of missing revisions

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: POST /db/_revs_diff,  Next: GET /db/_security,  Prev: POST /db/_missing_revs,  Up: Database Methods

8.1.15 `POST /db/_revs_diff'
----------------------------

   * *Method*: `POST /db/_revs_diff'

   * *Request*: JSON list of document revisions

   * *Response*: JSON list of differences from supplied
     document/revision list

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: GET /db/_security,  Next: PUT /db/_security,  Prev: POST /db/_revs_diff,  Up: Database Methods

8.1.16 `GET /db/_security'
--------------------------

   * *Method*: `GET /db/_security'

   * *Request*: None

   * *Response*: JSON of the security object

   * *Admin Privileges Required*: no

  Gets the current security object from the specified database. The
security object consists of two compulsory elements, `admins' and
`readers', which are used to specify the list of users and/or roles
that have admin and reader rights to the database respectively. Any
additional fields in the security object are optional. The entire
security object is made available to validation and other internal
functions so that the database can control and limit functionality.

  To get the existing security object you would send the following
request:

    {
       "admins" : {
          "roles" : [],
          "names" : [
             "mc",
             "slp"
          ]
       },
       "readers" : {
          "roles" : [],
          "names" : [
             "tim",
             "brian"
          ]
       }
    }

Security object structure is:

   * *admins*: Roles/Users with admin privileges

        * *roles* [array]: List of roles with parent privilege

        * *users* [array]: List of users with parent privilege

   * *readers*: Roles/Users with reader privileges

        * *roles* [array]: List of roles with parent privilege

        * *users* [array]: List of users with parent privilege

     Note: If the security object for a database has never been set,
     then the value returned will be empty.


File: CouchDB.info,  Node: PUT /db/_security,  Next: GET /db/_revs_limit,  Prev: GET /db/_security,  Up: Database Methods

8.1.17 `PUT /db/_security'
--------------------------

   * *Method*: `PUT /db/_security'

   * *Request*: JSON specifying the admin and user security for the
     database

   * *Response*: JSON status message

   * *Admin Privileges Required*: no

  Sets the security object for the given database.For example, to set
the security object for the `recipes' database:

    PUT http://couchdb:5984/recipes/_security
    Content-Type: application/json

    {
       "admins" : {
          "roles" : [],
          "names" : [
             "mc",
             "slp"
          ]
       },
       "readers" : {
          "roles" : [],
          "names" : [
             "tim",
             "brian"
          ]
       }
    }

If the setting was successful, a JSON status object will be returned:

    {
       "ok" : true
    }



File: CouchDB.info,  Node: GET /db/_revs_limit,  Next: PUT /db/_revs_limit,  Prev: PUT /db/_security,  Up: Database Methods

8.1.18 `GET /db/_revs_limit'
----------------------------

   * *Method*: `GET /db/_revs_limit'

   * *Request*: None

   * *Response*: The current revision limit setting

   * *Admin Privileges Required*: no

  Gets the current `revs_limit' (revision limit) setting.

  For example to get the current limit:

    GET http://couchdb:5984/recipes/_revs_limit
    Content-Type: application/json

The returned information is the current setting as a numerical scalar:

    1000



File: CouchDB.info,  Node: PUT /db/_revs_limit,  Prev: GET /db/_revs_limit,  Up: Database Methods

8.1.19 `PUT /db/_revs_limit'
----------------------------

   * *Method*: `PUT /db/_revs_limit'

   * *Request*: A scalar integer of the revision limit setting

   * *Response*: Confirmation of setting of the revision limit

   * *Admin Privileges Required*: no

  Sets the maximum number of document revisions that will be tracked by
CouchDB, even after compaction has occurred. You can set the revision
limit on a database by using `PUT' with a scalar integer of the limit
that you want to set as the request body.

  For example to set the revs limit to 100 for the `recipes' database:

    PUT http://couchdb:5984/recipes/_revs_limit
    Content-Type: application/json

    100

If the setting was successful, a JSON status object will be returned:

    {
       "ok" : true
    }



File: CouchDB.info,  Node: Document Methods,  Next: Local non-replicating Document Methods,  Prev: Database Methods,  Up: API Reference

8.2 Document Methods
====================

The CouchDB API Server Document methods detail how to create, read,
update and delete documents within a database.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
POST         /db                           Create a new document
GET          /db/doc                       Returns the latest revision of the document
HEAD         /db/doc                       Returns bare information in the HTTP Headers
                                           for the document
PUT          /db/doc                       Inserts a new document, or new version of an
                                           existing document
DELETE       /db/doc                       Deletes the document
COPY         /db/doc                       Copies the document
GET          /db/doc/attachment            Gets the attachment of a document
PUT          /db/doc/attachment            Adds an attachment of a document
DELETE       /db/doc/attachment            Deletes an attachment of a document

* Menu:

* POST /db::
* GET /db/doc::
* HEAD /db/doc::
* PUT /db/doc::
* DELETE /db/doc::
* COPY /db/doc::
* GET /db/doc/attachment::
* PUT /db/doc/attachment::
* DELETE /db/doc/attachment::

POST /db

* Specifying the Document ID::
* UUID generation algorithms::
* Batch Mode Writes::
* Including Attachments::

GET /db/doc

* Attachments::
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::

PUT /db/doc

* Updating an Existing Document::

COPY /db/doc

* Copying a Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::

PUT /db/doc/attachment

* Updating an Existing Attachment::


File: CouchDB.info,  Node: POST /db,  Next: GET /db/doc,  Up: Document Methods

8.2.1 `POST /db'
----------------

   * *Method*: `POST /db'

   * *Request*: JSON of the new document

   * *Response*: JSON with the committed document information

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: batch

             * *Description*:  Allow document store request to be
               batched with others

             * *Optional*: yes

             * *Type*: string

             * *Supported Values*: asd

             * *ok*: Enable

   * *Return Codes*:

        * *201*: Document has been created successfully

        * *409*: Conflict - a document with the specified document ID
          already exists

Create a new document in the specified database, using the supplied JSON
document structure. If the JSON structure includes the `_id' field,
then the document will be created with the specified document ID. If the
`_id' field is not specified, a new unique ID will be generated.

  For example, you can generate a new document with a generated UUID
using the following request:

    POST http://couchdb:5984/recipes/
    Content-Type: application/json

    {
       "servings" : 4,
       "subtitle" : "Delicious with fresh bread",
       "title" : "Fish Stew"
    }

The return JSON will specify the automatically generated ID and revision
information:

    {
       "id" : "64575eef70ab90a2b8d55fc09e00440d",
       "ok" : true,
       "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
    }


* Menu:

* Specifying the Document ID::
* UUID generation algorithms::
* Batch Mode Writes::
* Including Attachments::


File: CouchDB.info,  Node: Specifying the Document ID,  Next: UUID generation algorithms,  Up: POST /db

8.2.1.1 Specifying the Document ID
..................................

The document ID can be specified by including the `_id' field in the
JSON of the submitted record. The following request will create the same
document with the ID `FishStew':

    POST http://couchdb:5984/recipes/
    Content-Type: application/json

    {
       "_id" : "FishStew",
       "servings" : 4,
       "subtitle" : "Delicious with fresh bread",
       "title" : "Fish Stew"
    }

The structure of the submitted document is as shown in the table below:

  In either case, the returned JSON will specify the document ID,
revision ID, and status message:

    {
       "id" : "FishStew",
       "ok" : true,
       "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
    }



File: CouchDB.info,  Node: UUID generation algorithms,  Next: Batch Mode Writes,  Prev: Specifying the Document ID,  Up: POST /db

8.2.1.2 UUID generation algorithms
..................................

CouchDB supports a number of different UUID generation algorithms for
use in situations where a user-specified UUID does not make sense. These
can be set simply by `PUT http://couchdb:5984/_config/uuids/algorithm'.

Algorithm           Description               Sample UUID
--------------------------------------------------------------------------------------- 
random              128 bits of pure random      - 43febce5675468a5467fb5467ce9e6c0
                    awesomeness               
sequential          monotonically increasing     - f755c413badf66b22941313f9f001e28
                    ids with random           
                    increments                   - f755c413badf66b22941313f9f0024ca
                                              
                                                 - f755c413badf66b22941313f9f00332c
utc_random          time since start of          - 04cfa405381205204f75100d0241ccc3
                    epoch, as 14 hex digits,  
                    followed by 18 random        - 04cfa4059c48e76e7c054bbe033dd8db
                    digits.                   
                                                 - 04cfa405fce10b0df4c08f95e667cd2f
utc_id & additional time since start of          - 04cfa718b00848_i_am_in_yer_couch
parameter           epoch, as 14 hex digits,  
                    followed by                  - 04cfa71d377aef_i_am_in_yer_couch
                    utc_id_suffix.            
                                                 - 04cfa71e0deabd_i_am_in_yer_couch


File: CouchDB.info,  Node: Batch Mode Writes,  Next: Including Attachments,  Prev: UUID generation algorithms,  Up: POST /db

8.2.1.3 Batch Mode Writes
.........................

You can write documents to the database at a higher rate by using the
batch option. This collects document writes together in memory (on a
user-by-user basis) before they are committed to disk. This increases
the risk of the documents not being stored in the event of a failure,
since the documents are not written to disk immediately.

  To use the batched mode, append the `batch=ok' query argument to the
URL of the `PUT' or `POST' request. The CouchDB server will respond
with a 202 HTTP response code immediately.


File: CouchDB.info,  Node: Including Attachments,  Prev: Batch Mode Writes,  Up: POST /db

8.2.1.4 Including Attachments
.............................

You can include one or more attachments with a given document by
incorporating the attachment information within the JSON of the
document. This provides a simpler alternative to loading documents with
attachments than making a separate call (see *note PUT
/db/doc/attachment: b0.).

   * *_id* (optional): Document ID

   * *_rev* (optional): Revision ID (when updating an existing document)

   * *_attachments* (optional): Document Attachment

        * *filename*: Attachment information

             * *content_type*: MIME Content type string

             * *data*: File attachment content, Base64 encoded

  The `filename' will be the attachment name. For example, when sending
the JSON structure below:

    {
       "_id" : "FishStew",
       "servings" : 4,
       "subtitle" : "Delicious with fresh bread",
       "title" : "Fish Stew"
       "_attachments" : {
          "styling.css" : {
             "content-type" : "text/css",
             "data" : "cCB7IGZvbnQtc2l6ZTogMTJwdDsgfQo=",
             },
       },
    }

The attachment `styling.css' can be accessed using
`/recipes/FishStew/styling.css'. For more information on attachments,
see *note GET /db/doc/attachment: b1.

  The document data embedded in to the structure must be encoded using
base64.


File: CouchDB.info,  Node: GET /db/doc,  Next: HEAD /db/doc,  Prev: POST /db,  Up: Document Methods

8.2.2 `GET /db/doc'
-------------------

   * *Method*: `GET /db/doc'

   * *Request*: None

   * *Response*: Returns the JSON for the document

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: conflicts

             * *Description*: Returns the conflict tree for the
               document.

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

             * *Supported Values*:

                  * *true*: Includes the revisions

        * *Argument*: rev

             * *Description*: Specify the revision to return

             * *Optional*: yes

             * *Type*: string

             * *Supported Values*:

                  * *true*: Includes the revisions

        * *Argument*: revs

             * *Description*:  Return a list of the revisions for the
               document

             * *Optional*: yes

             * *Type*: boolean

        * *Argument*: revs_info

             * *Description*: Return a list of detailed revision
               information for the document

             * *Optional*: yes

             * *Type*: boolean

             * *Supported Values*:

                  * *true*: Includes the revisions

   * *Return Codes*:

        * *200*: Document retrieved

        * *400*: The format of the request or revision was invalid

        * *404*: The specified document or revision cannot be found, or
          has been deleted

        * *409*: Conflict - a document with the specified document ID
          already exists

Returns the specified `doc' from the specified `db'. For example, to
retrieve the document with the id `FishStew' you would send the
following request:

    GET http://couchdb:5984/recipes/FishStew
    Content-Type: application/json
    Accept: application/json

The returned JSON is the JSON of the document, including the document ID
and revision number:

    {
       "_id" : "FishStew",
       "_rev" : "3-a1a9b39ee3cc39181b796a69cb48521c",
       "servings" : 4,
       "subtitle" : "Delicious with a green salad",
       "title" : "Irish Fish Stew"
    }

Unless you request a specific revision, the latest revision of the
document will always be returned.

* Menu:

* Attachments::
* Getting a List of Revisions::
* Obtaining an Extended Revision History::
* Obtaining a Specific Revision::


File: CouchDB.info,  Node: Attachments,  Next: Getting a List of Revisions,  Up: GET /db/doc

8.2.2.1 Attachments
...................

If the document includes attachments, then the returned structure will
contain a summary of the attachments associated with the document, but
not the attachment data itself.

  The JSON for the returned document will include the `_attachments'
field, with one or more attachment definitions. For example:

    {
       "_id" : "FishStew",
       "servings" : 4,
       "subtitle" : "Delicious with fresh bread",
       "title" : "Fish Stew"
       "_attachments" : {
          "styling.css" : {
             "stub" : true,
             "content-type" : "text/css",
             "length" : 783426,
             },
       },
    }

The format of the returned JSON is shown in the table below:

   * *_id* (optional): Document ID

   * *_rev* (optional): Revision ID (when updating an existing document)

   * *_attachments* (optional): Document Attachment

        * *filename*: Attachment information

             * *content_type*: MIME Content type string

             * *length*: Length (bytes) of the attachment data

             * *revpos*: Revision where this attachment exists

             * *stub*: Indicates whether the attachment is a stub


File: CouchDB.info,  Node: Getting a List of Revisions,  Next: Obtaining an Extended Revision History,  Prev: Attachments,  Up: GET /db/doc

8.2.2.2 Getting a List of Revisions
...................................

You can obtain a list of the revisions for a given document by adding
the `revs=true' parameter to the request URL. For example:

    GET http://couchdb:5984/recipes/FishStew?revs=true
    Accept: application/json

The returned JSON structure includes the original document, including a
`_revisions' structure that includes the revision information:

    {
       "servings" : 4,
       "subtitle" : "Delicious with a green salad",
       "_id" : "FishStew",
       "title" : "Irish Fish Stew",
       "_revisions" : {
          "ids" : [
             "a1a9b39ee3cc39181b796a69cb48521c",
             "7c4740b4dcf26683e941d6641c00c39d",
             "9c65296036141e575d32ba9c034dd3ee"
          ],
          "start" : 3
       },
       "_rev" : "3-a1a9b39ee3cc39181b796a69cb48521c"
    }


   * *_id* (optional): Document ID

   * *_rev* (optional): Revision ID (when updating an existing document)

   * *_revisions*: CouchDB Document Revisions

        * *ids* [array]: Array of valid revision IDs, in reverse order
          (latest first)

        * *start*: Prefix number for the latest revision


File: CouchDB.info,  Node: Obtaining an Extended Revision History,  Next: Obtaining a Specific Revision,  Prev: Getting a List of Revisions,  Up: GET /db/doc

8.2.2.3 Obtaining an Extended Revision History
..............................................

You can get additional information about the revisions for a given
document by supplying the `revs_info' argument to the query:

    GET http://couchdb:5984/recipes/FishStew?revs_info=true
    Accept: application/json

This returns extended revision information, including the availability
and status of each revision:

    {
       "servings" : 4,
       "subtitle" : "Delicious with a green salad",
       "_id" : "FishStew",
       "_revs_info" : [
          {
             "status" : "available",
             "rev" : "3-a1a9b39ee3cc39181b796a69cb48521c"
          },
          {
             "status" : "available",
             "rev" : "2-7c4740b4dcf26683e941d6641c00c39d"
          },
          {
             "status" : "available",
             "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
          }
       ],
       "title" : "Irish Fish Stew",
       "_rev" : "3-a1a9b39ee3cc39181b796a69cb48521c"
    }


   * *_id* (optional): Document ID

   * *_rev* (optional): Revision ID (when updating an existing document)

   * *_revs_info* [array]: CouchDB Document Extended Revision Info

        * *rev*: Full revision string

        * *status*: Status of the revision


File: CouchDB.info,  Node: Obtaining a Specific Revision,  Prev: Obtaining an Extended Revision History,  Up: GET /db/doc

8.2.2.4 Obtaining a Specific Revision
.....................................

To get a specific revision, use the `rev' argument to the request, and
specify the full revision number:

    GET http://couchdb:5984/recipes/FishStew?rev=2-7c4740b4dcf26683e941d6641c00c39d
    Accept: application/json

The specified revision of the document will be returned, including a
`_rev' field specifying the revision that was requested:

    {
       "_id" : "FishStew",
       "_rev" : "2-7c4740b4dcf26683e941d6641c00c39d",
       "servings" : 4,
       "subtitle" : "Delicious with a green salad",
       "title" : "Fish Stew"
    }



File: CouchDB.info,  Node: HEAD /db/doc,  Next: PUT /db/doc,  Prev: GET /db/doc,  Up: Document Methods

8.2.3 `HEAD /db/doc'
--------------------

   * *Method*: `HEAD /db/doc'

   * *Request*: None

   * *Response*: None

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Specify the revision to return

             * *Optional*: yes

             * *Type*: string

        * *Argument*: revs

             * *Description*:  Return a list of the revisions for the
               document

             * *Optional*: yes

             * *Type*: boolean

        * *Argument*: revs_info

             * *Description*:  Return a list of detailed revision
               information for the document

             * *Optional*: yes

             * *Type*: boolean

   * *Return Codes*:

        * *404*: The specified document or revision cannot be found, or
          has been deleted

Returns the HTTP Headers containing a minimal amount of information
about the specified document. The method supports the same query
arguments as the `GET' method, but only the header information
(including document size, and the revision as an ETag), is returned. For
example, a simple `HEAD' request:

    HEAD http://couchdb:5984/recipes/FishStew
    Content-Type: application/json

Returns the following HTTP Headers:

    HTTP/1.1 200 OK
    Server: CouchDB/1.0.1 (Erlang OTP/R13B)
    Etag: "7-a19a1a5ecd946dad70e85233ba039ab2"
    Date: Fri, 05 Nov 2010 14:54:43 GMT
    Content-Type: text/plain;charset=utf-8
    Content-Length: 136
    Cache-Control: must-revalidate

The `Etag' header shows the current revision for the requested
document, and the `Content-Length' specifies the length of the data, if
the document were requested in full.

  Adding any of the query arguments (as supported by ``GET```_ method),
then the resulting HTTP Headers will correspond to what would be
returned. Note that the current revision is not returned when the
``refs_info' argument is used. For example:

    HTTP/1.1 200 OK
    Server: CouchDB/1.0.1 (Erlang OTP/R13B)
    Date: Fri, 05 Nov 2010 14:57:16 GMT
    Content-Type: text/plain;charset=utf-8
    Content-Length: 609
    Cache-Control: must-revalidate



File: CouchDB.info,  Node: PUT /db/doc,  Next: DELETE /db/doc,  Prev: HEAD /db/doc,  Up: Document Methods

8.2.4 `PUT /db/doc'
-------------------

   * *Method*: `PUT /db/doc'

   * *Request*: JSON of the new document, or updated version of the
     existed document

   * *Response*: JSON of the document ID and revision

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: batch

             * *Description*:  Allow document store request to be
               batched with others

             * *Optional*: yes

             * *Type*: string

             * *Supported Values*:

                  * *ok*: Enable

   * *HTTP Headers*

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *201*: Document has been created successfully

        * *202*: Document accepted for writing (batch mode)

The `PUT' method creates a new named document, or creates a new
revision of the existing document. Unlike the `POST' method, you must
specify the document ID in the request URL.

  For example, to create the document `FishStew', you would send the
following request:

    PUT http://couchdb:5984/recipes/FishStew
    Content-Type: application/json

    {
      "servings" : 4,
      "subtitle" : "Delicious with fresh bread",
      "title" : "Fish Stew"
    }

The return type is JSON of the status, document ID,and revision number:

    {
       "id" : "FishStew",
       "ok" : true,
       "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
    }


* Menu:

* Updating an Existing Document::


File: CouchDB.info,  Node: Updating an Existing Document,  Up: PUT /db/doc

8.2.4.1 Updating an Existing Document
.....................................

To update an existing document you must specify the current revision
number within the `_rev' parameter. For example:

    PUT http://couchdb:5984/recipes/FishStew
    Content-Type: application/json

    {
      "_rev" : "1-9c65296036141e575d32ba9c034dd3ee",
      "servings" : 4,
      "subtitle" : "Delicious with fresh salad",
      "title" : "Fish Stew"
    }

Alternatively, you can supply the current revision number in the
`If-Match' HTTP header of the request. For example:

    PUT http://couchdb:5984/recipes/FishStew
    If-Match: 2-d953b18035b76f2a5b1d1d93f25d3aea
    Content-Type: application/json

    {
       "servings" : 4,
       "subtitle" : "Delicious with fresh salad",
       "title" : "Fish Stew"
    }

The JSON returned will include the updated revision number:

    {
       "id" : "FishStew99",
       "ok" : true,
       "rev" : "2-d953b18035b76f2a5b1d1d93f25d3aea"
    }

For information on batched writes, which can provide improved
performance, see *note UUID generation algorithms: ac.


File: CouchDB.info,  Node: DELETE /db/doc,  Next: COPY /db/doc,  Prev: PUT /db/doc,  Up: Document Methods

8.2.5 `DELETE /db/doc'
----------------------

   * *Method*: `DELETE /db/doc'

   * *Request*: None

   * *Response*: JSON of the deleted revision

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Current revision of the document for
               validation

             * *Optional*: yes

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *409*: Revision is missing, invalid or not the latest

Deletes the specified document from the database. You must supply the
current (latest) revision, either by using the `rev' parameter to
specify the revision:

    DELETE http://couchdb:5984/recipes/FishStew?rev=3-a1a9b39ee3cc39181b796a69cb48521c
    Content-Type: application/json

Alternatively, you can use ETags with the `If-Match' field:

    DELETE http://couchdb:5984/recipes/FishStew
    If-Match: 3-a1a9b39ee3cc39181b796a69cb48521c
    Content-Type: application/json

The returned JSON contains the document ID, revision and status:

    {
       "id" : "FishStew",
       "ok" : true,
       "rev" : "4-2719fd41187c60762ff584761b714cfb"
    }


     Note: Note that deletion of a record increments the revision
     number. The use of a revision for deletion of the record allows
     replication of the database to correctly track the deletion in
     synchronized copies.


File: CouchDB.info,  Node: COPY /db/doc,  Next: GET /db/doc/attachment,  Prev: DELETE /db/doc,  Up: Document Methods

8.2.6 `COPY /db/doc'
--------------------

   * *Method*: `COPY /db/doc'

   * *Request*: None

   * *Response*: JSON of the new document and revision

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Revision to copy from

             * *Optional*: yes

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `Destination'

             * *Description*: Destination document (and optional
               revision)

             * *Optional*: no

   * *Return Codes*:

        * *201*: Document has been copied and created successfully

        * *409*: Revision is missing, invalid or not the latest

The `COPY' command (which is non-standard HTTP) copies an existing
document to a new or existing document.

  The source document is specified on the request line, with the
`Destination' HTTP Header of the request specifying the target document.

* Menu:

* Copying a Document::
* Copying from a Specific Revision::
* Copying to an Existing Document::


File: CouchDB.info,  Node: Copying a Document,  Next: Copying from a Specific Revision,  Up: COPY /db/doc

8.2.6.1 Copying a Document
..........................

You can copy the latest version of a document to a new document by
specifying the current document and target document:

    COPY http://couchdb:5984/recipes/FishStew
    Content-Type: application/json
    Destination: IrishFishStew

The above request copies the document `FishStew' to the new document
`IrishFishStew'. The response is the ID and revision of the new
document.

    {
       "id" : "IrishFishStew",
       "rev" : "1-9c65296036141e575d32ba9c034dd3ee"
    }



File: CouchDB.info,  Node: Copying from a Specific Revision,  Next: Copying to an Existing Document,  Prev: Copying a Document,  Up: COPY /db/doc

8.2.6.2 Copying from a Specific Revision
........................................

To copy _from_ a specific version, use the `rev' argument to the query
string:

    COPY http://couchdb:5984/recipes/FishStew?rev=5-acfd32d233f07cea4b4f37daaacc0082
    Content-Type: application/json
    Destination: IrishFishStew

The new document will be created using the information in the specified
revision of the source document.


File: CouchDB.info,  Node: Copying to an Existing Document,  Prev: Copying from a Specific Revision,  Up: COPY /db/doc

8.2.6.3 Copying to an Existing Document
.......................................

To copy to an existing document, you must specify the current revision
string for the target document, using the `rev' parameter to the
`Destination' HTTP Header string. For example:

    COPY http://couchdb:5984/recipes/FishStew
    Content-Type: application/json
    Destination: IrishFishStew?rev=1-9c65296036141e575d32ba9c034dd3ee

The return value will be the new revision of the copied document:

    {
       "id" : "IrishFishStew",
       "rev" : "2-55b6a1b251902a2c249b667dab1c6692"
    }



File: CouchDB.info,  Node: GET /db/doc/attachment,  Next: PUT /db/doc/attachment,  Prev: COPY /db/doc,  Up: Document Methods

8.2.7 `GET /db/doc/attachment'
------------------------------

   * *Method*: `GET /db/doc/attachment'

   * *Request*: None

   * *Response*: Returns the attachment data

   * *Admin Privileges Required*: no

  Returns the file attachment `attachment' associated with the document
`doc'. The raw data of the associated attachment is returned (just as
if you were accessing a static file. The returned HTTP `Content-type'
will be the same as the content type set when the document attachment
was submitted into the database.


File: CouchDB.info,  Node: PUT /db/doc/attachment,  Next: DELETE /db/doc/attachment,  Prev: GET /db/doc/attachment,  Up: Document Methods

8.2.8 `PUT /db/doc/attachment'
------------------------------

   * *Method*: `PUT /db/doc/attachment'

   * *Request*: Raw document data

   * *Response*: JSON document status

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Current document revision

             * *Optional*: no

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `Content-Length'

             * *Description*: Length (bytes) of the attachment being
               uploaded

             * *Optional*: no

        * *Header*: `Content-Type'

             * *Description*: MIME type for the uploaded attachment

             * *Optional*: no

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *201*: Attachment has been accepted

Upload the supplied content as an attachment to the specified document
(`doc'). The `attachment' name provided must be a URL encoded string.
You must also supply either the `rev' query argument or the `If-Match'
HTTP header for validation, and the HTTP headers (to set the attachment
content type). The content type is used when the attachment is
requested as the corresponding content-type in the returned document
header.

  For example, you could upload a simple text document using the
following request:

    PUT http://couchdb:5984/recipes/FishStew/basic?rev=8-a94cb7e50ded1e06f943be5bfbddf8ca
    Content-Length: 10
    Content-Type: text/plain

    Roast it

Or by using the `If-Match' HTTP header:

    PUT http://couchdb:5984/recipes/FishStew/basic
    If-Match: 8-a94cb7e50ded1e06f943be5bfbddf8ca
    Content-Length: 10
    Content-Type: text/plain

    Roast it

The returned JSON contains the new document information:

    {
       "id" : "FishStew",
       "ok" : true,
       "rev" : "9-247bb19a41bfd9bfdaf5ee6e2e05be74"
    }


     Note: Uploading an attachment updates the corresponding document
     revision.  Revisions are tracked for the parent document, not
     individual attachments.

* Menu:

* Updating an Existing Attachment::


File: CouchDB.info,  Node: Updating an Existing Attachment,  Up: PUT /db/doc/attachment

8.2.8.1 Updating an Existing Attachment
.......................................

Uploading an attachment using an existing attachment name will update
the corresponding stored content of the database. Since you must supply
the revision information to add an attachment to a document, this serves
as validation to update the existing attachment.


File: CouchDB.info,  Node: DELETE /db/doc/attachment,  Prev: PUT /db/doc/attachment,  Up: Document Methods

8.2.9 `DELETE /db/doc/attachment'
---------------------------------

   * *Method*: `DELETE /db/doc/attachment'

   * *Request*: None

   * *Response*: JSON status

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Current document revision

             * *Optional*: no

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *200*: Attachment deleted successfully

        * *409*: Supplied revision is incorrect or missing

Deletes the attachment `attachment' to the specified `doc'. You must
supply the `rev' argument with the current revision to delete the
attachment.

  For example to delete the attachment `basic' from the recipe
`FishStew':

    DELETE http://couchdb:5984/recipes/FishStew/basic?rev=9-247bb19a41bfd9bfdaf5ee6e2e05be74
    Content-Type: application/json

The returned JSON contains the updated revision information:

    {
       "id" : "FishStew",
       "ok" : true,
       "rev" : "10-561bf6b1e27615cee83d1f48fa65dd3e"
    }



File: CouchDB.info,  Node: Local non-replicating Document Methods,  Next: Design Document Methods,  Prev: Document Methods,  Up: API Reference

8.3 Local (non-replicating) Document Methods
============================================

The Local (non-replicating) document interface allows you to create
local documents that are not replicated to other databases. These
documents can be used to hold configuration or other information that is
required specifically on the local CouchDB instance.

  Local documents have the following limitations:

   - Local documents are not replicated to other databases.

   - The ID of the local document must be known for the document to
     accessed. You cannot obtain a list of local documents from the
     database.

   - Local documents are not output by views, or the `_all_docs' view.

  Local documents can be used when you want to store configuration or
other information for the current (local) instance of a given database.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
GET          /db/_local/local-doc          Returns the latest revision of the
                                           non-replicated document
PUT          /db/_local/local-doc          Inserts a new version of the non-replicated
                                           document
DELETE       /db/_local/local-doc          Deletes the non-replicated document
COPY         /db/_local/local-doc          Copies the non-replicated document

* Menu:

* GET /db/_local/local-doc::
* PUT /db/_local/local-doc::
* DELETE /db/_local/local-doc::
* COPY /db/_local/local-doc::


File: CouchDB.info,  Node: GET /db/_local/local-doc,  Next: PUT /db/_local/local-doc,  Up: Local non-replicating Document Methods

8.3.1 `GET /db/_local/local-doc'
--------------------------------

   * *Method*: `GET /db/_local/local-doc'

   * *Request*: None

   * *Response*: JSON of the returned document

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Specify the revision to return

             * *Optional*: yes

             * *Type*: string

             * *Supported Values*:

                  * *true*: Includes the revisions

        * *Argument*: revs

             * *Description*:  Return a list of the revisions for the
               document

             * *Optional*: yes

             * *Type*: boolean

        * *Argument*: revs_info

             * *Description*:  Return a list of detailed revision
               information for the document

             * *Optional*: yes

             * *Type*: boolean

             * *Supported Values*

                  * *true*: Includes the revisions

   * *Return Codes*:

        * *400*: The format of the request or revision was invalid

        * *404*: The specified document or revision cannot be found, or
          has been deleted

Gets the specified local document. The semantics are identical to
accessing a standard document in the specified database, except that the
document is not replicated. See *note GET /db/doc: 9f.


File: CouchDB.info,  Node: PUT /db/_local/local-doc,  Next: DELETE /db/_local/local-doc,  Prev: GET /db/_local/local-doc,  Up: Local non-replicating Document Methods

8.3.2 `PUT /db/_local/local-doc'
--------------------------------

   * *Method*: `PUT /db/_local/local-doc'

   * *Request*: JSON of the document

   * *Response*: JSON with the committed document information

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *201*: Document has been created successfully

Stores the specified local document. The semantics are identical to
storing a standard document in the specified database, except that the
document is not replicated. See *note PUT /db/doc: b9.


File: CouchDB.info,  Node: DELETE /db/_local/local-doc,  Next: COPY /db/_local/local-doc,  Prev: PUT /db/_local/local-doc,  Up: Local non-replicating Document Methods

8.3.3 `DELETE /db/_local/local-doc'
-----------------------------------

   * *Method*: `DELETE /db/_local/local-doc'

   * *Request*: None

   * *Response*: JSON with the deleted document information

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *409*: Supplied revision is incorrect or missing

Deletes the specified local document. The semantics are identical to
deleting a standard document in the specified database, except that the
document is not replicated. See *note DELETE /db/doc: bb.


File: CouchDB.info,  Node: COPY /db/_local/local-doc,  Prev: DELETE /db/_local/local-doc,  Up: Local non-replicating Document Methods

8.3.4 `COPY /db/_local/local-doc'
---------------------------------

   * *Method*: `COPY /db/_local/local-doc'

   * *Request*: None

   * *Response*: JSON of the copied document

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*: Revision to copy from

             * *Optional*: yes

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `Destination'

             * *Description*: Destination document (and optional
               revision)

             * *Optional*: no

Copies the specified local document. The semantics are identical to
copying a standard document in the specified database, except that the
document is not replicated. See *note COPY /db/doc: be.


File: CouchDB.info,  Node: Design Document Methods,  Next: Miscellaneous Methods,  Prev: Local non-replicating Document Methods,  Up: API Reference

8.4 Design Document Methods
===========================

In CouchDB, design documents provide the main interface for building a
CouchDB application. The design document defines the views used to
extract information from CouchDB through one or more views. Design
documents are created within your CouchDB instance in the same way as
you create database documents, but the content and definition of the
documents is different. Design Documents are named using an ID defined
with the design document URL path, and this URL can then be used to
access the database contents.

  Views and lists operate together to provide automated (and formatted)
output from your database.

  A list of the available methods and URL paths are provided below:

  Design Document API Calls

* Menu:

* GET /db/_design/design-doc::
* PUT /db/_design/design-doc::
* DELETE /db/_design/design-doc::
* COPY /db/_design/design-doc::
* GET /db/_design/design-doc/attachment::
* PUT /db/_design/design-doc/attachment::
* DELETE /db/_design/design-doc/attachment::
* GET /db/_design/design-doc/_info::
* GET /db/_design/design-doc/_view/view-name::
* POST /db/_design/design-doc/_view/view-name::
* GET /db/_design/design-doc/_show/show-name::
* POST /db/_design/design-doc/_show/show-name/doc::
* GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name::
* POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name::
* GET /db/_design/design-doc/_list/list-name/view-name::
* POST /db/_design/design-doc/_list/list-name/view-name::
* PUT /db/_design/design-doc/_update/updatename/doc::
* POST /db/_design/design-doc/_update/updatename::
* ALL /db/_design/design-doc/_rewrite/rewrite-name/anything::


File: CouchDB.info,  Node: GET /db/_design/design-doc,  Next: PUT /db/_design/design-doc,  Up: Design Document Methods

8.4.1 `GET /db/_design/design-doc'
----------------------------------

   * *Method*: `GET /db/_design/design-doc'

   * *Request*:  None

   * *Response*:  JSON of the existing design document

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Specify the revision to return

             * *Optional*: yes

             * *Type*: string

        * *Argument*: revs

             * *Description*:  Return a list of the revisions for the
               document

             * *Optional*: yes

             * *Type*: boolean

             * *Supported Values*:

                       * *true*: Includes the revisions

        * *Argument*: revs_info

             * *Description*:  Return a list of detailed revision
               information for the document

             * *Optional*: yes

             * *Type*: boolean

             * *Supported Values*:

                  * *true*: Includes the revisions

Returns the specified design document, `design-doc' from the specified
`db'. For example, to retrieve the design document `recipes' you would
send the following request:

    GET http://couchdb:5984/recipes/_design/recipes
    Content-Type: application/json

The returned string will be the JSON of the design document:

    {
       "_id" : "_design/recipes",
       "_rev" : "5-39f56a392b86bbee57e2138921346406"
       "language" : "javascript",
       "views" : {
          "by_recipe" : {
             "map" : "function(doc) { if (doc.title != null) emit(doc.title, doc) }"
          },
       },
    }

A list of the revisions can be obtained by using the `revs' query
argument, or an extended list of revisions using the `revs_info' query
argument. This operates in the same way as for other documents. Fur
further examples, see *note GET /db/doc: 9f.


File: CouchDB.info,  Node: PUT /db/_design/design-doc,  Next: DELETE /db/_design/design-doc,  Prev: GET /db/_design/design-doc,  Up: Design Document Methods

8.4.2 `PUT /db/_design/design-doc'
----------------------------------

   * *Method*: `PUT /db/_design/design-doc'

   * *Request*:  JSON of the design document

   * *Response*:  JSON status

   * *Admin Privileges Required*: no

  Upload the specified design document, `design-doc', to the specified
database. The design document should follow the definition of a design
document, as summarised in the following table.

   * *_id*:  Design Document ID

   * *_rev*:  Design Document Revision

   * *views*:  View

        * *viewname*:  View Definition

             * *map*:  Map Function for View

             * *reduce (optional)*:  Reduce Function for View

  For more information on writing views, see *note GET
/db/_design/design-doc/_view/view-name: d3.


File: CouchDB.info,  Node: DELETE /db/_design/design-doc,  Next: COPY /db/_design/design-doc,  Prev: PUT /db/_design/design-doc,  Up: Design Document Methods

8.4.3 `DELETE /db/_design/design-doc'
-------------------------------------

   * *Method*: `DELETE /db/_design/design-doc'

   * *Request*:  None

   * *Response*:  JSON of deleted design document

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Current revision of the document for
               validation

             * *Optional*: yes

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *409*: Supplied revision is incorrect or missing

Delete an existing design document. Deleting a design document also
deletes all of the associated view indexes, and recovers the
corresponding space on disk for the indexes in question.

  To delete, you must specify the current revision of the design
document using the `rev' query argument.

  For example:

    DELETE http://couchdb:5984/recipes/_design/recipes?rev=2-ac58d589b37d01c00f45a4418c5a15a8
    Content-Type: application/json

The response contains the delete document ID and revision:

    {
       "id" : "recipe/_design/recipes"
       "ok" : true,
       "rev" : "3-7a05370bff53186cb5d403f861aca154",
    }



File: CouchDB.info,  Node: COPY /db/_design/design-doc,  Next: GET /db/_design/design-doc/attachment,  Prev: DELETE /db/_design/design-doc,  Up: Design Document Methods

8.4.4 `COPY /db/_design/design-doc'
-----------------------------------

   * *Method*: `COPY /db/_design/design-doc'

   * *Request*: None

   * *Response*: JSON of the new document and revision

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Revision to copy from

             * *Optional*: yes

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `Destination'

             * *Description*: Destination document (and optional
               revision)

             * *Optional*: no

The `COPY' command (non-standard HTTP) copies an existing design
document to a new or existing document.

  The source design document is specified on the request line, with the
`Destination' HTTP Header of the request specifying the target document.

* Menu:

* Copying a Design Document::
* Copying from a Specific Revision: Copying from a Specific Revision<2>.
* Copying to an Existing Design Document::


File: CouchDB.info,  Node: Copying a Design Document,  Next: Copying from a Specific Revision<2>,  Up: COPY /db/_design/design-doc

8.4.4.1 Copying a Design Document
.................................

To copy the latest version of a design document to a new document you
specify the base document and target document:

    COPY http://couchdb:5984/recipes/_design/recipes
    Content-Type: application/json
    Destination: /recipes/_design/recipelist

The above request copies the design document `recipes' to the new
design document `recipelist'. The response is the ID and revision of
the new document.

    {
       "id" : "recipes/_design/recipelist"
       "rev" : "1-9c65296036141e575d32ba9c034dd3ee",
    }


     Note: Copying a design document does automatically reconstruct the
     view indexes. These will be recreated, as with other views, the
     first time the new view is accessed.


File: CouchDB.info,  Node: Copying from a Specific Revision<2>,  Next: Copying to an Existing Design Document,  Prev: Copying a Design Document,  Up: COPY /db/_design/design-doc

8.4.4.2 Copying from a Specific Revision
........................................

To copy _from_ a specific version, use the `rev' argument to the query
string:

    COPY http://couchdb:5984/recipes/_design/recipes?rev=1-e23b9e942c19e9fb10ff1fde2e50e0f5
    Content-Type: application/json
    Destination: recipes/_design/recipelist

The new design document will be created using the specified revision of
the source document.


File: CouchDB.info,  Node: Copying to an Existing Design Document,  Prev: Copying from a Specific Revision<2>,  Up: COPY /db/_design/design-doc

8.4.4.3 Copying to an Existing Design Document
..............................................

To copy to an existing document, you must specify the current revision
string for the target document, using the `rev' parameter to the
`Destination' HTTP Header string. For example:

    COPY http://couchdb:5984/recipes/_design/recipes
    Content-Type: application/json
    Destination: recipes/_design/recipelist?rev=1-9c65296036141e575d32ba9c034dd3ee

The return value will be the new revision of the copied document:

    {
       "id" : "recipes/_design/recipes"
       "rev" : "2-55b6a1b251902a2c249b667dab1c6692",
    }



File: CouchDB.info,  Node: GET /db/_design/design-doc/attachment,  Next: PUT /db/_design/design-doc/attachment,  Prev: COPY /db/_design/design-doc,  Up: Design Document Methods

8.4.5 `GET /db/_design/design-doc/attachment'
---------------------------------------------

   * *Method*: `GET /db/_design/design-doc/attachment'

   * *Request*: None

   * *Response*: Returns the attachment data

   * *Admin Privileges Required*: no

  Returns the file attachment `attachment' associated with the design
document `/_design_/design-doc'. The raw data of the associated
attachment is returned (just as if you were accessing a static file. The
returned HTTP `Content-type' will be the same as the content type set
when the document attachment was submitted into the database.


File: CouchDB.info,  Node: PUT /db/_design/design-doc/attachment,  Next: DELETE /db/_design/design-doc/attachment,  Prev: GET /db/_design/design-doc/attachment,  Up: Design Document Methods

8.4.6 `PUT /db/_design/design-doc/attachment'
---------------------------------------------

   * *Method*: `PUT /db/_design/design-doc/attachment'

   * *Request*: Raw document data

   * *Response*: JSON document status

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Current document revision

             * *Optional*: no

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `Content-Length'

             * *Description*: Length (bytes) of the attachment being
               uploaded

             * *Optional*: no

        * *Header*: `Content-Type'

             * *Description*: MIME type for the uploaded attachment

             * *Optional*: no

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

Upload the supplied content as an attachment to the specified design
document (`/_design/design-doc'). The `attachment' name provided must
be a URL encoded string. You must also supply either the `rev' query
argument or the `If-Match' HTTP header for validation, and the HTTP
headers (to set the attacment content type). The content type is used
when the attachment is requested as the corresponding content-type in
the returned document header.

  For example, you could upload a simple text document using the
following request:

    PUT http://couchdb:5984/recipes/_design/recipes/view.css?rev=7-f7114d4d81124b223283f3e89eee043e
    Content-Length: 39
    Content-Type: text/plain

    div.recipetitle {
    font-weight: bold;
    }

Or by using the `If-Match' HTTP header:

    PUT http://couchdb:5984/recipes/FishStew/basic
    If-Match: 7-f7114d4d81124b223283f3e89eee043e
    Content-Length: 39
    Content-Type: text/plain

    div.recipetitle {
    font-weight: bold;
    }

The returned JSON contains the new document information:

    {
       "id" : "_design/recipes"
       "ok" : true,
       "rev" : "8-cb2b7d94eeac76782a02396ba70dfbf5",
    }


     Note: Uploading an attachment updates the corresponding document
     revision.  Revisions are tracked for the parent document, not
     individual attachments.


File: CouchDB.info,  Node: DELETE /db/_design/design-doc/attachment,  Next: GET /db/_design/design-doc/_info,  Prev: PUT /db/_design/design-doc/attachment,  Up: Design Document Methods

8.4.7 `DELETE /db/_design/design-doc/attachment'
------------------------------------------------

   * *Method*: `DELETE /db/_design/design-doc/attachment'

   * *Request*: None

   * *Response*: JSON status

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: rev

             * *Description*:  Current document revision

             * *Optional*: no

             * *Type*: string

   * *HTTP Headers*

        * *Header*: `If-Match'

             * *Description*: Current revision of the document for
               validation

             * *Optional*: yes

   * *Return Codes*:

        * *200*: Attachment deleted successfully

        * *409*: Supplied revision is incorrect or missing

Deletes the attachment `attachment' to the specified
`_design/design-doc'. You must supply the `rev' argument with the
current revision to delete the attachment.

  For example to delete the attachment `view.css' from the design
document `recipes':

    DELETE http://couchdb:5984/recipes/_design/recipes/view.css?rev=9-3db559f13a845c7751d407404cdeaa4a

The returned JSON contains the updated revision information for the
parent document:

    {
       "id" : "_design/recipes"
       "ok" : true,
       "rev" : "10-f3b15bb408961f8dcc3d86c7d3b54c4c",
    }



File: CouchDB.info,  Node: GET /db/_design/design-doc/_info,  Next: GET /db/_design/design-doc/_view/view-name,  Prev: DELETE /db/_design/design-doc/attachment,  Up: Design Document Methods

8.4.8 `GET /db/_design/design-doc/_info'
----------------------------------------

   * *Method*: `GET /db/_design/design-doc/_info'

   * *Request*: None

   * *Response*: JSON of the design document information

   * *Admin Privileges Required*: no

  Obtains information about a given design document, including the
index, index size and current status of the design document and
associated index information.

  For example, to get the information for the `recipes' design document:

    GET http://couchdb:5984/recipes/_design/recipes/_info
    Content-Type: application/json

This returns the following JSON structure:

    {
       "name" : "recipes"
       "view_index" : {
          "compact_running" : false,
          "updater_running" : false,
          "language" : "javascript",
          "purge_seq" : 10,
          "waiting_commit" : false,
          "waiting_clients" : 0,
          "signature" : "fc65594ee76087a3b8c726caf5b40687",
          "update_seq" : 375031,
          "disk_size" : 16491
       },
    }

The individual fields in the returned JSON structure are detailed below:

   * *name*:  Name/ID of Design Document

   * *view_index*:  View Index

        * *compact_running*:  Indicates whether a compaction routine is
          currently running on the view

        * *disk_size*:  Size in bytes of the view as stored on disk

        * *language*:  Language for the defined views

        * *purge_seq*:  The purge sequence that has been processed

        * *signature*:  MD5 signature of the views for the design
          document

        * *update_seq*:  The update sequence of the corresponding
          database that has been indexed

        * *updater_running*:  Indicates if the view is currently being
          updated

        * *waiting_clients*:  Number of clients waiting on views from
          this design document

        * *waiting_commit*:  Indicates if there are outstanding commits
          to the underlying database that need to processed


File: CouchDB.info,  Node: GET /db/_design/design-doc/_view/view-name,  Next: POST /db/_design/design-doc/_view/view-name,  Prev: GET /db/_design/design-doc/_info,  Up: Design Document Methods

8.4.9 `GET /db/_design/design-doc/_view/view-name'
--------------------------------------------------

   * *Method*: `GET /db/_design/design-doc/_view/view-name'

   * *Request*: None

   * *Response*: JSON of the documents returned by the view

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: descending

             * *Description*:  Return the documents in descending by
               key order

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: endkey

             * *Description*:  Stop returning records when the
               specified key is reached

             * *Optional*: yes

             * *Type*: string

        * *Argument*: endkey_docid

             * *Description*:  Stop returning records when the
               specified document ID is reached

             * *Optional*: yes

             * *Type*: string

        * *Argument*: group

             * *Description*:  Group the results using the reduce
               function to a group or single row

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: group_level

             * *Description*:  Specify the group level to be used

             * *Optional*: yes

             * *Type*: numeric

        * *Argument*: include_docs

             * *Description*:  Include the full content of the
               documents in the return

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: inclusive_end

             * *Description*:  Specifies whether the specified end key
               should be included in the result

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: true

        * *Argument*: key

             * *Description*:  Return only documents that match the
               specified key

             * *Optional*: yes

             * *Type*: string

        * *Argument*: limit

             * *Description*:  Limit the number of the returned
               documents to the specified number

             * *Optional*: yes

             * *Type*: numeric

        * *Argument*: reduce

             * *Description*:  Use the reduction function

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: true

        * *Argument*: skip

             * *Description*:  Skip this number of records before
               starting to return the results

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 0

        * *Argument*: stale

             * *Description*:  Allow the results from a stale view to
               be used

             * *Optional*: yes

             * *Type*: string

             * *Default*:

             * *Supported Values*

                  * *ok*: Allow stale views

        * *Argument*: startkey

             * *Description*:  Return records starting with the
               specified key

             * *Optional*: yes

             * *Type*: string

        * *Argument*: startkey_docid

             * *Description*:  Return records starting with the
               specified document ID

             * *Optional*: yes

             * *Type*: string

        * *Argument*: update_seq

             * *Description*:  Include the update sequence in the
               generated results

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

Executes the specified `view-name' from the specified `design-doc'
design document.

* Menu:

* Querying Views and Indexes::
* Sorting Returned Rows::
* Specifying Start and End Values::
* Using Limits and Skipping Rows::
* View Reduction and Grouping::


File: CouchDB.info,  Node: Querying Views and Indexes,  Next: Sorting Returned Rows,  Up: GET /db/_design/design-doc/_view/view-name

8.4.9.1 Querying Views and Indexes
..................................

The definition of a view within a design document also creates an index
based on the key information defined within each view. The production
and use of the index significantly increases the speed of access and
searching or selecting documents from the view.

  However, the index is not updated when new documents are added or
modified in the database. Instead, the index is generated or updated,
either when the view is first accessed, or when the view is accessed
after a document has been updated. In each case, the index is updated
before the view query is executed against the database.

  View indexes are updated incrementally in the following situations:

   - A new document has been added to the database.

   - A document has been deleted from the database.

   - A document in the database has been updated.

  View indexes are rebuilt entirely when the view definition changes. To
achieve this, a 'fingerprint' of the view definition is created when the
design document is updated. If the fingerprint changes, then the view
indexes are entirely rebuilt. This ensures that changes to the view
definitions are reflected in the view indexes.

     Note: View index rebuilds occur when one view from the same the
     view group (i.e. all the views defined within a single a design
     document) has been determined as needing a rebuild. For example,
     if if you have a design document with different views, and you
     update the database, all three view indexes within the design
     document will be updated.

  Because the view is updated when it has been queried, it can result
in a delay in returned information when the view is accessed,
especially if there are a large number of documents in the database and
the view index does not exist. There are a number of ways to mitigate,
but not completely eliminate, these issues. These include:

   - Create the view definition (and associated design documents) on
     your database before allowing insertion or updates to the
     documents. If this is allowed while the view is being accessed,
     the index can be updated incrementally.

   - Manually force a view request from the database. You can do this
     either before users are allowed to use the view, or you can access
     the view manually after documents are added or updated.

   - Use the `/db/_changes' method to monitor for changes to the
     database and then access the view to force the corresponding view
     index to be updated. See *note GET /db/_changes: 89. for more
     information.

   - Use a monitor with the `update_notification' section of the CouchDB
     configuration file to monitor for changes to your database, and
     trigger a view query to force the view to be updated. For more
     information, see *note Update Notifications: 22.

  None of these can completely eliminate the need for the indexes to be
rebuilt or updated when the view is accessed, but they may lessen the
effects on end-users of the index update affecting the user experience.

  Another alternative is to allow users to access a 'stale' version of
the view index, rather than forcing the index to be updated and
displaying the updated results. Using a stale view may not return the
latest information, but will return the results of the view query using
an existing version of the index.

  For example, to access the existing stale view `by_recipe' in the
`recipes' design document:

    http://couchdb:5984/recipes/_design/recipes/_view/by_recipe?stale=ok

Accessing a stale view:

   - Does not trigger a rebuild of the view indexes, even if there have
     been changes since the last access.

   - Returns the current version of the view index, if a current version
     exists.

   - Returns an empty result set if the given view index does exist.

  As an alternative, you use the `update_after' value to the `stale'
parameter. This causes the view to be returned as a stale view, but for
the update process to be triggered after the view information has been
returned to the client.

  In addition to using stale views, you can also make use of the
`update_seq' query argument. Using this query argument generates the
view information including the update sequence of the database from
which the view was generated. The returned value can be compared this to
the current update sequence exposed in the database information
(returned by *note GET /db: 85.).


File: CouchDB.info,  Node: Sorting Returned Rows,  Next: Specifying Start and End Values,  Prev: Querying Views and Indexes,  Up: GET /db/_design/design-doc/_view/view-name

8.4.9.2 Sorting Returned Rows
.............................

Each element within the returned array is sorted using native UTF-8
sorting according to the contents of the key portion of the emitted
content. The basic order of output is as follows:

   - `null'

   - `false'

   - `true'

   - Numbers

   - Text (case sensitive, lowercase first)

   - Arrays (according to the values of each element, in order)

   - Objects (according to the values of keys, in key order)

  You can reverse the order of the returned view information by using
the `descending' query value set to true. For example, Retrieving the
list of recipes using the `by_title' (limited to 5 records) view:

    {
       "offset" : 0,
       "rows" : [
          {
             "id" : "3-tiersalmonspinachandavocadoterrine",
             "key" : "3-tier salmon, spinach and avocado terrine",
             "value" : [
                null,
                "3-tier salmon, spinach and avocado terrine"
             ]
          },
          {
             "id" : "Aberffrawcake",
             "key" : "Aberffraw cake",
             "value" : [
                null,
                "Aberffraw cake"
             ]
          },
          {
             "id" : "Adukiandorangecasserole-microwave",
             "key" : "Aduki and orange casserole - microwave",
             "value" : [
                null,
                "Aduki and orange casserole - microwave"
             ]
          },
          {
             "id" : "Aioli-garlicmayonnaise",
             "key" : "Aioli - garlic mayonnaise",
             "value" : [
                null,
                "Aioli - garlic mayonnaise"
             ]
          },
          {
             "id" : "Alabamapeanutchicken",
             "key" : "Alabama peanut chicken",
             "value" : [
                null,
                "Alabama peanut chicken"
             ]
          }
       ],
       "total_rows" : 2667
    }

Requesting the same in descending order will reverse the entire view
content. For example the request

    GET http://couchdb:5984/recipes/_design/recipes/_view/by_title?limit=5&descending=true
    Accept: application/json
    Content-Type: application/json

Returns the last 5 records from the view:

    {
       "offset" : 0,
       "rows" : [
          {
             "id" : "Zucchiniinagrodolcesweet-sourcourgettes",
             "key" : "Zucchini in agrodolce (sweet-sour courgettes)",
             "value" : [
                null,
                "Zucchini in agrodolce (sweet-sour courgettes)"
             ]
          },
          {
             "id" : "Zingylemontart",
             "key" : "Zingy lemon tart",
             "value" : [
                null,
                "Zingy lemon tart"
             ]
          },
          {
             "id" : "Zestyseafoodavocado",
             "key" : "Zesty seafood avocado",
             "value" : [
                null,
                "Zesty seafood avocado"
             ]
          },
          {
             "id" : "Zabaglione",
             "key" : "Zabaglione",
             "value" : [
                null,
                "Zabaglione"
             ]
          },
          {
             "id" : "Yogurtraita",
             "key" : "Yogurt raita",
             "value" : [
                null,
                "Yogurt raita"
             ]
          }
       ],
       "total_rows" : 2667
    }

The sorting direction is applied before the filtering applied using the
`startkey' and `endkey' query arguments. For example the following
query:

    GET http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?startkey=%22carrots%22&endkey=%22egg%22
    Accept: application/json
    Content-Type: application/json

Will operate correctly when listing all the matching entries between
“carrots” and `egg'. If the order of output is reversed with the
`descending' query argument, the view request will return no entries:

    GET http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=%22carrots%22&endkey=%22egg%22
    Accept: application/json
    Content-Type: application/json

The returned result is empty:

    {
       "total_rows" : 26453,
       "rows" : [],
       "offset" : 21882
    }

The results will be empty because the entries in the view are reversed
before the key filter is applied, and therefore the `endkey' of “egg”
will be seen before the `startkey' of “carrots”, resulting in an empty
list.

  Instead, you should reverse the values supplied to the `startkey' and
`endkey' parameters to match the descending sorting applied to the
keys. Changing the previous example to:

    GET http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?descending=true&startkey=%22egg%22&endkey=%22carrots%22
    Accept: application/json
    Content-Type: application/json



File: CouchDB.info,  Node: Specifying Start and End Values,  Next: Using Limits and Skipping Rows,  Prev: Sorting Returned Rows,  Up: GET /db/_design/design-doc/_view/view-name

8.4.9.3 Specifying Start and End Values
.......................................

The `startkey' and `endkey' query arguments can be used to specify the
range of values to be displayed when querying the view.


File: CouchDB.info,  Node: Using Limits and Skipping Rows,  Next: View Reduction and Grouping,  Prev: Specifying Start and End Values,  Up: GET /db/_design/design-doc/_view/view-name

8.4.9.4 Using Limits and Skipping Rows
......................................

TBC


File: CouchDB.info,  Node: View Reduction and Grouping,  Prev: Using Limits and Skipping Rows,  Up: GET /db/_design/design-doc/_view/view-name

8.4.9.5 View Reduction and Grouping
...................................

TBC


File: CouchDB.info,  Node: POST /db/_design/design-doc/_view/view-name,  Next: GET /db/_design/design-doc/_show/show-name,  Prev: GET /db/_design/design-doc/_view/view-name,  Up: Design Document Methods

8.4.10 `POST /db/_design/design-doc/_view/view-name'
----------------------------------------------------

   * *Method*: `POST /db/_design/design-doc/_view/view-name'

   * *Request*:  List of keys to be returned from specified view

   * *Response*:  JSON of the documents returned by the view

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: descending

             * *Description*:  Return the documents in descending by
               key order

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: endkey

             * *Description*:  Stop returning records when the
               specified key is reached

             * *Optional*: yes

             * *Type*: string

        * *Argument*: endkey_docid

             * *Description*:  Stop returning records when the
               specified document ID is reached

             * *Optional*: yes

             * *Type*: string

        * *Argument*: group

             * *Description*:  Group the results using the reduce
               function to a group or single row

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: group_level

             * *Description*:  Specify the group level to be used

             * *Optional*: yes

             * *Type*: numeric

        * *Argument*: include_docs

             * *Description*:  Include the full content of the
               documents in the return

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

        * *Argument*: inclusive_end

             * *Description*:  Specifies whether the specified end key
               should be included in the result

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: true

        * *Argument*: key

             * *Description*:  Return only documents that match the
               specified key

             * *Optional*: yes

             * *Type*: string

        * *Argument*: limit

             * *Description*:  Limit the number of the returned
               documents to the specified number

             * *Optional*: yes

             * *Type*: numeric

        * *Argument*: reduce

             * *Description*:  Use the reduction function

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: true

        * *Argument*: skip

             * *Description*:  Skip this number of records before
               starting to return the results

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 0

        * *Argument*: stale

             * *Description*:  Allow the results from a stale view to
               be used

             * *Optional*: yes

             * *Type*: string

             * *Default*:

             * *Supported Values*:

                  * *ok*: Allow stale views

        * *Argument*: startkey

             * *Description*:  Return records starting with the
               specified key

             * *Optional*: yes

             * *Type*: string

        * *Argument*: startkey_docid

             * *Description*:  Return records starting with the
               specified document ID

             * *Optional*: yes

             * *Type*: string

        * *Argument*: update_seq

             * *Description*:  Include the update sequence in the
               generated results

             * *Optional*: yes

             * *Type*: boolean

             * *Default*: false

Executes the specified `view-name' from the specified `design-doc'
design document. Unlike the `GET' method for accessing views, the
`POST' method supports the specification of explicit keys to be
retrieved from the view results. The remainder of the `POST' view
functionality is identical to the *note GET
/db/_design/design-doc/_view/view-name: dd. API.

  For example, the request below will return all the recipes where the
key for the view matches either “claret” or “clear apple cider” :

    POST http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient
    Content-Type: application/json

    {
       "keys" : [
          "claret",
          "clear apple juice"
       ]
    }

The returned view data contains the standard view information, but only
where the keys match.

    {
       "total_rows" : 26484,
       "rows" : [
          {
             "value" : [
                "Scotch collops"
             ],
             "id" : "Scotchcollops",
             "key" : "claret"
          },
          {
             "value" : [
                "Stand pie"
             ],
             "id" : "Standpie",
             "key" : "clear apple juice"
          }
       ],
       "offset" : 6324
    }


* Menu:

* Multi-document Fetching::


File: CouchDB.info,  Node: Multi-document Fetching,  Up: POST /db/_design/design-doc/_view/view-name

8.4.10.1 Multi-document Fetching
................................

By combining the `POST' method to a given view with the
`include_docs=true' query argument you can obtain multiple documents
from a database. The result is more efficient than using multiple *note
GET /db/doc: 9f. requests.

  For example, sending the following request for ingredients matching
“claret” and “clear apple juice”:

    POST http://couchdb:5984/recipes/_design/recipes/_view/by_ingredient?include_docs=true
    Content-Type: application/json

    {
       "keys" : [
          "claret",
          "clear apple juice"
       ]
    }

Returns the full document for each recipe:

    {
       "offset" : 6324,
       "rows" : [
          {
             "doc" : {
                "_id" : "Scotchcollops",
                "_rev" : "1-bcbdf724f8544c89697a1cbc4b9f0178",
                "cooktime" : "8",
                "ingredients" : [
                   {
                      "ingredient" : "onion",
                      "ingredtext" : "onion, peeled and chopped",
                      "meastext" : "1"
                   },
                ...
                ],
                "keywords" : [
                   "cook method.hob, oven, grill@hob",
                   "diet@wheat-free",
                   "diet@peanut-free",
                   "special collections@classic recipe",
                   "cuisine@british traditional",
                   "diet@corn-free",
                   "diet@citrus-free",
                   "special collections@very easy",
                   "diet@shellfish-free",
                   "main ingredient@meat",
                   "occasion@christmas",
                   "meal type@main",
                   "diet@egg-free",
                   "diet@gluten-free"
                ],
                "preptime" : "10",
                "servings" : "4",
                "subtitle" : "This recipe comes from an old recipe book of 1683 called 'The Gentlewoman's Kitchen'. This is an excellent way of making a rich and full-flavoured meat dish in a very short time.",
                "title" : "Scotch collops",
                "totaltime" : "18"
             },
             "id" : "Scotchcollops",
             "key" : "claret",
             "value" : [
                "Scotch collops"
             ]
          },
          {
             "doc" : {
                "_id" : "Standpie",
                "_rev" : "1-bff6edf3ca2474a243023f2dad432a5a",
                "cooktime" : "92",
                "ingredients" : [
    ...            ],
                "keywords" : [
                   "diet@dairy-free",
                   "diet@peanut-free",
                   "special collections@classic recipe",
                   "cuisine@british traditional",
                   "diet@corn-free",
                   "diet@citrus-free",
                   "occasion@buffet party",
                   "diet@shellfish-free",
                   "occasion@picnic",
                   "special collections@lunchbox",
                   "main ingredient@meat",
                   "convenience@serve with salad for complete meal",
                   "meal type@main",
                   "cook method.hob, oven, grill@hob / oven",
                   "diet@cow dairy-free"
                ],
                "preptime" : "30",
                "servings" : "6",
                "subtitle" : "Serve this pie with pickled vegetables and potato salad.",
                "title" : "Stand pie",
                "totaltime" : "437"
             },
             "id" : "Standpie",
             "key" : "clear apple juice",
             "value" : [
                "Stand pie"
             ]
          }
       ],
       "total_rows" : 26484
    }



File: CouchDB.info,  Node: GET /db/_design/design-doc/_show/show-name,  Next: POST /db/_design/design-doc/_show/show-name/doc,  Prev: POST /db/_design/design-doc/_view/view-name,  Up: Design Document Methods

8.4.11 `GET /db/_design/design-doc/_show/show-name'
---------------------------------------------------

   * *Method*: `GET /db/_design/design-doc/_show/show-name'

   * *Request*:  None

   * *Response*:  Returns the result of the show

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: details

             * *Description*:  Indicates whether details should be
               included

             * *Optional*: yes

             * *Type*: string

        * *Argument*: format

             * *Description*:  Format of the returned information

             * *Optional*: yes

             * *Type*: string


File: CouchDB.info,  Node: POST /db/_design/design-doc/_show/show-name/doc,  Next: GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name,  Prev: GET /db/_design/design-doc/_show/show-name,  Up: Design Document Methods

8.4.12 `POST /db/_design/design-doc/_show/show-name/doc'
--------------------------------------------------------

   * *Method*: `POST /db/_design/design-doc/_show/show-name'

   * *Request*:  Custom data

   * *Response*:  Returns the result of the show

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name,  Next: POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name,  Prev: POST /db/_design/design-doc/_show/show-name/doc,  Up: Design Document Methods

8.4.13 `GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name'
------------------------------------------------------------------------------

   * *Method*: `GET
     /db/_design/design-doc/_list/list-name/other-design-doc/view-name'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name,  Next: GET /db/_design/design-doc/_list/list-name/view-name,  Prev: GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name,  Up: Design Document Methods

8.4.14 `POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name'
-------------------------------------------------------------------------------

   * *Method*: `POST
     /db/_design/design-doc/_list/list-name/other-design-doc/view-name'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: GET /db/_design/design-doc/_list/list-name/view-name,  Next: POST /db/_design/design-doc/_list/list-name/view-name,  Prev: POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name,  Up: Design Document Methods

8.4.15 `GET /db/_design/design-doc/_list/list-name/view-name'
-------------------------------------------------------------

   * *Method*: `GET /db/_design/design-doc/_list/list-name/view-name'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: POST /db/_design/design-doc/_list/list-name/view-name,  Next: PUT /db/_design/design-doc/_update/updatename/doc,  Prev: GET /db/_design/design-doc/_list/list-name/view-name,  Up: Design Document Methods

8.4.16 `POST /db/_design/design-doc/_list/list-name/view-name'
--------------------------------------------------------------

   * *Method*: `POST /db/_design/design-doc/_list/list-name/view-name'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: PUT /db/_design/design-doc/_update/updatename/doc,  Next: POST /db/_design/design-doc/_update/updatename,  Prev: POST /db/_design/design-doc/_list/list-name/view-name,  Up: Design Document Methods

8.4.17 `PUT /db/_design/design-doc/_update/updatename/doc'
----------------------------------------------------------

   * *Method*: `POST /db/_design/design-doc/_update/updatename/doc'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: POST /db/_design/design-doc/_update/updatename,  Next: ALL /db/_design/design-doc/_rewrite/rewrite-name/anything,  Prev: PUT /db/_design/design-doc/_update/updatename/doc,  Up: Design Document Methods

8.4.18 `POST /db/_design/design-doc/_update/updatename'
-------------------------------------------------------

   * *Method*: `PUT /db/_design/design-doc/_update/updatename/doc'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: ALL /db/_design/design-doc/_rewrite/rewrite-name/anything,  Prev: POST /db/_design/design-doc/_update/updatename,  Up: Design Document Methods

8.4.19 `ALL /db/_design/design-doc/_rewrite/rewrite-name/anything'
------------------------------------------------------------------

   * *Method*: `ALL
     /db/_design/design-doc/_rewrite/rewrite-name/anything'

   * *Request*:  TBC

   * *Response*:  TBC

   * *Admin Privileges Required*: no


File: CouchDB.info,  Node: Miscellaneous Methods,  Next: Configuration Methods,  Prev: Design Document Methods,  Up: API Reference

8.5 Miscellaneous Methods
=========================

The CouchDB Miscellaneous interface provides the basic interface to a
CouchDB server for obtaining CouchDB information and getting and setting
configuration information.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
GET          /                             Get the welcome message and version information
GET          /_active_tasks                Obtain a list of the tasks running in the
                                           server
GET          /_all_dbs                     Get a list of all the DBs
GET          /_log                         Return the server log file
POST         /_replicate                   Set or cancel replication
POST         /_restart                     Restart the server
GET          /_stats                       Return server statistics
GET          /_utils                       CouchDB administration interface (Futon)
GET          /_uuids                       Get generated UUIDs from the server
GET          /favicon.ico                  Get the site icon

* Menu:

* GET /::
* GET /_active_tasks::
* GET /_all_dbs::
* GET /_log::
* POST /_replicate::
* POST /_restart::
* GET /_stats::
* GET /_utils::
* GET /_uuids::
* GET /favicon.ico: GET /favicon ico.


File: CouchDB.info,  Node: GET /,  Next: GET /_active_tasks,  Up: Miscellaneous Methods

8.5.1 `GET /'
-------------

   * *Method*: `GET /'

   * *Request*: None

   * *Response*: Welcome message and version

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *200*: Request completed successfully.

Accessing the root of a CouchDB instance returns meta information about
the instance. The response is a JSON structure containing information
about the server, including a welcome message and the version of the
server.

    {
       "couchdb" : "Welcome",
       "version" : "1.0.1"
    }



File: CouchDB.info,  Node: GET /_active_tasks,  Next: GET /_all_dbs,  Prev: GET /,  Up: Miscellaneous Methods

8.5.2 `GET /_active_tasks'
--------------------------

   * *Method*: `GET /_active_tasks'

   * *Request*: None

   * *Response*: List of running tasks, including the task type, name,
     status and process ID

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *200*: Request completed successfully.

You can obtain a list of active tasks by using the `/_active_tasks'
URL. The result is a JSON array of the currently running tasks, with
each task being described with a single object. For example:

    [
       {
        "pid" : "<0.11599.0>",
        "status" : "Copied 0 of 18369 changes (0%)",
        "task" : "recipes",
        "type" : "Database Compaction"
        }
    ]

The returned structure includes the following fields for each task:

   * *tasks* [array]: Active Task

        * *pid*:Process ID

        * *status*: Task status message

        * *task*: Task name

        * *type*: Operation Type

  For operation type, valid values include:

   - `Database Compaction'

   - `Replication'

   - `View Group Compaction'

   - `View Group Indexer'


File: CouchDB.info,  Node: GET /_all_dbs,  Next: GET /_log,  Prev: GET /_active_tasks,  Up: Miscellaneous Methods

8.5.3 `GET /_all_dbs'
---------------------

   * *Method*: `GET /_all_dbs'

   * *Request*: None

   * *Response*: JSON list of DBs

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *200*: Request completed successfully.

Returns a list of all the databases in the CouchDB instance. For
example:

    GET http://couchdb:5984/_all_dbs
    Accept: application/json

The return is a JSON array:

    [
       "_users",
       "contacts",
       "docs",
       "invoices",
       "locations"
    ]



File: CouchDB.info,  Node: GET /_log,  Next: POST /_replicate,  Prev: GET /_all_dbs,  Up: Miscellaneous Methods

8.5.4 `GET /_log'
-----------------

   * *Method*: `GET /_log'

   * *Request*: None

   * *Response*: Log content

   * *Admin Privileges Required*: yes

   * *Query Arguments*:

        * *Argument*: bytes

             * *Description*:  Bytes to be returned

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 1000

        * *Argument*: offset

             * *Description*:  Offset in bytes where the log tail
               should be started

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 0

   * *Return Codes*:

        * *200*: Request completed successfully.

Gets the CouchDB log, equivalent to accessing the local log file of the
corresponding CouchDB instance.

  When you request the log, the response is returned as plain (UTF-8)
text, with an HTTP `Content-type' header as `text/plain'.

  For example, the request:

    GET http://couchdb:5984/_log
    Accept: */*

The raw text is returned:

    [Wed, 27 Oct 2010 10:49:42 GMT] [info] [<0.23338.2>] 192.168.0.2 - - 'PUT' /authdb 401
    [Wed, 27 Oct 2010 11:02:19 GMT] [info] [<0.23428.2>] 192.168.0.116 - - 'GET' /recipes/FishStew 200
    [Wed, 27 Oct 2010 11:02:19 GMT] [info] [<0.23428.2>] 192.168.0.116 - - 'GET' /_session 200
    [Wed, 27 Oct 2010 11:02:19 GMT] [info] [<0.24199.2>] 192.168.0.116 - - 'GET' / 200
    [Wed, 27 Oct 2010 13:03:38 GMT] [info] [<0.24207.2>] 192.168.0.116 - - 'GET' /_log?offset=5 200

If you want to pick out specific parts of the log information you can
use the `bytes' argument, which specifies the number of bytes to be
returned, and `offset', which specifies where the reading of the log
should start, counted back from the end. For example, if you use the
following request:

    GET /_log?bytes=500&offset=2000

Reading of the log will start at 2000 bytes from the end of the log, and
500 bytes will be shown.


File: CouchDB.info,  Node: POST /_replicate,  Next: POST /_restart,  Prev: GET /_log,  Up: Miscellaneous Methods

8.5.5 `POST /_replicate'
------------------------

   * *Method*: `POST /_replicate'

   * *Request*: Replication specification

   * *Response*: TBD

   * *Admin Privileges Required*: yes

   * *Query Arguments*:

        * *Argument*: bytes

             * *Description*:  Bytes to be returned

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 1000

        * *Argument*: offset

             * *Description*:  Offset in bytes where the log tail
               should be started

             * *Optional*: yes

             * *Type*: numeric

             * *Default*: 0

   * *Return Codes*:

        * *200*: Replication request successfully completed

        * *202*: Continuous replication request has been accepted

        * *404*: Either the source or target DB is not found

        * *500*: JSON specification was invalid

Request, configure, or stop, a replication operation.

  The specification of the replication request is controlled through the
JSON content of the request. The JSON should be an object with the
fields defining the source, target and other options. The fields of the
JSON request are shown in the table below:

   * *cancel (optional)*:  Cancels the replication

   * *continuous (optional)*:  Configure the replication to be
     continuous

   * *create_target (optional)*:  Creates the target database

   * *doc_ids (optional)*:  Array of document IDs to be synchronized

   * *proxy (optional)*:  Address of a proxy server through which
     replication should occur

   * *source*:  Source database name or URL

   * *target*:  Target database name or URL

* Menu:

* Replication Operation::
* Specifying the Source and Target Database::
* Single Replication::
* Continuous Replication::
* Canceling Continuous Replication::


File: CouchDB.info,  Node: Replication Operation,  Next: Specifying the Source and Target Database,  Up: POST /_replicate

8.5.5.1 Replication Operation
.............................

The aim of the replication is that at the end of the process, all active
documents on the source database are also in the destination database
and all documents that were deleted in the source databases are also
deleted (if they exist) on the destination database.

  Replication can be described as either push or pull replication:

   - _Pull replication_ is where the `source' is the remote CouchDB
     instance, and the `destination' is the local database.

     Pull replication is the most useful solution to use if your source
     database has a permanent IP address, and your destination (local)
     database may have a dynamically assigned IP address (for example,
     through DHCP). This is particularly important if you are
     replicating to a mobile or other device from a central server.

   - _Push replication_ is where the `source' is a local database, and
     `destination' is a remote database.


File: CouchDB.info,  Node: Specifying the Source and Target Database,  Next: Single Replication,  Prev: Replication Operation,  Up: POST /_replicate

8.5.5.2 Specifying the Source and Target Database
.................................................

You must use the URL specification of the CouchDB database if you want
to perform replication in either of the following two situations:

   - Replication with a remote database (i.e. another instance of
     CouchDB on the same host, or a different host)

   - Replication with a database that requires authentication

  For example, to request replication between a database local to the
CouchDB instance to which you send the request, and a remote database
you might use the following request:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "source" : "recipes",
       "target" : "http://coucdb-remote:5984/recipes",
    }

In all cases, the requested databases in the `source' and `target'
specification must exist. If they do not, an error will be returned
within the JSON object:

    {
       "error" : "db_not_found"
       "reason" : "could not open http://couchdb-remote:5984/ol1ka/",
    }

You can create the target database (providing your user credentials
allow it) by adding the `create_target' field to the request object:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "create_target" : true
       "source" : "recipes",
       "target" : "http://couchdb-remote:5984/recipes",
    }

The `create_target' field is not destructive. If the database already
exists, the replication proceeds as normal.


File: CouchDB.info,  Node: Single Replication,  Next: Continuous Replication,  Prev: Specifying the Source and Target Database,  Up: POST /_replicate

8.5.5.3 Single Replication
..........................

You can request replication of a database so that the two databases can
be synchronized. By default, the replication process occurs one time and
synchronizes the two databases together. For example, you can request a
single synchronization between two databases by supplying the `source'
and `target' fields within the request JSON content.

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "source" : "recipes",
       "target" : "recipes-snapshot",
    }

In the above example, the databases `recipes' and `recipes-snapshot'
will be synchronized. These databases are local to the CouchDB instance
where the request was made. The response will be a JSON structure
containing the success (or failure) of the synchronization process, and
statistics about the process:

    {
       "ok" : true,
       "history" : [
          {
             "docs_read" : 1000,
             "session_id" : "52c2370f5027043d286daca4de247db0",
             "recorded_seq" : 1000,
             "end_last_seq" : 1000,
             "doc_write_failures" : 0,
             "start_time" : "Thu, 28 Oct 2010 10:24:13 GMT",
             "start_last_seq" : 0,
             "end_time" : "Thu, 28 Oct 2010 10:24:14 GMT",
             "missing_checked" : 0,
             "docs_written" : 1000,
             "missing_found" : 1000
          }
       ],
       "session_id" : "52c2370f5027043d286daca4de247db0",
       "source_last_seq" : 1000
    }

The structure defines the replication status, as described in the table
below:

   * *history [array]*:  Replication History

        * *doc_write_failures*:  Number of document write failures

        * *docs_read*:  Number of documents read

        * *docs_written*:  Number of documents written to target

        * *end_last_seq*:  Last sequence number in changes stream

        * *end_time*:  Date/Time replication operation completed

        * *missing_checked*:  Number of missing documents checked

        * *missing_found*:  Number of missing documents found

        * *recorded_seq*:  Last recorded sequence number

        * *session_id*:  Session ID for this replication operation

        * *start_last_seq*:  First sequence number in changes stream

        * *start_time*:  Date/Time replication operation started

   * *ok*:  Replication status

   * *session_id*:  Unique session ID

   * *source_last_seq*:  Last sequence number read from source database


File: CouchDB.info,  Node: Continuous Replication,  Next: Canceling Continuous Replication,  Prev: Single Replication,  Up: POST /_replicate

8.5.5.4 Continuous Replication
..............................

Synchronization of a database with the previously noted methods happens
only once, at the time the replicate request is made. To have the target
database permanently replicated from the source, you must set the
`continuous' field of the JSON object within the request to true.

  With continuous replication changes in the source database are
replicated to the target database in perpetuity until you specifically
request that replication ceases.

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "continuous" : true
       "source" : "recipes",
       "target" : "http://couchdb-remote:5984/recipes",
    }

Changes will be replicated between the two databases as long as a
network connection is available between the two instances.

     Note: Two keep two databases synchronized with each other, you
     need to set replication in both directions; that is, you must
     replicate from `databasea' to `databaseb', and separately from
     `databaseb' to `databasea'.


File: CouchDB.info,  Node: Canceling Continuous Replication,  Prev: Continuous Replication,  Up: POST /_replicate

8.5.5.5 Canceling Continuous Replication
........................................

You can cancel continuous replication by adding the `cancel' field to
the JSON request object and setting the value to true. Note that the
structure of the request must be identical to the original for the
cancellation request to be honoured. For example, if you requested
continuous replication, the cancellation request must also contain the
`continuous' field.

  For example, the replication request:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
       "source" : "recipes",
       "target" : "http://couchdb-remote:5984/recipes",
       "create_target" : true,
       "continuous" : true
    }

Must be canceled using the request:

    POST http://couchdb:5984/_replicate
    Content-Type: application/json
    Accept: application/json

    {
        "cancel" : true,
        "continuous" : true
        "create_target" : true,
        "source" : "recipes",
        "target" : "http://couchdb-remote:5984/recipes",
    }

Requesting cancellation of a replication that does not exist results in
a 404 error.


File: CouchDB.info,  Node: POST /_restart,  Next: GET /_stats,  Prev: POST /_replicate,  Up: Miscellaneous Methods

8.5.6 `POST /_restart'
----------------------

   * *Method*: `POST /_restart'

   * *Request*: None

   * *Response*: JSON status message

   * *Admin Privileges Required*: yes

   * *HTTP Headers*:

        * *Header*: `Content-Type'

             * *Description*: Request content type

             * *Optional*: no

             * *Value*: `application/json'

   * *Return Codes*:

        * *200*: Replication request successfully completed

Restarts the CouchDB instance. You must be authenticated as a user with
administration privileges for this to work.

  For example:

    POST http://admin:password@couchdb:5984/_restart

The return value (if the server has not already restarted) is a JSON
status object indicating that the request has been received:

    {
       "ok" : true,
    }

If the server has already restarted, the header may be returned, but no
actual data is contained in the response.


File: CouchDB.info,  Node: GET /_stats,  Next: GET /_utils,  Prev: POST /_restart,  Up: Miscellaneous Methods

8.5.7 `GET /_stats'
-------------------

   * *Method*: `GET /_stats'

   * *Request*: None

   * *Response*: Server statistics

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *200*: Request completed successfully.

The `_stats' method returns a JSON object containing the statistics for
the running server. The object is structured with top-level sections
collating the statistics for a range of entries, with each individual
statistic being easily identified, and the content of each statistic is
self-describing. For example, the request time statistics, within the
`couchdb' section are structured as follows:

    {
       "couchdb" : {
    ...
          "request_time" : {
             "stddev" : "27.509",
             "min" : "0.333333333333333",
             "max" : "152",
             "current" : "400.976",
             "mean" : "10.837",
             "sum" : "400.976",
             "description" : "length of a request inside CouchDB without MochiWeb"
          },
    ...
        }
    }

The fields provide the current, minimum and maximum, and a collection of
statistical means and quantities. The quantity in each case is not
defined, but the descriptions below provide

  The statistics are divided into the following top-level sections:

   - `couchdb': Describes statistics specific to the internals of
     CouchDB.

     Statistic ID                  Description                                                 Unit
     --------------------------------------------------------------------------------------------------------------- 
     `auth_cache_hits'             Number of authentication cache hits                         number
     `auth_cache_misses'           Number of authentication cache misses                       number
     `database_reads'              Number of times a document was read from a database         number
     `database_writes'             Number of times a database was changed                      number
     `open_databases'              Number of open databases                                    number
     `open_os_files'               Number of file descriptors CouchDB has open                 number
     `request_time'                Length of a request inside CouchDB without MochiWeb         milliseconds

   - `httpd_request_methods'

     Statistic ID         Description                            Unit
     --------------------------------------------------------------------------- 
     `COPY'               Number of HTTP COPY requests           number
     `DELETE'             Number of HTTP DELETE requests         number
     `GET'                Number of HTTP GET requests            number
     `HEAD'               Number of HTTP HEAD requests           number
     `POST'               Number of HTTP POST requests           number
     `PUT'                Number of HTTP PUT requests            number

   - `httpd_status_codes'

     Statistic ID         Description                                                Unit
     ----------------------------------------------------------------------------------------------- 
     `200'                Number of HTTP 200 OK responses                            number
     `201'                Number of HTTP 201 Created responses                       number
     `202'                Number of HTTP 202 Accepted responses                      number
     `301'                Number of HTTP 301 Moved Permanently responses             number
     `304'                Number of HTTP 304 Not Modified responses                  number
     `400'                Number of HTTP 400 Bad Request responses                   number
     `401'                Number of HTTP 401 Unauthorized responses                  number
     `403'                Number of HTTP 403 Forbidden responses                     number
     `404'                Number of HTTP 404 Not Found responses                     number
     `405'                Number of HTTP 405 Method Not Allowed responses            number
     `409'                Number of HTTP 409 Conflict responses                      number
     `412'                Number of HTTP 412 Precondition Failed responses           number
     `500'                Number of HTTP 500 Internal Server Error responses         number

   - `httpd'

     Statistic ID                           Description                                        Unit
     --------------------------------------------------------------------------------------------------------- 
     `bulk_requests'                        Number of bulk requests                            number
     `clients_requesting_changes'           Number of clients for continuous _changes          number
     `requests'                             Number of HTTP requests                            number
     `temporary_view_reads'                 Number of temporary view reads                     number
     `view_reads'                           Number of view reads                               number


  You can also access individual statistics by quoting the statistics
sections and statistic ID as part of the URL path. For example, to get
the `request_time' statistics, you can use:

    GET /_stats/couchdb/request_time

This returns an entire statistics object, as with the full request, but
containing only the request individual statistic. Hence, the returned
structure is as follows:

    {
       "couchdb" : {
          "request_time" : {
             "stddev" : 7454.305,
             "min" : 1,
             "max" : 34185,
             "current" : 34697.803,
             "mean" : 1652.276,
             "sum" : 34697.803,
             "description" : "length of a request inside CouchDB without MochiWeb"
          }
       }
    }



File: CouchDB.info,  Node: GET /_utils,  Next: GET /_uuids,  Prev: GET /_stats,  Up: Miscellaneous Methods

8.5.8 `GET /_utils'
-------------------

   * *Method*: `GET /_utils'

   * *Request*: None

   * *Response*: Administration interface

   * *Admin Privileges Required*: no

  Accesses the built-in Futon administration interface for CouchDB.


File: CouchDB.info,  Node: GET /_uuids,  Next: GET /favicon ico,  Prev: GET /_utils,  Up: Miscellaneous Methods

8.5.9 `GET /_uuids'
-------------------

   * *Method*: `GET /_uuids'

   * *Request*: None

   * *Response*: List of UUIDs

   * *Admin Privileges Required*: no

   * *Query Arguments*:

        * *Argument*: count

             * *Description*:  Number of UUIDs to return

             * *Optional*: yes

             * *Type*: numeric

   * *Return Codes*:

        * *200*: Request completed successfully.

Requests one or more Universally Unique Identifiers (UUIDs) from the
CouchDB instance. The response is a JSON object providing a list of
UUIDs. For example:

    {
       "uuids" : [
          "7e4b5a14b22ec1cf8e58b9cdd0000da3"
       ]
    }

You can use the `count' argument to specify the number of UUIDs to be
returned. For example:

    GET http://couchdb:5984/_uuids?count=5

Returns:

    {
       "uuids" : [
          "c9df0cdf4442f993fc5570225b405a80",
          "c9df0cdf4442f993fc5570225b405bd2",
          "c9df0cdf4442f993fc5570225b405e42",
          "c9df0cdf4442f993fc5570225b4061a0",
          "c9df0cdf4442f993fc5570225b406a20"
       ]
    }

The UUID type is determined by the UUID type setting in the CouchDB
configuration. See *note PUT /_config/section/key: 100.

  For example, changing the UUID type to `random':

    PUT http://couchdb:5984/_config/uuids/algorithm
    Content-Type: application/json
    Accept: */*

    "random"

When obtaining a list of UUIDs:

    {
       "uuids" : [
          "031aad7b469956cf2826fcb2a9260492",
          "6ec875e15e6b385120938df18ee8e496",
          "cff9e881516483911aa2f0e98949092d",
          "b89d37509d39dd712546f9510d4a9271",
          "2e0dbf7f6c4ad716f21938a016e4e59f"
       ]
    }



File: CouchDB.info,  Node: GET /favicon ico,  Prev: GET /_uuids,  Up: Miscellaneous Methods

8.5.10 `GET /favicon.ico'
-------------------------

   * *Method*: `GET /favicon.ico'

   * *Request*: None

   * *Response*: Binary content for the `favicon.ico' site icon

   * *Admin Privileges Required*: no

   * *Return Codes*:

        * *200*: Request completed successfully.

        * *404*: The requested content could not be found. The returned
          content will include further information, as a JSON object,
          if available.

Returns the site icon. The return `Content-Type' header is
`image/x-icon', and the content stream is the image data.


File: CouchDB.info,  Node: Configuration Methods,  Next: Authentication Methods,  Prev: Miscellaneous Methods,  Up: API Reference

8.6 Configuration Methods
=========================

The CouchDB API Server Configuration Methods provide an interface to
query and update the various configuration values within a running
CouchDB instance.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
GET          /_config                      Obtain a list of the entire server
                                           configuration
GET          /_config/section              Get all the configuration values for the
                                           specified section
GET          /_config/section/key          Get a specific section/configuration value
PUT          /_config/section/key          Set the specified configuration value
DELETE       /_config/section/key          Delete the current setting

* Menu:

* GET /_config::
* GET /_config/section::
* GET /_config/section/key::
* PUT /_config/section/key::
* DELETE /_config/section/key::


File: CouchDB.info,  Node: GET /_config,  Next: GET /_config/section,  Up: Configuration Methods

8.6.1 `GET /_config'
--------------------

   * *Method*: `GET /_config'

   * *Request*: None

   * *Response*: Returns a structure configuration name and value pairs,
     organized by section

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *200*: Request completed successfully.

Returns the entire CouchDB server configuration as a JSON structure. The
structure is organized by different configuration sections, with
individual values.

  For example, to get the configuration for a server:

    GET http://couchdb:5984/_config
    Accept: application/json

The response is the JSON structure:

    {
       "query_server_config" : {
          "reduce_limit" : "true"
       },
       "couchdb" : {
          "os_process_timeout" : "5000",
          "max_attachment_chunk_size" : "4294967296",
          "max_document_size" : "4294967296",
          "uri_file" : "/var/lib/couchdb/couch.uri",
          "max_dbs_open" : "100",
          "view_index_dir" : "/var/lib/couchdb",
          "util_driver_dir" : "/usr/lib64/couchdb/erlang/lib/couch-1.0.1/priv/lib",
          "database_dir" : "/var/lib/couchdb",
          "delayed_commits" : "true"
       },
       "attachments" : {
          "compressible_types" : "text/*, application/javascript, application/json,  application/xml",
          "compression_level" : "8"
       },
       "uuids" : {
          "algorithm" : "utc_random"
       },
       "daemons" : {
          "view_manager" : "{couch_view, start_link, []}",
          "auth_cache" : "{couch_auth_cache, start_link, []}",
          "uuids" : "{couch_uuids, start, []}",
          "stats_aggregator" : "{couch_stats_aggregator, start, []}",
          "query_servers" : "{couch_query_servers, start_link, []}",
          "httpd" : "{couch_httpd, start_link, []}",
          "stats_collector" : "{couch_stats_collector, start, []}",
          "db_update_notifier" : "{couch_db_update_notifier_sup, start_link, []}",
          "external_manager" : "{couch_external_manager, start_link, []}"
       },
       "stats" : {
          "samples" : "[0, 60, 300, 900]",
          "rate" : "1000"
       },
       "httpd" : {
          "vhost_global_handlers" : "_utils, _uuids, _session, _oauth, _users",
          "secure_rewrites" : "true",
          "authentication_handlers" : "{couch_httpd_oauth, oauth_authentication_handler},
                                       {couch_httpd_auth, cookie_authentication_handler},
                                       {couch_httpd_auth, default_authentication_handler}",
          "port" : "5984",
          "default_handler" : "{couch_httpd_db, handle_request}",
          "allow_jsonp" : "false",
          "bind_address" : "192.168.0.2",
          "max_connections" : "2048"
       },
       "query_servers" : {
          "javascript" : "/usr/bin/couchjs /usr/share/couchdb/server/main.js"
       },
       "couch_httpd_auth" : {
          "authentication_db" : "_users",
          "require_valid_user" : "false",
          "authentication_redirect" : "/_utils/session.html",
          "timeout" : "600",
          "auth_cache_size" : "50"
       },
       "httpd_db_handlers" : {
          "_design" : "{couch_httpd_db, handle_design_req}",
          "_compact" : "{couch_httpd_db, handle_compact_req}",
          "_view_cleanup" : "{couch_httpd_db, handle_view_cleanup_req}",
          "_temp_view" : "{couch_httpd_view, handle_temp_view_req}",
          "_changes" : "{couch_httpd_db, handle_changes_req}"
       },
       "replicator" : {
          "max_http_sessions" : "10",
          "max_http_pipeline_size" : "10"
       },
       "log" : {
          "include_sasl" : "true",
          "level" : "info",
          "file" : "/var/log/couchdb/couch.log"
       },
       "httpd_design_handlers" : {
          "_update" : "{couch_httpd_show, handle_doc_update_req}",
          "_show" : "{couch_httpd_show, handle_doc_show_req}",
          "_info" : "{couch_httpd_db,   handle_design_info_req}",
          "_list" : "{couch_httpd_show, handle_view_list_req}",
          "_view" : "{couch_httpd_view, handle_view_req}",
          "_rewrite" : "{couch_httpd_rewrite, handle_rewrite_req}"
       },
       "httpd_global_handlers" : {
          "_replicate" : "{couch_httpd_misc_handlers, handle_replicate_req}",
          "/" : "{couch_httpd_misc_handlers, handle_welcome_req, <<\"Welcome\">>}",
          "_config" : "{couch_httpd_misc_handlers, handle_config_req}",
          "_utils" : "{couch_httpd_misc_handlers, handle_utils_dir_req, \"/usr/share/couchdb/www\"}",
          "_active_tasks" : "{couch_httpd_misc_handlers, handle_task_status_req}",
          "_session" : "{couch_httpd_auth, handle_session_req}",
          "_log" : "{couch_httpd_misc_handlers, handle_log_req}",
          "favicon.ico" : "{couch_httpd_misc_handlers, handle_favicon_req, \"/usr/share/couchdb/www\"}",
          "_all_dbs" : "{couch_httpd_misc_handlers, handle_all_dbs_req}",
          "_oauth" : "{couch_httpd_oauth, handle_oauth_req}",
          "_restart" : "{couch_httpd_misc_handlers, handle_restart_req}",
          "_uuids" : "{couch_httpd_misc_handlers, handle_uuids_req}",
          "_stats" : "{couch_httpd_stats_handlers, handle_stats_req}"
       }
    }



File: CouchDB.info,  Node: GET /_config/section,  Next: GET /_config/section/key,  Prev: GET /_config,  Up: Configuration Methods

8.6.2 `GET /_config/section'
----------------------------

   * *Method*: `GET /_config/section'

   * *Request*: None

   * *Response*: All the configuration values within a specified section

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *200*: Request completed successfully.

Gets the configuration structure for a single section. For example, to
retrieve the CouchDB configuration section values:

    GET http://couchdb:5984/_config/couchdb
    Accept: application/json

The returned JSON contains just the configuration values for this
section:

    {
       "os_process_timeout" : "5000",
       "max_attachment_chunk_size" : "4294967296",
       "max_document_size" : "4294967296",
       "uri_file" : "/var/lib/couchdb/couch.uri",
       "max_dbs_open" : "100",
       "view_index_dir" : "/var/lib/couchdb",
       "util_driver_dir" : "/usr/lib64/couchdb/erlang/lib/couch-1.0.1/priv/lib",
       "database_dir" : "/var/lib/couchdb",
       "delayed_commits" : "true"
    }



File: CouchDB.info,  Node: GET /_config/section/key,  Next: PUT /_config/section/key,  Prev: GET /_config/section,  Up: Configuration Methods

8.6.3 `GET /_config/section/key'
--------------------------------

   * *Method*: `GET /_config/section/key'

   * *Request*: None

   * *Response*: Value of the specified key/section

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *200*: Request completed successfully.

Gets a single configuration value from within a specific configuration
section. For example, to obtain the current log level:

    GET http://couchdb:5984/_config/log/level
    Accept: application/json

Returns the string of the log level:

    "info"


     Note: The returned value will be the JSON of the value, which may
     be a string or numeric value, or an array or object. Some client
     environments may not parse simple strings or numeric values as
     valid JSON.


File: CouchDB.info,  Node: PUT /_config/section/key,  Next: DELETE /_config/section/key,  Prev: GET /_config/section/key,  Up: Configuration Methods

8.6.4 `PUT /_config/section/key'
--------------------------------

   * *Method*: `PUT /_config/section/key'

   * *Request*: Value structure

   * *Response*: Previous value

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *200*: Configuration option updated successfully

        * *500*: Error setting configuration

Updates a configuration value. The new value should be supplied in the
request body in the corresponding JSON format. For example, if you are
setting a string value, you must supply a valid JSON string.

  For example, to set the function used to generate UUIDs by the `GET
/_uuids' API call to use the `utc_random' generator:

    PUT http://couchdb:5984/_config/uuids/algorithm
    Content-Type: application/json

    "utc_random"

The return value will be empty, with the response code indicating the
success or failure of the configuration setting.


File: CouchDB.info,  Node: DELETE /_config/section/key,  Prev: PUT /_config/section/key,  Up: Configuration Methods

8.6.5 `DELETE /_config/section/key'
-----------------------------------

   * *Method*: `DELETE /_config/section/key'

   * *Request*: None

   * *Response*: Previous value

   * *Admin Privileges Required*: yes

   * *Return Codes*:

        * *409*: Supplied revision is incorrect or missing

Deletes a configuration value. The returned JSON will be the value of
the configuration parameter before it was deleted. For example, to
delete the UUID parameter:

    DELETE http://couchdb:5984/_config/uuids/algorithm
    Content-Type: application/json

The returned value is the last configured UUID function:

    "random"



File: CouchDB.info,  Node: Authentication Methods,  Prev: Configuration Methods,  Up: API Reference

8.7 Authentication Methods
==========================

The CouchDB Authentication methods provide an interface for obtaining
session and authorization data.

  A list of the available methods and URL paths are provided below:

Method       Path                          Description
------------------------------------------------------------------------------------------- 
GET          /_oauth/access_token          TBC
GET          /_oauth/authorize             TBC
POST         /_oauth/authorize             TBC
GET          /_oauth/request_token         TBC
GET          /_session                     Returns cookie based login user information
POST         /_session                     Do cookie based user login
DELETE       /_session                     Logout cookie based user


File: CouchDB.info,  Node: JSON Structure Reference,  Next: Configuration Reference,  Prev: API Reference,  Up: Top

9 JSON Structure Reference
**************************

The following appendix provides a quick reference to all the JSON
structures that you can supply to CouchDB, or get in return to requests.

* Menu:

* All Database Documents::
* Bulk Document Response::
* Bulk Documents::
* Changes information for a database::
* CouchDB Document::
* CouchDB Error Status::
* CouchDB database information object::
* Design Document::
* Design Document Information::
* Document with Attachments::
* List of Active Tasks::
* Replication Settings::
* Replication Status::
* Request object::
* Response object::
* Returned CouchDB Document with Detailed Revision Info::
* Returned CouchDB Document with Revision Info::
* Returned Document with Attachments::
* Security Object::
* User Context Object::
* View Head Information::


File: CouchDB.info,  Node: All Database Documents,  Next: Bulk Document Response,  Up: JSON Structure Reference

9.1 All Database Documents
==========================

Field                                Description
--------------------------------------------------------------------------------------- 
total_rows                           Number of documents in the database/view
offset                               Offset where the document list started
update_seq (optional)                Current update sequence for the database
rows [array]                         Array of document object


File: CouchDB.info,  Node: Bulk Document Response,  Next: Bulk Documents,  Prev: All Database Documents,  Up: JSON Structure Reference

9.2 Bulk Document Response
==========================

Field                                Description
--------------------------------------------------------------------------------------- 
docs [array]                         Bulk Docs Returned Documents
id                                   Document ID
error                                Error type
reason                               Error string with extended reason


File: CouchDB.info,  Node: Bulk Documents,  Next: Changes information for a database,  Prev: Bulk Document Response,  Up: JSON Structure Reference

9.3 Bulk Documents
==================

Field                                Description
--------------------------------------------------------------------------------------- 
all_or_nothing (optional)            Sets the database commit mode to use
                                     all-or-nothing semantics
docs [array]                         Bulk Documents Document
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_deleted (optional)                  Whether the document should be deleted


File: CouchDB.info,  Node: Changes information for a database,  Next: CouchDB Document,  Prev: Bulk Documents,  Up: JSON Structure Reference

9.4 Changes information for a database
======================================

Field                                Description
--------------------------------------------------------------------------------------- 
last_seq                             Last change sequence number
results [array]                      Changes made to a database
seq                                  Update sequence number
id                                   Document ID
changes [array]                      List of changes, field-by-field, for this
                                     document


File: CouchDB.info,  Node: CouchDB Document,  Next: CouchDB Error Status,  Prev: Changes information for a database,  Up: JSON Structure Reference

9.5 CouchDB Document
====================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)


File: CouchDB.info,  Node: CouchDB Error Status,  Next: CouchDB database information object,  Prev: CouchDB Document,  Up: JSON Structure Reference

9.6 CouchDB Error Status
========================

Field                                Description
--------------------------------------------------------------------------------------- 
id                                   Document ID
error                                Error type
reason                               Error string with extended reason


File: CouchDB.info,  Node: CouchDB database information object,  Next: Design Document,  Prev: CouchDB Error Status,  Up: JSON Structure Reference

9.7 CouchDB database information object
=======================================

Field                                Description
--------------------------------------------------------------------------------------- 
db_name                              The name of the database.
committed_update_seq                 The number of committed update.
doc_count                            A count of the documents in the specified
                                     database.
doc_del_count                        Number of deleted documents
compact_running                      Set to true if the database compaction routine
                                     is operating on this database.
disk_format_version                  The version of the physical format used for the
                                     data when it is stored on disk.
disk_size                            Size in bytes of the data as stored on the disk.
                                     Views indexes are not included in the
                                     calculation.
instance_start_time                  Timestamp of when the database was created,
                                     expressed in milliseconds since the epoch.
purge_seq                            The number of purge operations on the database.
update_seq                           The current number of updates to the database.


File: CouchDB.info,  Node: Design Document,  Next: Design Document Information,  Prev: CouchDB database information object,  Up: JSON Structure Reference

9.8 Design Document
===================

Field                                Description
--------------------------------------------------------------------------------------- 
_id                                  Design Document ID
_rev                                 Design Document Revision
views                                View
viewname                             View Definition
map                                  Map Function for View
reduce (optional)                    Reduce Function for View


File: CouchDB.info,  Node: Design Document Information,  Next: Document with Attachments,  Prev: Design Document,  Up: JSON Structure Reference

9.9 Design Document Information
===============================

Field                                Description
--------------------------------------------------------------------------------------- 
name                                 Name/ID of Design Document
view_index                           View Index
compact_running                      Indicates whether a compaction routine is
                                     currently running on the view
disk_size                            Size in bytes of the view as stored on disk
language                             Language for the defined views
purge_seq                            The purge sequence that has been processed
signature                            MD5 signature of the views for the design
                                     document
update_seq                           The update sequence of the corresponding
                                     database that has been indexed
updater_running                      Indicates if the view is currently being updated
waiting_clients                      Number of clients waiting on views from this
                                     design document
waiting_commit                       Indicates if there are outstanding commits to
                                     the underlying database that need to processed


File: CouchDB.info,  Node: Document with Attachments,  Next: List of Active Tasks,  Prev: Design Document Information,  Up: JSON Structure Reference

9.10 Document with Attachments
==============================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_attachments (optional)              Document Attachment
filename                             Attachment information
content_type                         MIME Content type string
data                                 File attachment content, Base64 encoded


File: CouchDB.info,  Node: List of Active Tasks,  Next: Replication Settings,  Prev: Document with Attachments,  Up: JSON Structure Reference

9.11 List of Active Tasks
=========================

Field                                Description
--------------------------------------------------------------------------------------- 
tasks [array]                        Active Task
pid                                  Process ID
status                               Task status message
task                                 Task name
type                                 Operation Type


File: CouchDB.info,  Node: Replication Settings,  Next: Replication Status,  Prev: List of Active Tasks,  Up: JSON Structure Reference

9.12 Replication Settings
=========================

Field                                Description
--------------------------------------------------------------------------------------- 
source                               Source database name or URL
target                               Target database name or URL
create_target (optional)             Creates the target database
continuous (optional)                Configure the replication to be continuous
cancel (optional)                    Cancels the replication
doc_ids (optional)                   Array of document IDs to be synchronized
proxy (optional)                     Address of a proxy server through which
                                     replication should occur


File: CouchDB.info,  Node: Replication Status,  Next: Request object,  Prev: Replication Settings,  Up: JSON Structure Reference

9.13 Replication Status
=======================

Field                                Description
--------------------------------------------------------------------------------------- 
ok                                   Replication status
session_id                           Unique session ID
source_last_seq                      Last sequence number read from source database
history [array]                      Replication History
session_id                           Session ID for this replication operation
recorded_seq                         Last recorded sequence number
docs_read                            Number of documents read
docs_written                         Number of documents written to target
doc_write_failures                   Number of document write failures
start_time                           Date/Time replication operation started
start_last_seq                       First sequence number in changes stream
end_time                             Date/Time replication operation completed
end_last_seq                         Last sequence number in changes stream
missing_checked                      Number of missing documents checked
missing_found                        Number of missing documents found


File: CouchDB.info,  Node: Request object,  Next: Response object,  Prev: Replication Status,  Up: JSON Structure Reference

9.14 Request object
===================

Field                                Description
--------------------------------------------------------------------------------------- 
body                                 Request body data as `string'.  If request
                                     method is `GET' method contains this field
                                     contains `"undefined"' value, while if `DELETE'
                                     or `HEAD' value is `""' (empty string)
cookie                               Cookies `object'.
form                                 Form data `object'.  Contains decoded body as
                                     key-value pairs if `Content-Type' header was
                                     `application/x-www-form-urlencoded'.
headers                              Request headers `object'.
id                                   Requested document id `string' if it was
                                     specified or `null' otherwise.
info                                 *note Database information: 43.
method                               Request method as `string' or `array'.  String
                                     value is method is one of: `HEAD', `GET',
                                     `POST', `PUT', `DELETE', `OPTIONS', and `TRACE',
                                     otherwise it will be represented as array of
                                     char codes.
path                                 List of requested path sections.
peer                                 Request source IP address.
query                                URL query parameters `object'.  Note that
                                     multiple keys not supported and last key value
                                     suppress others.
requested_path                       List of actual requested path section.
raw_path                             Raw requested path `string'.
secObj                               *note Security Object: 47.
userCtx                              *note User Context Object: 46.
uuid                                 Generated UUID by specified algorithm in config
                                     file.

    {
        "body": "undefined",
        "cookie": {
            "AuthSession": "cm9vdDo1MDZBRjQzRjrfcuikzPRfAn-EA37FmjyfM8G8Lw",
            "m": "3234"
        },
        "form": {},
        "headers": {
            "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
            "Accept-Charset": "ISO-8859-1,utf-8;q=0.7,*;q=0.3",
            "Accept-Encoding": "gzip,deflate,sdch",
            "Accept-Language": "en-US,en;q=0.8",
            "Connection": "keep-alive",
            "Cookie": "m=3234:t|3247:t|6493:t|6967:t|34e2:|18c3:t|2c69:t|5acb:t|ca3:t|c01:t|5e55:t|77cb:t|2a03:t|1d98:t|47ba:t|64b8:t|4a01:t; AuthSession=cm9vdDo1MDZBRjQzRjrfcuikzPRfAn-EA37FmjyfM8G8Lw",
            "Host": "127.0.0.1:5984",
            "User-Agent": "Mozilla/5.0 (Windows NT 5.2) AppleWebKit/535.7 (KHTML, like Gecko) Chrome/16.0.912.75 Safari/535.7"
        },
        "id": "foo",
        "info": {
            "committed_update_seq": 2701412,
            "compact_running": false,
            "data_size": 7580843252,
            "db_name": "mailbox",
            "disk_format_version": 6,
            "disk_size": 14325313673,
            "doc_count": 2262757,
            "doc_del_count": 560,
            "instance_start_time": "1347601025628957",
            "purge_seq": 0,
            "update_seq": 2701412
        },
        "method": "GET",
        "path": [
            "mailbox",
            "_design",
            "request",
            "_show",
            "dump",
            "foo"
        ],
        "peer": "127.0.0.1",
        "query": {},
        "raw_path": "/mailbox/_design/request/_show/dump/foo",
        "requested_path": [
            "mailbox",
            "_design",
            "request",
            "_show",
            "dump",
            "foo"
        ],
        "secObj": {
            "admins": {
                "names": [
                    "Bob"
                ],
                "roles": []
            },
            "members": {
                "names": [
                    "Mike",
                    "Alice"
                ],
                "roles": []
            }
        },
        "userCtx": {
            "db": "mailbox",
            "name": "Mike",
            "roles": [
                "user"
            ]
        },
        "uuid": "3184f9d1ea934e1f81a24c71bde5c168"
    }



File: CouchDB.info,  Node: Response object,  Next: Returned CouchDB Document with Detailed Revision Info,  Prev: Request object,  Up: JSON Structure Reference

9.15 Response object
====================

Field                                Description
--------------------------------------------------------------------------------------- 
code                                 HTTP status code `number'.
json                                 JSON encodable `object'.  Implicitly sets
                                     `Content-Type' header as `application/json'.
body                                 Raw response text `string'.  Implicitly sets
                                     `Content-Type' header as `text/html;
                                     charset=utf-8'.
base64                               Base64 encoded `string'.  Implicitly sets
                                     `Content-Type' header as `application/binary'.
headers                              Response headers `object'.  `Content-Type'
                                     header from this object overrides any implicitly
                                     assigned one.
stop                                 `boolean' signal to stop iteration over view
                                     result rows (for list functions only)

     Warning: `body', `base64' and `json' object keys are overlaps each
     other and the last wins. Since most realizations of key-value
     objects doesn't preserve key order mixing them may create
     confusing situation. Try to use only one of them.

     Note: Any custom property makes CouchDB raise internal exception.
     Also `Response object' could be a simple string value which would
     be implicitly wrapped into `{"body": ...}' object.


File: CouchDB.info,  Node: Returned CouchDB Document with Detailed Revision Info,  Next: Returned CouchDB Document with Revision Info,  Prev: Response object,  Up: JSON Structure Reference

9.16 Returned CouchDB Document with Detailed Revision Info
==========================================================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_revs_info [array]                   CouchDB Document Extended Revision Info
rev                                  Full revision string
status                               Status of the revision


File: CouchDB.info,  Node: Returned CouchDB Document with Revision Info,  Next: Returned Document with Attachments,  Prev: Returned CouchDB Document with Detailed Revision Info,  Up: JSON Structure Reference

9.17 Returned CouchDB Document with Revision Info
=================================================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_revisions                           CouchDB Document Revisions
ids [array]                          Array of valid revision IDs, in reverse order
                                     (latest first)
start                                Prefix number for the latest revision


File: CouchDB.info,  Node: Returned Document with Attachments,  Next: Security Object,  Prev: Returned CouchDB Document with Revision Info,  Up: JSON Structure Reference

9.18 Returned Document with Attachments
=======================================

Field                                Description
--------------------------------------------------------------------------------------- 
_id (optional)                       Document ID
_rev (optional)                      Revision ID (when updating an existing document)
_attachments (optional)              Document Attachment
filename                             Attachment
stub                                 Indicates whether the attachment is a stub
content_type                         MIME Content type string
length                               Length (bytes) of the attachment data
revpos                               Revision where this attachment exists


File: CouchDB.info,  Node: Security Object,  Next: User Context Object,  Prev: Returned Document with Attachments,  Up: JSON Structure Reference

9.19 Security Object
====================

Field                                Description
--------------------------------------------------------------------------------------- 
admins                               Roles/Users with admin privileges
roles [array]                        List of roles with parent privilege
users [array]                        List of users with parent privilege
readers                              Roles/Users with reader privileges
roles [array]                        List of roles with parent privilege
users [array]                        List of users with parent privilege

    {
        "admins": {
            "names": [
                "Bob"
            ],
            "roles": []
        },
        "members": {
            "names": [
                "Mike",
                "Alice"
            ],
            "roles": []
        }
      }



File: CouchDB.info,  Node: User Context Object,  Next: View Head Information,  Prev: Security Object,  Up: JSON Structure Reference

9.20 User Context Object
========================

Field                                Description
--------------------------------------------------------------------------------------- 
db                                   Database name in context of provided operation.
name                                 User name.
roles                                List of user roles.

    {
        "db": "mailbox",
        "name": null,
        "roles": [
            "_admin"
        ]
    }



File: CouchDB.info,  Node: View Head Information,  Prev: User Context Object,  Up: JSON Structure Reference

9.21 View Head Information
==========================

Field                                Description
--------------------------------------------------------------------------------------- 
total_rows                           Number of documents in the view
offset                               Offset where the document list started

    {
        "total_rows": 42,
        "offset": 3
    }



File: CouchDB.info,  Node: Configuration Reference,  Next: Release History,  Prev: JSON Structure Reference,  Up: Top

10 Configuration Reference
**************************

* Menu:

* Configuration Groups::
* attachments Configuration Options::
* couchdb Configuration Options::
* daemons Configuration Options::
* httpd_db_handlers Configuration Options::
* couch_httpd_auth Configuration Options::
* httpd Configuration Options::
* httpd_design_handlers Configuration Options::
* httpd_global_handlers Configuration Options::
* log Configuration Options::
* query_servers Configuration Options::
* query_server_config Configuration Options::
* replicator Configuration Options::
* stats Configuration Options::
* uuids Configuration Options::
* cors Configuration Options::
* cors vhost Configuration::


File: CouchDB.info,  Node: Configuration Groups,  Next: attachments Configuration Options,  Up: Configuration Reference

10.1 Configuration Groups
=========================

Section                                Description
--------------------------------------------------------------------------------------- 
attachments                            Attachment options
couchdb                                CouchDB specific options
couch_httpd_auth                       HTTPD Authentication options
daemons                                Daemons and background processes
httpd                                  HTTPD Server options
httpd_db_handlers                      Database Operation handlers
httpd_design_handlers                  Handlers for design document operations
httpd_global_handlers                  Handlers for global operations
log                                    Logging options
query_servers                          Query Server options
query_server_config                    Query server options
replicator                             Replicator Options
ssl                                    SSL (Secure Sockets Layer) Options
stats                                  Statistics options
uuids                                  UUID generation options
cors                                   Cross Origin Resource Sharing settings


File: CouchDB.info,  Node: attachments Configuration Options,  Next: couchdb Configuration Options,  Prev: Configuration Groups,  Up: Configuration Reference

10.2 attachments Configuration Options
======================================

Option                                     Description
--------------------------------------------------------------------------------------- 
compressible_types                         compressible_types
compression_level                          compression_level


File: CouchDB.info,  Node: couchdb Configuration Options,  Next: daemons Configuration Options,  Prev: attachments Configuration Options,  Up: Configuration Reference

10.3 couchdb Configuration Options
==================================

Option                                     Description
--------------------------------------------------------------------------------------- 
database_dir                               database_dir
delayed_commits                            delayed_commits
max_attachment_chunk_size                  max_attachment_chunk_size
max_dbs_open                               max_dbs_open
max_document_size                          max_document_size
os_process_timeout                         os_process_timeout
uri_file                                   uri_file
util_driver_dir                            util_driver_dir
view_index_dir                             view_index_dir


File: CouchDB.info,  Node: daemons Configuration Options,  Next: httpd_db_handlers Configuration Options,  Prev: couchdb Configuration Options,  Up: Configuration Reference

10.4 daemons Configuration Options
==================================

Option                                     Description
--------------------------------------------------------------------------------------- 
auth_cache                                 auth_cache
db_update_notifier                         db_update_notifier
external_manager                           external_manager
httpd                                      httpd
httpsd                                     Enabled HTTPS service
query_servers                              query_servers
stats_aggregator                           stats_aggregator
stats_collector                            stats_collector
uuids                                      uuids
view_manager                               view_manager


File: CouchDB.info,  Node: httpd_db_handlers Configuration Options,  Next: couch_httpd_auth Configuration Options,  Prev: daemons Configuration Options,  Up: Configuration Reference

10.5 httpd_db_handlers Configuration Options
============================================

Option                                     Description
--------------------------------------------------------------------------------------- 
_changes                                   _changes
_compact                                   _compact
_design                                    _design
_temp_view                                 _temp_view
_view_cleanup                              _view_cleanup


File: CouchDB.info,  Node: couch_httpd_auth Configuration Options,  Next: httpd Configuration Options,  Prev: httpd_db_handlers Configuration Options,  Up: Configuration Reference

10.6 couch_httpd_auth Configuration Options
===========================================

Option                                     Description
--------------------------------------------------------------------------------------- 
auth_cache_size                            auth_cache_size
authentication_db                          authentication_db
authentication_redirect                    authentication_redirect
require_valid_user                         require_valid_user
timeout                                    timeout


File: CouchDB.info,  Node: httpd Configuration Options,  Next: httpd_design_handlers Configuration Options,  Prev: couch_httpd_auth Configuration Options,  Up: Configuration Reference

10.7 httpd Configuration Options
================================

Option                                     Description
--------------------------------------------------------------------------------------- 
allow_jsonp                                allow_jsonp
authentication_handlers                    authentication_handlers
bind_address                               bind_address
default_handler                            default_handler
max_connections                            max_connections
nodelay                                    Enable TCP_NODELAY
port                                       port
secure_rewrites                            secure_rewrites
vhost_global_handlers                      vhost_global_handlers
enable_cors                                enables CORS functionality when true


File: CouchDB.info,  Node: httpd_design_handlers Configuration Options,  Next: httpd_global_handlers Configuration Options,  Prev: httpd Configuration Options,  Up: Configuration Reference

10.8 httpd_design_handlers Configuration Options
================================================

Option                                     Description
--------------------------------------------------------------------------------------- 
_info                                      _info
_list                                      _list
_rewrite                                   _rewrite
_show                                      _show
_update                                    _update
_view                                      _view


File: CouchDB.info,  Node: httpd_global_handlers Configuration Options,  Next: log Configuration Options,  Prev: httpd_design_handlers Configuration Options,  Up: Configuration Reference

10.9 httpd_global_handlers Configuration Options
================================================

Option                                     Description
--------------------------------------------------------------------------------------- 
/                                          /
_active_tasks                              _active_tasks
_all_dbs                                   _all_dbs
_config                                    _config
_log                                       _log
_oauth                                     _oauth
_replicate                                 _replicate
_restart                                   _restart
_session                                   _session
_stats                                     _stats
_utils                                     _utils
_uuids                                     _uuids
favicon.ico                                favicon.ico


File: CouchDB.info,  Node: log Configuration Options,  Next: query_servers Configuration Options,  Prev: httpd_global_handlers Configuration Options,  Up: Configuration Reference

10.10 log Configuration Options
===============================

Option                                     Description
--------------------------------------------------------------------------------------- 
file                                       file
include_sasl                               include_sasl
level                                      level


File: CouchDB.info,  Node: query_servers Configuration Options,  Next: query_server_config Configuration Options,  Prev: log Configuration Options,  Up: Configuration Reference

10.11 query_servers Configuration Options
=========================================

Option                                     Description
--------------------------------------------------------------------------------------- 
javascript                                 javascript


File: CouchDB.info,  Node: query_server_config Configuration Options,  Next: replicator Configuration Options,  Prev: query_servers Configuration Options,  Up: Configuration Reference

10.12 query_server_config Configuration Options
===============================================

Option                                     Description
--------------------------------------------------------------------------------------- 
reduce_limit                               reduce_limit


File: CouchDB.info,  Node: replicator Configuration Options,  Next: stats Configuration Options,  Prev: query_server_config Configuration Options,  Up: Configuration Reference

10.13 replicator Configuration Options
======================================

Option                                     Description
--------------------------------------------------------------------------------------- 
max_http_pipeline_size                     max_http_pipeline_size
max_http_sessions                          max_http_sessions


File: CouchDB.info,  Node: stats Configuration Options,  Next: uuids Configuration Options,  Prev: replicator Configuration Options,  Up: Configuration Reference

10.14 stats Configuration Options
=================================

Option                                     Description
--------------------------------------------------------------------------------------- 
rate                                       rate
samples                                    samples


File: CouchDB.info,  Node: uuids Configuration Options,  Next: cors Configuration Options,  Prev: stats Configuration Options,  Up: Configuration Reference

10.15 uuids Configuration Options
=================================

Option                                     Description
--------------------------------------------------------------------------------------- 
algorithm                                  algorithm


File: CouchDB.info,  Node: cors Configuration Options,  Next: cors vhost Configuration,  Prev: uuids Configuration Options,  Up: Configuration Reference

10.16 cors Configuration Options
================================

Option                                     Description
--------------------------------------------------------------------------------------- 
origins                                    List of origins, separated by a comma
                                           (protocol, host, optional port)
methods                                    accepted HTTP methods
credentials                                `true' sends additional header
                                           Access-Control-Allow-Credentials=true

  Note that `credentials=true' and `origins=*' are mutually exclusive.


File: CouchDB.info,  Node: cors vhost Configuration,  Prev: cors Configuration Options,  Up: Configuration Reference

10.17 cors vhost Configuration
==============================

The same configuration options for `cors' overall may be applied to an
individual vhost, within a specific section header, for `example.com'
the appropriate section would be: `[cors:http://example.com]'


File: CouchDB.info,  Node: Release History,  Next: Index,  Prev: Configuration Reference,  Up: Top

11 Release History
******************

* Menu:

* 1.3.x Branch: 1 3 x Branch.
* 1.2.x Branch: 1 2 x Branch.
* 1.1.x Branch: 1 1 x Branch.
* 1.0.x Branch: 1 0 x Branch.
* 0.11.x Branch: 0 11 x Branch.
* 0.10.x Branch: 0 10 x Branch.
* 0.9.x Branch: 0 9 x Branch.
* 0.8.x Branch: 0 8 x Branch.

1.3.x Branch

* Upgrade Notes::
* Version 1.3.1: Version 1 3 1.
* Version 1.3.0: Version 1 3 0.

Version 1.3.1

* Replicator::
* Log System::
* View Server::
* Miscellaneous::

Version 1.3.0

* Database core::
* Documentation::
* Futon::
* HTTP Interface::
* Log System: Log System<2>.
* Replicator: Replicator<2>.
* Security::
* Source Repository::
* Storage System::
* Test Suite::
* URL Rewriter & Vhosts::
* UUID Algorithms::
* Query and View Server::
* Windows::

1.2.x Branch

* Upgrade Notes: Upgrade Notes<2>.
* Version 1.2.0: Version 1 2 0.

Upgrade Notes

* Security changes::
* Database Compression::

Version 1.2.0

* Authentication::
* Build System::
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<2>.
* Replicator: Replicator<3>.
* Storage System: Storage System<2>.
* View Server: View Server<2>.
* OAuth::

1.1.x Branch

* Version 1.1.1: Version 1 1 1.
* Version 1.1.0: Version 1 1 0.

Version 1.1.0

* Externals::
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<3>.
* Replicator: Replicator<4>.
* Storage System: Storage System<3>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<2>.
* View Server: View Server<3>.

1.0.x Branch

* Version 1.0.3: Version 1 0 3.
* Version 1.0.2: Version 1 0 2.
* Version 1.0.1: Version 1 0 1.
* Version 1.0.0: Version 1 0 0.

Version 1.0.3

* General::
* Etap Test Suite::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<4>.
* Replicator: Replicator<5>.
* Security: Security<2>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.

Version 1.0.2

* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<6>.
* Storage System: Storage System<5>.
* View Server: View Server<4>.

Version 1.0.1

* Authentication: Authentication<2>.
* Build and System Integration::
* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<7>.
* Storage System: Storage System<6>.

Version 1.0.0

* Security: Security<3>.
* Storage System: Storage System<7>.
* View Server: View Server<5>.

0.11.x Branch

* Version 0.11.2: Version 0 11 2.
* Version 0.11.1: Version 0 11 1.
* Version 0.11.0: Version 0 11 0.

Version 0.11.2

* Authentication: Authentication<3>.
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<7>.
* Replicator: Replicator<8>.
* Security: Security<4>.

Version 0.11.1

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<8>.
* JavaScript Clients::
* Log System: Log System<4>.
* Replication System::
* Security: Security<5>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<6>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.

Version 0.11.0

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<9>.
* Replication::
* Runtime Statistics::
* Security: Security<6>.
* Storage System: Storage System<9>.
* View Server: View Server<7>.

0.10.x Branch

* Version 0.10.1: Version 0 10 1.
* Version 0.10.0: Version 0 10 0.

Version 0.10.1

* Build and System Integration: Build and System Integration<4>.
* Replicator: Replicator<9>.
* Query Server::
* Stats::

Version 0.10.0

* Build and System Integration: Build and System Integration<5>.
* HTTP Interface: HTTP Interface<10>.
* Storage Format::
* View Server: View Server<8>.

0.9.x Branch

* Version 0.9.2: Version 0 9 2.
* Version 0.9.1: Version 0 9 1.
* Version 0.9.0: Version 0 9 0.

Version 0.9.2

* Build and System Integration: Build and System Integration<6>.
* Replication: Replication<2>.

Version 0.9.1

* Build and System Integration: Build and System Integration<7>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<11>.
* JavaScript View Server::
* Replication: Replication<3>.

Version 0.9.0

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<12>.
* Replication: Replication<4>.

0.8.x Branch

* Version 0.8.1-incubating: Version 0 8 1-incubating.
* Version 0.8.0-incubating: Version 0 8 0-incubating.

Version 0.8.1-incubating

* Build and System Integration: Build and System Integration<9>.
* Database Core: Database Core<3>.
* Futon: Futon<11>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<13>.

Version 0.8.0-incubating

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<4>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<14>.


File: CouchDB.info,  Node: 1 3 x Branch,  Next: 1 2 x Branch,  Up: Release History

11.1 1.3.x Branch
=================

* Menu:

* Upgrade Notes::
* Version 1.3.1: Version 1 3 1.
* Version 1.3.0: Version 1 3 0.


File: CouchDB.info,  Node: Upgrade Notes,  Next: Version 1 3 1,  Up: 1 3 x Branch

11.1.1 Upgrade Notes
--------------------

You can upgrade your existing CouchDB 1.0.x installation to 1.3.0
without any specific steps or migration. When you run CouchDB, the
existing data and index files will be opened and used as normal.

  The first time you run a compaction routine on your database within
1.3.0, the data structure and indexes will be updated to the new
version of the CouchDB database format that can only be read by CouchDB
1.3.0 and later.  This step is not reversible. Once the data files have
been updated and migrated to the new version the data files will no
longer work with a CouchDB 1.0.x release.

     Warning: If you want to retain support for opening the data files
     in CouchDB 1.0.x you must back up your data files before
     performing the upgrade and compaction process.


File: CouchDB.info,  Node: Version 1 3 1,  Next: Version 1 3 0,  Prev: Upgrade Notes,  Up: 1 3 x Branch

11.1.2 Version 1.3.1
--------------------

* Menu:

* Replicator::
* Log System::
* View Server::
* Miscellaneous::


File: CouchDB.info,  Node: Replicator,  Next: Log System,  Up: Version 1 3 1

11.1.2.1 Replicator
...................

   * COUCHDB-1788(1): Tolerate missing source and target fields in
     _replicator docs.  #869f42e2(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1788

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=869f42e2


File: CouchDB.info,  Node: Log System,  Next: View Server,  Prev: Replicator,  Up: Version 1 3 1

11.1.2.2 Log System
...................

   * Don't log about missing .compact files. #06f1a8dc(1)

   * COUCHDB-1794(2): Fix bug in WARN level logging from 1.3.0.

  ---------- Footnotes ----------

  (1)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=06f1a8dc

  (2) https://issues.apache.org/jira/browse/COUCHDB-1794


File: CouchDB.info,  Node: View Server,  Next: Miscellaneous,  Prev: Log System,  Up: Version 1 3 1

11.1.2.3 View Server
....................

   * COUCHDB-1792(1): Fix the -S option to couchjs to increase memory
     limits.  #cfaa66cd(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1792

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=cfaa66cd


File: CouchDB.info,  Node: Miscellaneous,  Prev: View Server,  Up: Version 1 3 1

11.1.2.4 Miscellaneous
......................

   * Improve documentation: better structure, improve language, less
     duplication.

   * COUCHDB-1784(1): Improvements to test suite and VPATH build system.
     #01afaa4f(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1784

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=01afaa4f


File: CouchDB.info,  Node: Version 1 3 0,  Prev: Version 1 3 1,  Up: 1 3 x Branch

11.1.3 Version 1.3.0
--------------------

* Menu:

* Database core::
* Documentation::
* Futon::
* HTTP Interface::
* Log System: Log System<2>.
* Replicator: Replicator<2>.
* Security::
* Source Repository::
* Storage System::
* Test Suite::
* URL Rewriter & Vhosts::
* UUID Algorithms::
* Query and View Server::
* Windows::


File: CouchDB.info,  Node: Database core,  Next: Documentation,  Up: Version 1 3 0

11.1.3.1 Database core
......................

   * COUCHDB-1512(1): Validate bind address before assignment.
     #09ead8a0(2)

   * Restore `max_document_size' protection. #bf1eb135(3)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1512

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=09ead8a0

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=bf1eb135


File: CouchDB.info,  Node: Documentation,  Next: Futon,  Prev: Database core,  Up: Version 1 3 0

11.1.3.2 Documentation
......................

   * COUCHDB-1523(1): Import CouchBase documentation and convert them
     into Sphinx docs(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1523

  (2) http://sphinx.pocoo.org/


File: CouchDB.info,  Node: Futon,  Next: HTTP Interface,  Prev: Documentation,  Up: Version 1 3 0

11.1.3.3 Futon
..............

   * COUCHDB-1470(1): Futon raises popup on attempt to navigate to
     missed/deleted document. #5da40eef(2)

   * COUCHDB-1383(3): Futon view editor won't allow you to save
     original view after saving a revision. #ce48342(4)

   * COUCHDB-627(5): Support all timezones. #b1a049bb(6)

   * COUCHDB-509(7): Added view request duration to Futon. #2d2c7d1e(8)

   * COUCHDB-1473(9), COUCHDB-1472(10): Disable buttons for actions
     that the user doesn't have permissions to. #7156254d(11)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1470

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=5da40eef

  (3) https://issues.apache.org/jira/browse/COUCHDB-1383

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ce48342

  (5) https://issues.apache.org/jira/browse/COUCHDB-627

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b1a049bb

  (7) https://issues.apache.org/jira/browse/COUCHDB-509

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2d2c7d1e

  (9) https://issues.apache.org/jira/browse/COUCHDB-1473

  (10) https://issues.apache.org/jira/browse/COUCHDB-1472

  (11)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=7156254d


File: CouchDB.info,  Node: HTTP Interface,  Next: Log System<2>,  Prev: Futon,  Up: Version 1 3 0

11.1.3.4 HTTP Interface
.......................

   * COUCHDB-431(1): Introduce experimental *note CORS support: 30.
     #b90e4021(2)

   * COUCHDB-1537(3): Include user name in show/list `ETags'.
     #ac320479(4)

   * COUCHDB-1511(5): CouchDB checks `roles' field for `_users'
     database documents with more care. #41205000(6)

   * COUCHDB-1502(7): Allow users to delete own _users doc.
     #f0d6f19bc8(8)

   * COUCHDB-1501(9): *note Changes feed: 5d. now can take special
     parameter `since=now' to emit changes since current point of time.
     #3bbb2612(10)

   * COUCHDB-1442(11): No longer rewrites the
     `X-CouchDB-Requested-Path' during recursive calls to the rewriter.
     #56744f2f(12)

   * COUCHDB-1441(13): Limit recursion depth in the URL rewriter.
     Defaults to a maximum of 100 invocations but is configurable.
     #d076976c(14)

   * COUCHDB-1381(15): Add jquery.couch support for Windows 8 Metro
     apps.  #dfc5d37c(16)

   * COUCHDB-1337(17): Use MD5 for attachment ETag header value.
     #6d912c9f(18)

   * COUCHDB-1321(19): Variables in rewrite rules breaks OAuth
     authentication.  #c307ba95(20)

   * COUCHDB-1285(21): Allow configuration of vendor and modules
     version in CouchDB welcome message. #3c24a94d(22)

   * COUCHDB-1277(23): Better query parameter support and code clarity:
     #7e3c69ba(24)

        * Responses to documents created/modified via form data `POST'
          to /db/doc or copied with `COPY' should now include
          `Location' header.

        * Form data POST to /db/doc now includes an `ETag' response
          header.

        * `?batch=ok' is now supported for `COPY' and `POST' /db/doc
          updates.

        * `?new_edits=false' is now supported for more operations.

   * COUCHDB-1210(25): Files starting with underscore can be attached
     and updated now.  #05858792(26)

   * COUCHDB-1097(27): Allow `OPTIONS' request to shows and lists
     functions.  #9f53704a(28)

   * COUCHDB-1026(29): Database names are encoded with respect of
     special characters in the rewriter now. #272d6415(30)

   * COUCHDB-986(31): Added Server-Sent Events protocol to db changes
     API.  See <http://www.w3.org/TR/eventsource/> for details.
     #093d2aa6(32)

   * COUCHDB-887(33): Fix `bytes' and `offset' parameters semantic for
     `_log' resource (explanation(34)) #ad700014(35)

   * COUCHDB-764(36), COUCHDB-514(37), COUCHDB-430(38): Fix sending
     HTTP headers from `_list' function, #2a74f88375(39)

   * Send a 202 response for `_restart'. #b213e16f(40)

   * Make password hashing synchronous when using the /_config/admins
     API.  #08071a80(41)

   * Fix `_session' for IE7.

   * Return `X-Couch-Id' header if doc is created, #98515bf0b9(42)

   * Allow any 2xx code to indicate success, #0d50103cfd(43)

   * Restore 400 error for empty PUT, #2057b895(44)

   * Add support to serve single file with CouchDB, #2774531ff2(45)

   * Support auth cookies with `:' characters, #d9566c831d(46)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-431

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b90e4021

  (3) https://issues.apache.org/jira/browse/COUCHDB-1537

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ac320479

  (5) https://issues.apache.org/jira/browse/COUCHDB-1511

  (6)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=41205000

  (7) https://issues.apache.org/jira/browse/COUCHDB-1502

  (8)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=f0d6f19bc8

  (9) https://issues.apache.org/jira/browse/COUCHDB-1501

  (10)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=3bbb2612

  (11) https://issues.apache.org/jira/browse/COUCHDB-1442

  (12)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=56744f2f

  (13) https://issues.apache.org/jira/browse/COUCHDB-1441

  (14)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=d076976c

  (15) https://issues.apache.org/jira/browse/COUCHDB-1381

  (16)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=dfc5d37c

  (17) https://issues.apache.org/jira/browse/COUCHDB-1337

  (18)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=6d912c9f

  (19) https://issues.apache.org/jira/browse/COUCHDB-1321

  (20)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c307ba95

  (21) https://issues.apache.org/jira/browse/COUCHDB-1285

  (22)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=3c24a94d

  (23) https://issues.apache.org/jira/browse/COUCHDB-1277

  (24)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=7e3c69ba

  (25) https://issues.apache.org/jira/browse/COUCHDB-1210

  (26)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=05858792

  (27) https://issues.apache.org/jira/browse/COUCHDB-1097

  (28)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=9f53704a

  (29) https://issues.apache.org/jira/browse/COUCHDB-1026

  (30)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=272d6415

  (31) https://issues.apache.org/jira/browse/COUCHDB-986

  (32)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=093d2aa6

  (33) https://issues.apache.org/jira/browse/COUCHDB-887

  (34)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=blobdiff;f=src/couchdb/couch_log.erl;h=1b05f4db2;hp=0befe7aab;hb=ad700014;hpb=7809f3ca

  (35)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=ad700014

  (36) https://issues.apache.org/jira/browse/COUCHDB-764

  (37) https://issues.apache.org/jira/browse/COUCHDB-514

  (38) https://issues.apache.org/jira/browse/COUCHDB-430

  (39)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2a74f88375

  (40)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b213e16f

  (41)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=08071a80

  (42)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=98515bf0b9

  (43)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=0d50103cfd

  (44)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2057b895

  (45)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2774531ff2

  (46)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=d9566c831d


File: CouchDB.info,  Node: Log System<2>,  Next: Replicator<2>,  Prev: HTTP Interface,  Up: Version 1 3 0

11.1.3.5 Log System
...................

   * COUCHDB-1380(1): Minor fixes for logrotate support.

   * Improve file I/O error logging and handling, #4b6475da(2)

   * Module Level Logging, #b58f069167(3)

   * Log 5xx responses at error level, #e896b0b7(4)

   * Log problems opening database at ERROR level except for
     auto-created system dbs, #41667642f7(5)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1380

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=4b6475da

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b58f069167

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=e896b0b7

  (5)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=41667642f7


File: CouchDB.info,  Node: Replicator<2>,  Next: Security,  Prev: Log System<2>,  Up: Version 1 3 0

11.1.3.6 Replicator
...................

   * COUCHDB-1557(1): Upgrade some code to use BIFs bring good
     improvements for replication.

   * COUCHDB-1363(2): Fix rarely occurred, but still race condition in
     changes feed if a quick burst of changes happens while replication
     is starting the replication can go stale. #573a7bb9(3)

   * COUCHDB-1323(4): Replicator now acts as standalone application.
     #f913ca6e(5)

   * COUCHDB-1259(6): Stabilize replication id, #c6252d6d7f(7)

   * COUCHDB-1248(8): `HTTP 500' error now doesn't occurs when
     replicating with `?doc_ids=null'. #bea76dbf(9)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1557

  (2) https://issues.apache.org/jira/browse/COUCHDB-1363

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=573a7bb9

  (4) https://issues.apache.org/jira/browse/COUCHDB-1323

  (5)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=f913ca6e

  (6) https://issues.apache.org/jira/browse/COUCHDB-1259

  (7)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c6252d6d7f

  (8) https://issues.apache.org/jira/browse/COUCHDB-1248

  (9)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=bea76dbf


File: CouchDB.info,  Node: Security,  Next: Source Repository,  Prev: Replicator<2>,  Up: Version 1 3 0

11.1.3.7 Security
.................

   * COUCHDB-1060(1): Passwords are now hashed using the PBKDF2
     algorithm with a configurable work factor. #7d418134(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1060

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=7d418134


File: CouchDB.info,  Node: Source Repository,  Next: Storage System,  Prev: Security,  Up: Version 1 3 0

11.1.3.8 Source Repository
..........................

   * The source repository was migrated from SVN(1) to Git(2).

  ---------- Footnotes ----------

  (1) https://svn.apache.org/repos/asf/couchdb

  (2) https://git-wip-us.apache.org/repos/asf/couchdb.git


File: CouchDB.info,  Node: Storage System,  Next: Test Suite,  Prev: Source Repository,  Up: Version 1 3 0

11.1.3.9 Storage System
.......................

   * Fixed unnecessary conflict when deleting and creating a document
     in the same batch.


File: CouchDB.info,  Node: Test Suite,  Next: URL Rewriter & Vhosts,  Prev: Storage System,  Up: Version 1 3 0

11.1.3.10 Test Suite
....................

   * COUCHDB-1563(1): Ensures urlPrefix is set in all ajax requests.
     #07a6af222(2)

   * COUCHDB-1389(3): Improved tracebacks printed by the JS CLI tests.

   * COUCHDB-1339(4): Use shell trap to catch dying beam processes
     during test runs.  #2921c78(5)

   * COUCHDB-1338(6): Start CouchDB with `port=0'. While CouchDB might
     be already running on the default port 5984, port number 0 let the
     TCP stack figure out a free port to run. #127cbe3(7)

   * COUCHDB-1321(8): Moved the JS test suite to the CLI.

   * Improved the reliability of a number of tests.

   * Fix race condition for test running on faster hardware.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1563

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=07a6af222

  (3) https://issues.apache.org/jira/browse/COUCHDB-1389

  (4) https://issues.apache.org/jira/browse/COUCHDB-1339

  (5)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=2921c78

  (6) https://issues.apache.org/jira/browse/COUCHDB-1338

  (7)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=127cbe3

  (8) https://issues.apache.org/jira/browse/COUCHDB-1321


File: CouchDB.info,  Node: URL Rewriter & Vhosts,  Next: UUID Algorithms,  Prev: Test Suite,  Up: Version 1 3 0

11.1.3.11 URL Rewriter & Vhosts
...............................

   * COUCHDB-1026(1): Database name is encoded during rewriting
     (allowing embedded /'s, etc). #272d6415(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1026

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=272d6415


File: CouchDB.info,  Node: UUID Algorithms,  Next: Query and View Server,  Prev: URL Rewriter & Vhosts,  Up: Version 1 3 0

11.1.3.12 UUID Algorithms
.........................

   * COUCHDB-1373(1): Added the utc_id algorithm #5ab712a2(2)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1373

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=5ab712a2


File: CouchDB.info,  Node: Query and View Server,  Next: Windows,  Prev: UUID Algorithms,  Up: Version 1 3 0

11.1.3.13 Query and View Server
...............................

   * COUCHDB-1491(1): Clenaup view tables. #c37204b7(2)

   * COUCHDB-1483(3): Update handlers requires valid doc ids.
     #72ea7e38(4)

   * COUCHDB-1445(5): CouchDB tries no more to delete view file if it
     couldn't open it, even if the error is `emfile'.

   * COUCHDB-1444(6): Fix missed_named_view error that occurs on
     existed design documents and views. #b59ac98b(7)

   * COUCHDB-1372(8): `_stats' builtin reduce function no longer
     produces error for empty view result.

   * COUCHDB-410(9): More graceful error handling for JavaScript
     validate_doc_update functions.

   * COUCHDB-111(10): Improve the errors reported by the javascript
     view server to provide a more friendly error report when something
     goes wrong.  #0c619ed(11)

   * Deprecate E4X support, #cdfdda2314(12)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1491

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=c37204b7

  (3) https://issues.apache.org/jira/browse/COUCHDB-1483

  (4)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=72ea7e38

  (5) https://issues.apache.org/jira/browse/COUCHDB-1445

  (6) https://issues.apache.org/jira/browse/COUCHDB-1444

  (7)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=b59ac98b

  (8) https://issues.apache.org/jira/browse/COUCHDB-1372

  (9) https://issues.apache.org/jira/browse/COUCHDB-410

  (10) https://issues.apache.org/jira/browse/COUCHDB-111

  (11)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=0c619ed

  (12)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=cdfdda2314


File: CouchDB.info,  Node: Windows,  Prev: Query and View Server,  Up: Version 1 3 0

11.1.3.14 Windows
.................

   * COUCHDB-1482(1): Use correct linker flang to build
     `snappy_nif.dll' on Windows.  #a6eaf9f1(2)

   * Allows building cleanly on Windows without cURL, #fb670f5712(3)

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1482

  (2)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=a6eaf9f1

  (3)
https://git-wip-us.apache.org/repos/asf?p=couchdb.git;a=commit;h=fb670f5712


File: CouchDB.info,  Node: 1 2 x Branch,  Next: 1 1 x Branch,  Prev: 1 3 x Branch,  Up: Release History

11.2 1.2.x Branch
=================

* Menu:

* Upgrade Notes: Upgrade Notes<2>.
* Version 1.2.0: Version 1 2 0.

Upgrade Notes

* Security changes::
* Database Compression::

Version 1.2.0

* Authentication::
* Build System::
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<2>.
* Replicator: Replicator<3>.
* Storage System: Storage System<2>.
* View Server: View Server<2>.
* OAuth::


File: CouchDB.info,  Node: Upgrade Notes<2>,  Next: Version 1 2 0,  Up: 1 2 x Branch

11.2.1 Upgrade Notes
--------------------

     Warning: This version drops support for the database format that
     was introduced in version 0.9.0. Compact your older databases
     (that have not been compacted for a long time) before upgrading,
     or they will become inaccessible.

* Menu:

* Security changes::
* Database Compression::


File: CouchDB.info,  Node: Security changes,  Next: Database Compression,  Up: Upgrade Notes<2>

11.2.1.1 Security changes
.........................

The interface to the `_users' and `_replicator' databases have been
changed so that non-administrator users can see less information:

   * In the `_users' database:

        * User documents can now only be read by the respective users,
          as well as administrators. Other users cannot read these
          documents.

        * Views can only be defined and queried by administrator users.

        * The `_changes' feed can only be queried by administrator
          users.

   * In the `_replicator' database:

        * Documents now have a forced `owner' field that corresponds to
          the authenticated user that created them.

        * Non-owner users will not see confidential information like
          passwords or OAuth tokens in replication documents; they can
          still see the other contents of those documents.
          Administrators can see everything.

        * Views can only be defined and queried by administrators.


File: CouchDB.info,  Node: Database Compression,  Prev: Security changes,  Up: Upgrade Notes<2>

11.2.1.2 Database Compression
.............................

The new optional (but enabled by default) compression of disk files
requires an upgrade of the on-disk format (5 -> 6) which occurs on
creation for new databases and views, and on compaction for existing
files. This format is not supported in previous releases, so rollback
would require replication to the previous CouchDB release or restoring
from backup.

  Compression can be disabled by setting `compression = none' in your
`local.ini' `[couchdb]' section, but the on-disk format will still be
upgraded.


File: CouchDB.info,  Node: Version 1 2 0,  Prev: Upgrade Notes<2>,  Up: 1 2 x Branch

11.2.2 Version 1.2.0
--------------------

* Menu:

* Authentication::
* Build System::
* Futon: Futon<2>.
* HTTP Interface: HTTP Interface<2>.
* Replicator: Replicator<3>.
* Storage System: Storage System<2>.
* View Server: View Server<2>.
* OAuth::


File: CouchDB.info,  Node: Authentication,  Next: Build System,  Up: Version 1 2 0

11.2.2.1 Authentication
.......................

   * Fix use of OAuth with VHosts and URL rewriting.

   * OAuth secrets can now be stored in the users system database as an
     alternative to key value pairs in the .ini configuration.  By
     default this is disabled (secrets are stored in the .ini) but can
     be enabled via the .ini configuration key `use_users_db' in the
     `couch_httpd_oauth' section.

   * Documents in the _users database are no longer publicly readable.

   * Confidential information in the _replication database is no longer
     publicly readable.

   * Password hashes are now calculated by CouchDB. Clients are no
     longer required to do this manually.

   * Cookies used for authentication can be made persistent by enabling
     the .ini configuration key `allow_persistent_cookies' in the
     `couch_httpd_auth' section.


File: CouchDB.info,  Node: Build System,  Next: Futon<2>,  Prev: Authentication,  Up: Version 1 2 0

11.2.2.2 Build System
.....................

   * cURL is no longer required to build CouchDB as it is only used by
     the command line JS test runner. If cURL is available when
     building CouchJS you can enable the HTTP bindings by passing -H on
     the command line.

   * Temporarily made `make check' pass with R15B. A more thorough fix
     is in the works (COUCHDB-1424(1)).

   * Fixed -with-js-include and -with-js-lib options.

   * Added -with-js-lib-name option.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1424


File: CouchDB.info,  Node: Futon<2>,  Next: HTTP Interface<2>,  Prev: Build System,  Up: Version 1 2 0

11.2.2.3 Futon
..............

   * The `Status' screen (active tasks) now displays two new task status
     fields: `Started on' and `Updated on'.

   * Futon remembers view code every time it is saved, allowing to save
     an edit that amounts to a revert.


File: CouchDB.info,  Node: HTTP Interface<2>,  Next: Replicator<3>,  Prev: Futon<2>,  Up: Version 1 2 0

11.2.2.4 HTTP Interface
.......................

   * Added a native JSON parser.

   * The _active_tasks API now offers more granular fields. Each task
     type is now able to expose different properties.

   * Added built-in changes feed filter `_view'.

   * Fixes to the `_changes' feed heartbeat option which caused
     heartbeats to be missed when used with a filter. This caused
     timeouts of continuous pull replications with a filter.

   * Properly restart the SSL socket on configuration changes.


File: CouchDB.info,  Node: Replicator<3>,  Next: Storage System<2>,  Prev: HTTP Interface<2>,  Up: Version 1 2 0

11.2.2.5 Replicator
...................

   * A new replicator implementation. It offers more performance and
     configuration options.

   * Passing non-string values to query_params is now a 400 bad
     request. This is to reduce the surprise that all parameters are
     converted to strings internally.

   * Added optional field `since_seq' to replication objects/documents.
     It allows to bootstrap a replication from a specific source
     sequence number.

   * Simpler replication cancellation. In addition to the current
     method, replications can now be canceled by specifying the
     replication ID instead of the original replication object/document.


File: CouchDB.info,  Node: Storage System<2>,  Next: View Server<2>,  Prev: Replicator<3>,  Up: Version 1 2 0

11.2.2.6 Storage System
.......................

   * Added optional database and view index file compression (using
     Google's snappy or zlib's deflate). This feature is enabled by
     default, but it can be disabled by adapting local.ini accordingly.
     The on-disk format is upgraded on compaction and new DB/view
     creation to support this.

   * Several performance improvements, most notably regarding database
     writes and view indexing.

   * Computation of the size of the latest MVCC snapshot data and all
     its supporting metadata, both for database and view index files.
     This information is exposed as the `data_size' attribute in the
     database and view group information URIs.

   * The size of the buffers used for database and view compaction is
     now configurable.

   * Added support for automatic database and view compaction. This
     feature is disabled by default, but it can be enabled via the .ini
     configuration.

   * Performance improvements for the built-in changes feed filters
     `_doc_ids' and `_design'.


File: CouchDB.info,  Node: View Server<2>,  Next: OAuth,  Prev: Storage System<2>,  Up: Version 1 2 0

11.2.2.7 View Server
....................

   * Add CoffeeScript (<http://coffeescript.org/>) as a first class
     view server language.

   * Fixed old index file descriptor leaks after a view cleanup.

   * The requested_path property keeps the pre-rewrite path even when
     no VHost configuration is matched.

   * Fixed incorrect reduce query results when using pagination
     parameters.

   * Made icu_driver work with Erlang R15B and later.


File: CouchDB.info,  Node: OAuth,  Prev: View Server<2>,  Up: Version 1 2 0

11.2.2.8 OAuth
..............

   * Updated bundled erlang_oauth library to the latest version.


File: CouchDB.info,  Node: 1 1 x Branch,  Next: 1 0 x Branch,  Prev: 1 2 x Branch,  Up: Release History

11.3 1.1.x Branch
=================

* Menu:

* Version 1.1.1: Version 1 1 1.
* Version 1.1.0: Version 1 1 0.


File: CouchDB.info,  Node: Version 1 1 1,  Next: Version 1 1 0,  Up: 1 1 x Branch

11.3.1 Version 1.1.1
--------------------

   * Support SpiderMonkey 1.8.5

   * Add configurable maximum to the number of bytes returned by _log.

   * Allow CommonJS modules to be an empty string.

   * Bump minimum Erlang version to R13B02.

   * Do not run deleted validate_doc_update functions.

   * ETags for views include current sequence if include_docs=true.

   * Fix bug where duplicates can appear in _changes feed.

   * Fix bug where update handlers break after conflict resolution.

   * Fix bug with _replicator where include "filter" could crash couch.

   * Fix crashes when compacting large views.

   * Fix file descriptor leak in _log

   * Fix missing revisions in _changes?style=all_docs.

   * Improve handling of compaction at max_dbs_open limit.

   * JSONP responses now send "text/javascript" for Content-Type.

   * Link to ICU 4.2 on Windows.

   * Permit forward slashes in path to update functions.

   * Reap couchjs processes that hit reduce_overflow error.

   * Status code can be specified in update handlers.

   * Support provides() in show functions.

   * _view_cleanup when ddoc has no views now removes all index files.

   * max_replication_retry_count now supports "infinity".

   * Fix replication crash when source database has a document with
     empty ID.

   * Fix deadlock when assigning couchjs processes to serve requests.

   * Fixes to the document multipart PUT API.

   * Fixes regarding file descriptor leaks for databases with views.


File: CouchDB.info,  Node: Version 1 1 0,  Prev: Version 1 1 1,  Up: 1 1 x Branch

11.3.2 Version 1.1.0
--------------------

     Note: All CHANGES for 1.0.2 and 1.0.3 also apply to 1.1.0.

* Menu:

* Externals::
* Futon: Futon<3>.
* HTTP Interface: HTTP Interface<3>.
* Replicator: Replicator<4>.
* Storage System: Storage System<3>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<2>.
* View Server: View Server<3>.


File: CouchDB.info,  Node: Externals,  Next: Futon<3>,  Up: Version 1 1 0

11.3.2.1 Externals
..................

   * Added OS Process module to manage daemons outside of CouchDB.

   * Added HTTP Proxy handler for more scalable externals.


File: CouchDB.info,  Node: Futon<3>,  Next: HTTP Interface<3>,  Prev: Externals,  Up: Version 1 1 0

11.3.2.2 Futon
..............

   * Added a "change password"-feature to Futon.


File: CouchDB.info,  Node: HTTP Interface<3>,  Next: Replicator<4>,  Prev: Futon<3>,  Up: Version 1 1 0

11.3.2.3 HTTP Interface
.......................

   * Native SSL support.

   * Added support for HTTP range requests for attachments.

   * Added built-in filters for `_changes': `_doc_ids' and `_design'.

   * Added configuration option for TCP_NODELAY aka "Nagle".

   * Allow POSTing arguments to `_changes'.

   * Allow `keys' parameter for GET requests to views.

   * Allow wildcards in vhosts definitions.

   * More granular ETag support for views.

   * More flexible URL rewriter.

   * Added support for recognizing "Q values" and media parameters in
     HTTP Accept headers.

   * Validate doc ids that come from a PUT to a URL.


File: CouchDB.info,  Node: Replicator<4>,  Next: Storage System<3>,  Prev: HTTP Interface<3>,  Up: Version 1 1 0

11.3.2.4 Replicator
...................

   * Added `_replicator' database to manage replications.

   * Fixed issues when an endpoint is a remote database accessible via
     SSL.

   * Added support for continuous by-doc-IDs replication.

   * Fix issue where revision info was omitted when replicating
     attachments.

   * Integrity of attachment replication is now verified by MD5.


File: CouchDB.info,  Node: Storage System<3>,  Next: URL Rewriter & Vhosts<2>,  Prev: Replicator<4>,  Up: Version 1 1 0

11.3.2.5 Storage System
.......................

   * Multiple micro-optimizations when reading data.


File: CouchDB.info,  Node: URL Rewriter & Vhosts<2>,  Next: View Server<3>,  Prev: Storage System<3>,  Up: Version 1 1 0

11.3.2.6 URL Rewriter & Vhosts
..............................

   * Fix for variable substituion


File: CouchDB.info,  Node: View Server<3>,  Prev: URL Rewriter & Vhosts<2>,  Up: Version 1 1 0

11.3.2.7 View Server
....................

   * Added CommonJS support to map functions.

   * Added `stale=update_after' query option that triggers a view
     update after returning a `stale=ok' response.

   * Warn about empty result caused by `startkey' and `endkey' limiting.

   * Built-in reduce function `_sum' now accepts lists of integers as
     input.

   * Added view query aliases start_key, end_key, start_key_doc_id and
     end_key_doc_id.


File: CouchDB.info,  Node: 1 0 x Branch,  Next: 0 11 x Branch,  Prev: 1 1 x Branch,  Up: Release History

11.4 1.0.x Branch
=================

* Menu:

* Version 1.0.3: Version 1 0 3.
* Version 1.0.2: Version 1 0 2.
* Version 1.0.1: Version 1 0 1.
* Version 1.0.0: Version 1 0 0.

Version 1.0.3

* General::
* Etap Test Suite::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<4>.
* Replicator: Replicator<5>.
* Security: Security<2>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.

Version 1.0.2

* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<6>.
* Storage System: Storage System<5>.
* View Server: View Server<4>.

Version 1.0.1

* Authentication: Authentication<2>.
* Build and System Integration::
* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<7>.
* Storage System: Storage System<6>.

Version 1.0.0

* Security: Security<3>.
* Storage System: Storage System<7>.
* View Server: View Server<5>.


File: CouchDB.info,  Node: Version 1 0 3,  Next: Version 1 0 2,  Up: 1 0 x Branch

11.4.1 Version 1.0.3
--------------------

* Menu:

* General::
* Etap Test Suite::
* Futon: Futon<4>.
* HTTP Interface: HTTP Interface<4>.
* Replicator: Replicator<5>.
* Security: Security<2>.
* Storage System: Storage System<4>.
* Windows: Windows<2>.


File: CouchDB.info,  Node: General,  Next: Etap Test Suite,  Up: Version 1 0 3

11.4.1.1 General
................

   * Fixed compatibility issues with Erlang R14B02.


File: CouchDB.info,  Node: Etap Test Suite,  Next: Futon<4>,  Prev: General,  Up: Version 1 0 3

11.4.1.2 Etap Test Suite
........................

   * Etap tests no longer require use of port 5984. They now use a
     randomly selected port so they won't clash with a running CouchDB.


File: CouchDB.info,  Node: Futon<4>,  Next: HTTP Interface<4>,  Prev: Etap Test Suite,  Up: Version 1 0 3

11.4.1.3 Futon
..............

   * Made compatible with jQuery 1.5.x.


File: CouchDB.info,  Node: HTTP Interface<4>,  Next: Replicator<5>,  Prev: Futon<4>,  Up: Version 1 0 3

11.4.1.4 HTTP Interface
.......................

   * Fix bug that allows invalid UTF-8 after valid escapes.

   * The query parameter `include_docs' now honors the parameter
     `conflicts'.  This applies to queries against map views, _all_docs
     and _changes.

   * Added support for inclusive_end with reduce views.


File: CouchDB.info,  Node: Replicator<5>,  Next: Security<2>,  Prev: HTTP Interface<4>,  Up: Version 1 0 3

11.4.1.5 Replicator
...................

   * Enabled replication over IPv6.

   * Fixed for crashes in continuous and filtered changes feeds.

   * Fixed error when restarting replications in OTP R14B02.

   * Upgrade ibrowse to version 2.2.0.

   * Fixed bug when using a filter and a limit of 1.


File: CouchDB.info,  Node: Security<2>,  Next: Storage System<4>,  Prev: Replicator<5>,  Up: Version 1 0 3

11.4.1.6 Security
.................

   * Fixed OAuth signature computation in OTP R14B02.

   * Handle passwords with : in them.


File: CouchDB.info,  Node: Storage System<4>,  Next: Windows<2>,  Prev: Security<2>,  Up: Version 1 0 3

11.4.1.7 Storage System
.......................

   * More performant queries against _changes and _all_docs when using
     the `include_docs' parameter.


File: CouchDB.info,  Node: Windows<2>,  Prev: Storage System<4>,  Up: Version 1 0 3

11.4.1.8 Windows
................

   * Windows builds now require ICU >= 4.4.0 and Erlang >= R14B03. See
     COUCHDB-1152(1), and COUCHDB-963(2) + OTP-9139 for more
     information.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1152

  (2) https://issues.apache.org/jira/browse/COUCHDB-963


File: CouchDB.info,  Node: Version 1 0 2,  Next: Version 1 0 1,  Prev: Version 1 0 3,  Up: 1 0 x Branch

11.4.2 Version 1.0.2
--------------------

* Menu:

* Futon: Futon<5>.
* HTTP Interface: HTTP Interface<5>.
* Log System: Log System<3>.
* Replicator: Replicator<6>.
* Storage System: Storage System<5>.
* View Server: View Server<4>.


File: CouchDB.info,  Node: Futon<5>,  Next: HTTP Interface<5>,  Up: Version 1 0 2

11.4.2.1 Futon
..............

   * Make test suite work with Safari and Chrome.

   * Fixed animated progress spinner.

   * Fix raw view document link due to overzealous URI encoding.

   * Spell javascript correctly in loadScript(uri).


File: CouchDB.info,  Node: HTTP Interface<5>,  Next: Log System<3>,  Prev: Futon<5>,  Up: Version 1 0 2

11.4.2.2 HTTP Interface
.......................

   * Allow reduce=false parameter in map-only views.

   * Fix parsing of Accept headers.

   * Fix for multipart GET APIs when an attachment was created during a
     local-local replication. See COUCHDB-1022(1) for details.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-1022


File: CouchDB.info,  Node: Log System<3>,  Next: Replicator<6>,  Prev: HTTP Interface<5>,  Up: Version 1 0 2

11.4.2.3 Log System
...................

   * Reduce lengthy stack traces.

   * Allow logging of native <xml> types.


File: CouchDB.info,  Node: Replicator<6>,  Next: Storage System<5>,  Prev: Log System<3>,  Up: Version 1 0 2

11.4.2.4 Replicator
...................

   * Updated ibrowse library to 2.1.2 fixing numerous replication
     issues.

   * Make sure that the replicator respects HTTP settings defined in
     the config.

   * Fix error when the ibrowse connection closes unexpectedly.

   * Fix authenticated replication (with HTTP basic auth) of design
     documents with attachments.

   * Various fixes to make replication more resilient for edge-cases.


File: CouchDB.info,  Node: Storage System<5>,  Next: View Server<4>,  Prev: Replicator<6>,  Up: Version 1 0 2

11.4.2.5 Storage System
.......................

   * Fix leaking file handles after compacting databases and views.

   * Fix databases forgetting their validation function after
     compaction.

   * Fix occasional timeout errors after successfully compacting large
     databases.

   * Fix ocassional error when writing to a database that has just been
     compacted.

   * Fix occasional timeout errors on systems with slow or heavily
     loaded IO.

   * Fix for OOME when compactions include documents with many
     conflicts.

   * Fix for missing attachment compression when MIME types included
     parameters.

   * Preserve purge metadata during compaction to avoid spurious view
     rebuilds.

   * Fix spurious conflicts introduced when uploading an attachment
     after a doc has been in a conflict. See COUCHDB-902(1) for details.

   * Fix for frequently edited documents in multi-master deployments
     being duplicated in _changes and _all_docs.  See COUCHDB-968(2)
     for details on how to repair.

   * Significantly higher read and write throughput against database and
     view index files.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-902

  (2) https://issues.apache.org/jira/browse/COUCHDB-968


File: CouchDB.info,  Node: View Server<4>,  Prev: Storage System<5>,  Up: Version 1 0 2

11.4.2.6 View Server
....................

   * Don't trigger view updates when requesting `_design/doc/_info'.

   * Fix for circular references in CommonJS requires.

   * Made isArray() function available to functions executed in the
     query server.

   * Documents are now sealed before being passed to map functions.

   * Force view compaction failure when duplicated document data
     exists. When this error is seen in the logs users should rebuild
     their views from scratch to fix the issue. See COUCHDB-999(1) for
     details.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-999


File: CouchDB.info,  Node: Version 1 0 1,  Next: Version 1 0 0,  Prev: Version 1 0 2,  Up: 1 0 x Branch

11.4.3 Version 1.0.1
--------------------

* Menu:

* Authentication: Authentication<2>.
* Build and System Integration::
* Futon: Futon<6>.
* HTTP Interface: HTTP Interface<6>.
* Replicator: Replicator<7>.
* Storage System: Storage System<6>.


File: CouchDB.info,  Node: Authentication<2>,  Next: Build and System Integration,  Up: Version 1 0 1

11.4.3.1 Authentication
.......................

   *
    Enable basic-auth popup when required to access the server, to prevent
          people from getting locked out.


File: CouchDB.info,  Node: Build and System Integration,  Next: Futon<6>,  Prev: Authentication<2>,  Up: Version 1 0 1

11.4.3.2 Build and System Integration
.....................................

   * Included additional source files for distribution.


File: CouchDB.info,  Node: Futon<6>,  Next: HTTP Interface<6>,  Prev: Build and System Integration,  Up: Version 1 0 1

11.4.3.3 Futon
..............

   * User interface element for querying stale (cached) views.


File: CouchDB.info,  Node: HTTP Interface<6>,  Next: Replicator<7>,  Prev: Futon<6>,  Up: Version 1 0 1

11.4.3.4 HTTP Interface
.......................

   * Expose `committed_update_seq' for monitoring purposes.

   * Show fields saved along with _deleted=true. Allows for auditing of
     deletes.

   * More robust Accept-header detection.


File: CouchDB.info,  Node: Replicator<7>,  Next: Storage System<6>,  Prev: HTTP Interface<6>,  Up: Version 1 0 1

11.4.3.5 Replicator
...................

   * Added support for replication via an HTTP/HTTPS proxy.

   * Fix pull replication of attachments from 0.11 to 1.0.x.

   * Make the _changes feed work with non-integer seqnums.


File: CouchDB.info,  Node: Storage System<6>,  Prev: Replicator<7>,  Up: Version 1 0 1

11.4.3.6 Storage System
.......................

   * Fix data corruption bug COUCHDB-844(1). Please see
     <http://couchdb.apache.org/notice/1.0.1.html> for details.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-844


File: CouchDB.info,  Node: Version 1 0 0,  Prev: Version 1 0 1,  Up: 1 0 x Branch

11.4.4 Version 1.0.0
--------------------

* Menu:

* Security: Security<3>.
* Storage System: Storage System<7>.
* View Server: View Server<5>.


File: CouchDB.info,  Node: Security<3>,  Next: Storage System<7>,  Up: Version 1 0 0

11.4.4.1 Security
.................

   * Added authentication caching, to avoid repeated opening and
     closing of the users database for each request requiring
     authentication.


File: CouchDB.info,  Node: Storage System<7>,  Next: View Server<5>,  Prev: Security<3>,  Up: Version 1 0 0

11.4.4.2 Storage System
.......................

   * Small optimization for reordering result lists.

   * More efficient header commits.

   * Use O_APPEND to save lseeks.

   * Faster implementation of pread_iolist(). Further improves
     performance on concurrent reads.


File: CouchDB.info,  Node: View Server<5>,  Prev: Storage System<7>,  Up: Version 1 0 0

11.4.4.3 View Server
....................

   * Faster default view collation.

   * Added option to include update_seq in view responses.


File: CouchDB.info,  Node: 0 11 x Branch,  Next: 0 10 x Branch,  Prev: 1 0 x Branch,  Up: Release History

11.5 0.11.x Branch
==================

* Menu:

* Version 0.11.2: Version 0 11 2.
* Version 0.11.1: Version 0 11 1.
* Version 0.11.0: Version 0 11 0.

Version 0.11.2

* Authentication: Authentication<3>.
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<7>.
* Replicator: Replicator<8>.
* Security: Security<4>.

Version 0.11.1

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<8>.
* JavaScript Clients::
* Log System: Log System<4>.
* Replication System::
* Security: Security<5>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<6>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.

Version 0.11.0

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<9>.
* Replication::
* Runtime Statistics::
* Security: Security<6>.
* Storage System: Storage System<9>.
* View Server: View Server<7>.


File: CouchDB.info,  Node: Version 0 11 2,  Next: Version 0 11 1,  Up: 0 11 x Branch

11.5.1 Version 0.11.2
---------------------

* Menu:

* Authentication: Authentication<3>.
* Futon: Futon<7>.
* HTTP Interface: HTTP Interface<7>.
* Replicator: Replicator<8>.
* Security: Security<4>.


File: CouchDB.info,  Node: Authentication<3>,  Next: Futon<7>,  Up: Version 0 11 2

11.5.1.1 Authentication
.......................

   * User documents can now be deleted by admins or the user.


File: CouchDB.info,  Node: Futon<7>,  Next: HTTP Interface<7>,  Prev: Authentication<3>,  Up: Version 0 11 2

11.5.1.2 Futon
..............

   * Add some Futon files that were missing from the Makefile.


File: CouchDB.info,  Node: HTTP Interface<7>,  Next: Replicator<8>,  Prev: Futon<7>,  Up: Version 0 11 2

11.5.1.3 HTTP Interface
.......................

   * Better error messages on invalid URL requests.


File: CouchDB.info,  Node: Replicator<8>,  Next: Security<4>,  Prev: HTTP Interface<7>,  Up: Version 0 11 2

11.5.1.4 Replicator
...................

   *
    Fix bug when pushing design docs by non-admins, which was hanging the
          replicator for no good reason.

   *
    Fix bug when pulling design documents from a source that requires
          basic-auth.


File: CouchDB.info,  Node: Security<4>,  Prev: Replicator<8>,  Up: Version 0 11 2

11.5.1.5 Security
.................

   * Avoid potential DOS attack by guarding all creation of atoms.


File: CouchDB.info,  Node: Version 0 11 1,  Next: Version 0 11 0,  Prev: Version 0 11 2,  Up: 0 11 x Branch

11.5.2 Version 0.11.1
---------------------

* Menu:

* Build and System Integration: Build and System Integration<2>.
* Configuration System::
* Futon: Futon<8>.
* HTTP Interface: HTTP Interface<8>.
* JavaScript Clients::
* Log System: Log System<4>.
* Replication System::
* Security: Security<5>.
* Storage System: Storage System<8>.
* Test Suite: Test Suite<2>.
* View Server: View Server<6>.
* URL Rewriter & Vhosts: URL Rewriter & Vhosts<3>.


File: CouchDB.info,  Node: Build and System Integration<2>,  Next: Configuration System,  Up: Version 0 11 1

11.5.2.1 Build and System Integration
.....................................

   * Output of `couchdb -help' has been improved.

   * Fixed compatibility with the Erlang R14 series.

   * Fixed warnings on Linux builds.

   * Fixed build error when aclocal needs to be called during the build.

   * Require ICU 4.3.1.

   * Fixed compatibility with Solaris.


File: CouchDB.info,  Node: Configuration System,  Next: Futon<8>,  Prev: Build and System Integration<2>,  Up: Version 0 11 1

11.5.2.2 Configuration System
.............................

   * Fixed timeout with large .ini files.


File: CouchDB.info,  Node: Futon<8>,  Next: HTTP Interface<8>,  Prev: Configuration System,  Up: Version 0 11 1

11.5.2.3 Futon
..............

   * Use "expando links" for over-long document values in Futon.

   * Added continuous replication option.

   * Added option to replicating test results anonymously to a community
     CouchDB instance.

   * Allow creation and deletion of config entries.

   * Fixed display issues with doc ids that have escaped characters.

   * Fixed various UI issues.


File: CouchDB.info,  Node: HTTP Interface<8>,  Next: JavaScript Clients,  Prev: Futon<8>,  Up: Version 0 11 1

11.5.2.4 HTTP Interface
.......................

   * Mask passwords in active tasks and logging.

   * Update mochijson2 to allow output of BigNums not in float form.

   * Added support for X-HTTP-METHOD-OVERRIDE.

   * Better error message for database names.

   * Disable jsonp by default.

   * Accept gzip encoded standalone attachments.

   * Made max_concurrent_connections configurable.

   * Made changes API more robust.

   * Send newly generated document rev to callers of an update function.


File: CouchDB.info,  Node: JavaScript Clients,  Next: Log System<4>,  Prev: HTTP Interface<8>,  Up: Version 0 11 1

11.5.2.5 JavaScript Clients
...........................

   * Added tests for couch.js and jquery.couch.js

   * Added changes handler to jquery.couch.js.

   * Added cache busting to jquery.couch.js if the user agent is msie.

   * Added support for multi-document-fetch (via _all_docs) to
     jquery.couch.js.

   * Added attachment versioning to jquery.couch.js.

   * Added option to control ensure_full_commit to jquery.couch.js.

   * Added list functionality to jquery.couch.js.

   * Fixed issues where bulkSave() wasn't sending a POST body.


File: CouchDB.info,  Node: Log System<4>,  Next: Replication System,  Prev: JavaScript Clients,  Up: Version 0 11 1

11.5.2.6 Log System
...................

   * Log HEAD requests as HEAD, not GET.

   * Keep massive JSON blobs out of the error log.

   * Fixed a timeout issue.


File: CouchDB.info,  Node: Replication System,  Next: Security<5>,  Prev: Log System<4>,  Up: Version 0 11 1

11.5.2.7 Replication System
...........................

   * Refactored various internal APIs related to attachment streaming.

   * Fixed hanging replication.

   * Fixed keepalive issue.


File: CouchDB.info,  Node: Security<5>,  Next: Storage System<8>,  Prev: Replication System,  Up: Version 0 11 1

11.5.2.8 Security
.................

   * Added authentication redirect URL to log in clients.

   * Fixed query parameter encoding issue in oauth.js.

   * Made authentication timeout configurable.

   * Temporary views are now admin-only resources.


File: CouchDB.info,  Node: Storage System<8>,  Next: Test Suite<2>,  Prev: Security<5>,  Up: Version 0 11 1

11.5.2.9 Storage System
.......................

   * Don't require a revpos for attachment stubs.

   * Added checking to ensure when a revpos is sent with an attachment
     stub, it's correct.

   * Make file deletions async to avoid pauses during compaction and db
     deletion.

   * Fixed for wrong offset when writing headers and converting them to
     blocks, only triggered when header is larger than 4k.

   * Preserve _revs_limit and instance_start_time after compaction.


File: CouchDB.info,  Node: Test Suite<2>,  Next: View Server<6>,  Prev: Storage System<8>,  Up: Version 0 11 1

11.5.2.10 Test Suite
....................

   * Made the test suite overall more reliable.


File: CouchDB.info,  Node: View Server<6>,  Next: URL Rewriter & Vhosts<3>,  Prev: Test Suite<2>,  Up: Version 0 11 1

11.5.2.11 View Server
.....................

   * Provide a UUID to update functions (and all other functions) that
     they can use to create new docs.

   * Upgrade CommonJS modules support to 1.1.1.

   * Fixed erlang filter funs and normalize filter fun API.

   * Fixed hang in view shutdown.


File: CouchDB.info,  Node: URL Rewriter & Vhosts<3>,  Prev: View Server<6>,  Up: Version 0 11 1

11.5.2.12 URL Rewriter & Vhosts
...............................

   * Allow more complex keys in rewriter.

   * Allow global rewrites so system defaults are available in vhosts.

   * Allow isolation of databases with vhosts.

   * Fix issue with passing variables to query parameters.


File: CouchDB.info,  Node: Version 0 11 0,  Prev: Version 0 11 1,  Up: 0 11 x Branch

11.5.3 Version 0.11.0
---------------------

* Menu:

* Build and System Integration: Build and System Integration<3>.
* Futon: Futon<9>.
* HTTP Interface: HTTP Interface<9>.
* Replication::
* Runtime Statistics::
* Security: Security<6>.
* Storage System: Storage System<9>.
* View Server: View Server<7>.


File: CouchDB.info,  Node: Build and System Integration<3>,  Next: Futon<9>,  Up: Version 0 11 0

11.5.3.1 Build and System Integration
.....................................

   * Updated and improved source documentation.

   * Fixed distribution preparation for building on Mac OS X.

   * Added support for building a Windows installer as part of 'make
     dist'.

   * Bug fix for building couch.app's module list.

   * ETap tests are now run during make distcheck. This included a
     number of updates to the build system to properly support VPATH
     builds.

   * Gavin McDonald setup a build-bot instance. More info can be found
     at <http://ci.apache.org/buildbot.html>


File: CouchDB.info,  Node: Futon<9>,  Next: HTTP Interface<9>,  Prev: Build and System Integration<3>,  Up: Version 0 11 0

11.5.3.2 Futon
..............

   * Added a button for view compaction.

   * JSON strings are now displayed as-is in the document view, without
     the escaping of new-lines and quotes. That dramatically improves
     readability of multi-line strings.

   * Same goes for editing of JSON string values. When a change to a
     field value is submitted, and the value is not valid JSON it is
     assumed to be a string. This improves editing of multi-line
     strings a lot.

   * Hitting tab in textareas no longer moves focus to the next form
     field, but simply inserts a tab character at the current caret
     position.

   * Fixed some font declarations.


File: CouchDB.info,  Node: HTTP Interface<9>,  Next: Replication,  Prev: Futon<9>,  Up: Version 0 11 0

11.5.3.3 HTTP Interface
.......................

   * Provide Content-MD5 header support for attachments.

   * Added URL Rewriter handler.

   * Added virtual host handling.


File: CouchDB.info,  Node: Replication,  Next: Runtime Statistics,  Prev: HTTP Interface<9>,  Up: Version 0 11 0

11.5.3.4 Replication
....................

   * Added option to implicitly create replication target databases.

   * Avoid leaking file descriptors on automatic replication restarts.

   * Added option to replicate a list of documents by id.

   * Allow continuous replication to be cancelled.


File: CouchDB.info,  Node: Runtime Statistics,  Next: Security<6>,  Prev: Replication,  Up: Version 0 11 0

11.5.3.5 Runtime Statistics
...........................

   * Statistics are now calculated for a moving window instead of
     non-overlapping timeframes.

   * Fixed a problem with statistics timers and system sleep.

   * Moved statistic names to a term file in the priv directory.


File: CouchDB.info,  Node: Security<6>,  Next: Storage System<9>,  Prev: Runtime Statistics,  Up: Version 0 11 0

11.5.3.6 Security
.................

   * Fixed CVE-2010-0009: Apache CouchDB Timing Attack Vulnerability.

   * Added default cookie-authentication and users database.

   * Added Futon user interface for user signup and login.

   * Added per-database reader access control lists.

   * Added per-database security object for configuration data in
     validation functions.

   * Added proxy authentication handler


File: CouchDB.info,  Node: Storage System<9>,  Next: View Server<7>,  Prev: Security<6>,  Up: Version 0 11 0

11.5.3.7 Storage System
.......................

   * Adds batching of multiple updating requests, to improve throughput
     with many writers. Removed the now redundant couch_batch_save
     module.

   * Adds configurable compression of attachments.


File: CouchDB.info,  Node: View Server<7>,  Prev: Storage System<9>,  Up: Version 0 11 0

11.5.3.8 View Server
....................

   * Added optional 'raw' binary collation for faster view builds where
     Unicode collation is not important.

   * Improved view index build time by reducing ICU collation callouts.

   * Improved view information objects.

   * Bug fix for partial updates during view builds.

   * Move query server to a design-doc based protocol.

   * Use json2.js for JSON serialization for compatiblity with native
     JSON.

   * Major refactoring of couchjs to lay the groundwork for disabling
     cURL support. The new HTTP interaction acts like a synchronous
     XHR. Example usage of the new system is in the JavaScript CLI test
     runner.


File: CouchDB.info,  Node: 0 10 x Branch,  Next: 0 9 x Branch,  Prev: 0 11 x Branch,  Up: Release History

11.6 0.10.x Branch
==================

* Menu:

* Version 0.10.1: Version 0 10 1.
* Version 0.10.0: Version 0 10 0.

Version 0.10.1

* Build and System Integration: Build and System Integration<4>.
* Replicator: Replicator<9>.
* Query Server::
* Stats::

Version 0.10.0

* Build and System Integration: Build and System Integration<5>.
* HTTP Interface: HTTP Interface<10>.
* Storage Format::
* View Server: View Server<8>.


File: CouchDB.info,  Node: Version 0 10 1,  Next: Version 0 10 0,  Up: 0 10 x Branch

11.6.1 Version 0.10.1
---------------------

* Menu:

* Build and System Integration: Build and System Integration<4>.
* Replicator: Replicator<9>.
* Query Server::
* Stats::


File: CouchDB.info,  Node: Build and System Integration<4>,  Next: Replicator<9>,  Up: Version 0 10 1

11.6.1.1 Build and System Integration
.....................................

   * Test suite now works with the distcheck target.


File: CouchDB.info,  Node: Replicator<9>,  Next: Query Server,  Prev: Build and System Integration<4>,  Up: Version 0 10 1

11.6.1.2 Replicator
...................

   * Stability enhancements regarding redirects, timeouts, OAuth.


File: CouchDB.info,  Node: Query Server,  Next: Stats,  Prev: Replicator<9>,  Up: Version 0 10 1

11.6.1.3 Query Server
.....................

   * Avoid process leaks

   * Allow list and view to span languages


File: CouchDB.info,  Node: Stats,  Prev: Query Server,  Up: Version 0 10 1

11.6.1.4 Stats
..............

   * Eliminate new process flood on system wake


File: CouchDB.info,  Node: Version 0 10 0,  Prev: Version 0 10 1,  Up: 0 10 x Branch

11.6.2 Version 0.10.0
---------------------

* Menu:

* Build and System Integration: Build and System Integration<5>.
* HTTP Interface: HTTP Interface<10>.
* Storage Format::
* View Server: View Server<8>.


File: CouchDB.info,  Node: Build and System Integration<5>,  Next: HTTP Interface<10>,  Up: Version 0 10 0

11.6.2.1 Build and System Integration
.....................................

   * Changed `couchdb' script configuration options.

   * Added default.d and local.d configuration directories to load
     sequence.


File: CouchDB.info,  Node: HTTP Interface<10>,  Next: Storage Format,  Prev: Build and System Integration<5>,  Up: Version 0 10 0

11.6.2.2 HTTP Interface
.......................

   * Added optional cookie-based authentication handler.

   * Added optional two-legged OAuth authentication handler.


File: CouchDB.info,  Node: Storage Format,  Next: View Server<8>,  Prev: HTTP Interface<10>,  Up: Version 0 10 0

11.6.2.3 Storage Format
.......................

   * Add move headers with checksums to the end of database files for
     extra robust storage and faster storage.


File: CouchDB.info,  Node: View Server<8>,  Prev: Storage Format,  Up: Version 0 10 0

11.6.2.4 View Server
....................

   * Added native Erlang views for high-performance applications.


File: CouchDB.info,  Node: 0 9 x Branch,  Next: 0 8 x Branch,  Prev: 0 10 x Branch,  Up: Release History

11.7 0.9.x Branch
=================

* Menu:

* Version 0.9.2: Version 0 9 2.
* Version 0.9.1: Version 0 9 1.
* Version 0.9.0: Version 0 9 0.

Version 0.9.2

* Build and System Integration: Build and System Integration<6>.
* Replication: Replication<2>.

Version 0.9.1

* Build and System Integration: Build and System Integration<7>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<11>.
* JavaScript View Server::
* Replication: Replication<3>.

Version 0.9.0

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<12>.
* Replication: Replication<4>.


File: CouchDB.info,  Node: Version 0 9 2,  Next: Version 0 9 1,  Up: 0 9 x Branch

11.7.1 Version 0.9.2
--------------------

* Menu:

* Build and System Integration: Build and System Integration<6>.
* Replication: Replication<2>.


File: CouchDB.info,  Node: Build and System Integration<6>,  Next: Replication<2>,  Up: Version 0 9 2

11.7.1.1 Build and System Integration
.....................................

   * Remove branch callbacks to allow building couchjs against newer
     versions of Spidermonkey.


File: CouchDB.info,  Node: Replication<2>,  Prev: Build and System Integration<6>,  Up: Version 0 9 2

11.7.1.2 Replication
....................

   * Fix replication with 0.10 servers initiated by an 0.9 server
     (COUCHDB-559(1)).

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-559


File: CouchDB.info,  Node: Version 0 9 1,  Next: Version 0 9 0,  Prev: Version 0 9 2,  Up: 0 9 x Branch

11.7.2 Version 0.9.1
--------------------

* Menu:

* Build and System Integration: Build and System Integration<7>.
* Configuration and stats system::
* Database Core::
* External Handlers::
* Futon: Futon<10>.
* HTTP Interface: HTTP Interface<11>.
* JavaScript View Server::
* Replication: Replication<3>.


File: CouchDB.info,  Node: Build and System Integration<7>,  Next: Configuration and stats system,  Up: Version 0 9 1

11.7.2.1 Build and System Integration
.....................................

   * PID file directory is now created by the SysV/BSD daemon scripts.

   * Fixed the environment variables shown by the configure script.

   * Fixed the build instructions shown by the configure script.

   * Updated ownership and permission advice in `README' for better
     security.


File: CouchDB.info,  Node: Configuration and stats system,  Next: Database Core,  Prev: Build and System Integration<7>,  Up: Version 0 9 1

11.7.2.2 Configuration and stats system
.......................................

   * Corrected missing configuration file error message.

   * Fixed incorrect recording of request time.


File: CouchDB.info,  Node: Database Core,  Next: External Handlers,  Prev: Configuration and stats system,  Up: Version 0 9 1

11.7.2.3 Database Core
......................

   * Document validation for underscore prefixed variables.

   * Made attachment storage less sparse.

   * Fixed problems when a database with delayed commits pending is
     considered idle, and subject to losing changes when shutdown.
     (COUCHDB-334(1))

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-334


File: CouchDB.info,  Node: External Handlers,  Next: Futon<10>,  Prev: Database Core,  Up: Version 0 9 1

11.7.2.4 External Handlers
..........................

   * Fix POST requests.


File: CouchDB.info,  Node: Futon<10>,  Next: HTTP Interface<11>,  Prev: External Handlers,  Up: Version 0 9 1

11.7.2.5 Futon
..............

   * Redirect when loading a deleted view URI from the cookie.


File: CouchDB.info,  Node: HTTP Interface<11>,  Next: JavaScript View Server,  Prev: Futon<10>,  Up: Version 0 9 1

11.7.2.6 HTTP Interface
.......................

   * Attachment requests respect the "rev" query-string parameter.


File: CouchDB.info,  Node: JavaScript View Server,  Next: Replication<3>,  Prev: HTTP Interface<11>,  Up: Version 0 9 1

11.7.2.7 JavaScript View Server
...............................

   * Useful JavaScript Error messages.


File: CouchDB.info,  Node: Replication<3>,  Prev: JavaScript View Server,  Up: Version 0 9 1

11.7.2.8 Replication
....................

   * Added support for Unicode characters transmitted as UTF-16
     surrogate pairs.

   * URL-encode attachment names when necessary.

   * Pull specific revisions of an attachment, instead of just the
     latest one.

   * Work around a rare chunk-merging problem in ibrowse.

   * Work with documents containing Unicode characters outside the Basic
     Multilingual Plane.


File: CouchDB.info,  Node: Version 0 9 0,  Prev: Version 0 9 1,  Up: 0 9 x Branch

11.7.3 Version 0.9.0
--------------------

* Menu:

* Build and System Integration: Build and System Integration<8>.
* Configuration and stats system: Configuration and stats system<2>.
* Database Core: Database Core<2>.
* Design Document Resource Paths::
* Futon Utility Client::
* HTTP Interface: HTTP Interface<12>.
* Replication: Replication<4>.


File: CouchDB.info,  Node: Build and System Integration<8>,  Next: Configuration and stats system<2>,  Up: Version 0 9 0

11.7.3.1 Build and System Integration
.....................................

   * The `couchdb' script now supports system chainable configuration
     files.

   * The Mac OS X daemon script now redirects STDOUT and STDERR like
     SysV/BSD.

   * The build and system integration have been improved for
     portability.

   * Added COUCHDB_OPTIONS to etc/default/couchdb file.

   * Remove COUCHDB_INI_FILE and COUCHDB_PID_FILE from
     etc/default/couchdb file.

   * Updated `configure.ac' to manually link `libm' for portability.

   * Updated `configure.ac' to extended default library paths.

   * Removed inets configuration files.

   * Added command line test runner.

   * Created dev target for make.


File: CouchDB.info,  Node: Configuration and stats system<2>,  Next: Database Core<2>,  Prev: Build and System Integration<8>,  Up: Version 0 9 0

11.7.3.2 Configuration and stats system
.......................................

   * Separate default and local configuration files.

   * HTTP interface for configuration changes.

   * Statistics framework with HTTP query API.


File: CouchDB.info,  Node: Database Core<2>,  Next: Design Document Resource Paths,  Prev: Configuration and stats system<2>,  Up: Version 0 9 0

11.7.3.3 Database Core
......................

   * Faster B-tree implementation.

   * Changed internal JSON term format.

   * Improvements to Erlang VM interactions under heavy load.

   * User context and administrator role.

   * Update validations with design document validation functions.

   * Document purge functionality.

   * Ref-counting for database file handles.


File: CouchDB.info,  Node: Design Document Resource Paths,  Next: Futon Utility Client,  Prev: Database Core<2>,  Up: Version 0 9 0

11.7.3.4 Design Document Resource Paths
.......................................

   * Added httpd_design_handlers config section.

   * Moved _view to httpd_design_handlers.

   * Added ability to render documents as non-JSON content-types with
     _show and _list functions, which are also httpd_design_handlers.


File: CouchDB.info,  Node: Futon Utility Client,  Next: HTTP Interface<12>,  Prev: Design Document Resource Paths,  Up: Version 0 9 0

11.7.3.5 Futon Utility Client
.............................

   * Added pagination to the database listing page.

   * Implemented attachment uploading from the document page.

   * Added page that shows the current configuration, and allows
     modification of option values.

   * Added a JSON "source view" for document display.

   * JSON data in view rows is now syntax highlighted.

   * Removed the use of an iframe for better integration with browser
     history and bookmarking.

   * Full database listing in the sidebar has been replaced by a short
     list of recent databases.

   * The view editor now allows selection of the view language if there
     is more than one configured.

   * Added links to go to the raw view or document URI.

   * Added status page to display currently running tasks in CouchDB.

   * JavaScript test suite split into multiple files.

   * Pagination for reduce views.


File: CouchDB.info,  Node: HTTP Interface<12>,  Next: Replication<4>,  Prev: Futon Utility Client,  Up: Version 0 9 0

11.7.3.6 HTTP Interface
.......................

   * Added client side UUIDs for idempotent document creation

   * HTTP COPY for documents

   * Streaming of chunked attachment PUTs to disk

   * Remove negative count feature

   * Add include_docs option for view queries

   * Add multi-key view post for views

   * Query parameter validation

   * Use stale=ok to request potentially cached view index

   * External query handler module for full-text or other indexers.

   * Etags for attachments, views, shows and lists

   * Show and list functions for rendering documents and views as
     developer controlled content-types.

   * Attachment names may use slashes to allow uploading of nested
     directories (useful for static web hosting).

   * Option for a view to run over design documents.

   * Added newline to JSON responses. Closes bike-shed.


File: CouchDB.info,  Node: Replication<4>,  Prev: HTTP Interface<12>,  Up: Version 0 9 0

11.7.3.7 Replication
....................

   * Using ibrowse.

   * Checkpoint replications so failures are less expensive.

   * Automatically retry of failed replications.

   * Stream attachments in pull-replication.


File: CouchDB.info,  Node: 0 8 x Branch,  Prev: 0 9 x Branch,  Up: Release History

11.8 0.8.x Branch
=================

* Menu:

* Version 0.8.1-incubating: Version 0 8 1-incubating.
* Version 0.8.0-incubating: Version 0 8 0-incubating.

Version 0.8.1-incubating

* Build and System Integration: Build and System Integration<9>.
* Database Core: Database Core<3>.
* Futon: Futon<11>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<13>.

Version 0.8.0-incubating

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<4>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<14>.


File: CouchDB.info,  Node: Version 0 8 1-incubating,  Next: Version 0 8 0-incubating,  Up: 0 8 x Branch

11.8.1 Version 0.8.1-incubating
-------------------------------

* Menu:

* Build and System Integration: Build and System Integration<9>.
* Database Core: Database Core<3>.
* Futon: Futon<11>.
* JavaScript View Server: JavaScript View Server<2>.
* HTTP Interface: HTTP Interface<13>.


File: CouchDB.info,  Node: Build and System Integration<9>,  Next: Database Core<3>,  Up: Version 0 8 1-incubating

11.8.1.1 Build and System Integration
.....................................

   * The `couchdb' script no longer uses `awk' for configuration checks
     as this was causing portability problems.

   * Updated `sudo' example in `README' to use the `-i' option, this
     fixes problems when invoking from a directory the `couchdb' user
     cannot access.


File: CouchDB.info,  Node: Database Core<3>,  Next: Futon<11>,  Prev: Build and System Integration<9>,  Up: Version 0 8 1-incubating

11.8.1.2 Database Core
......................

   * Fix for replication problems where the write queues can get backed
     up if the writes aren't happening fast enough to keep up with the
     reads. For a large replication, this can exhaust memory and crash,
     or slow down the machine dramatically. The fix keeps only one
     document in the write queue at a time.

   * Fix for databases sometimes incorrectly reporting that they
     contain 0 documents after compaction.

   * CouchDB now uses ibrowse instead of inets for its internal HTTP
     client implementation. This means better replication stability.


File: CouchDB.info,  Node: Futon<11>,  Next: JavaScript View Server<2>,  Prev: Database Core<3>,  Up: Version 0 8 1-incubating

11.8.1.3 Futon
..............

   * The view selector dropdown should now work in Opera and Internet
     Explorer even when it includes optgroups for design documents.
     (COUCHDB-81(1))

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-81


File: CouchDB.info,  Node: JavaScript View Server<2>,  Next: HTTP Interface<13>,  Prev: Futon<11>,  Up: Version 0 8 1-incubating

11.8.1.4 JavaScript View Server
...............................

   * Sealing of documents has been disabled due to an incompatibility
     with SpiderMonkey 1.9.

   * Improve error handling for undefined values emitted by map
     functions.  (COUCHDB-83(1))

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-83


File: CouchDB.info,  Node: HTTP Interface<13>,  Prev: JavaScript View Server<2>,  Up: Version 0 8 1-incubating

11.8.1.5 HTTP Interface
.......................

   * Fix for chunked responses where chunks were always being split
     into multiple TCP packets, which caused problems with the test
     suite under Safari, and in some other cases.

   * Fix for an invalid JSON response body being returned for some
     kinds of views. (COUCHDB-84(1))

   * Fix for connections not getting closed after rejecting a chunked
     request.  (COUCHDB-55(2))

   * CouchDB can now be bound to IPv6 addresses.

   * The HTTP `Server' header now contains the versions of CouchDB and
     Erlang.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-84

  (2) https://issues.apache.org/jira/browse/COUCHDB-55


File: CouchDB.info,  Node: Version 0 8 0-incubating,  Prev: Version 0 8 1-incubating,  Up: 0 8 x Branch

11.8.2 Version 0.8.0-incubating
-------------------------------

* Menu:

* Build and System Integration: Build and System Integration<10>.
* Database Core: Database Core<4>.
* Futon: Futon<12>.
* JavaScript View Server: JavaScript View Server<3>.
* HTTP Interface: HTTP Interface<14>.


File: CouchDB.info,  Node: Build and System Integration<10>,  Next: Database Core<4>,  Up: Version 0 8 0-incubating

11.8.2.1 Build and System Integration
.....................................

   * CouchDB can automatically respawn following a server crash.

   * Database server no longer refuses to start with a stale PID file.

   * System logrotate configuration provided.

   * Improved handling of ICU shared libraries.

   * The `couchdb' script now automatically enables SMP support in
     Erlang.

   * The `couchdb' and `couchjs' scripts have been improved for
     portability.

   * The build and system integration have been improved for
     portability.


File: CouchDB.info,  Node: Database Core<4>,  Next: Futon<12>,  Prev: Build and System Integration<10>,  Up: Version 0 8 0-incubating

11.8.2.2 Database Core
......................

   * The view engine has been completely decoupled from the storage
     engine. Index data is now stored in separate files, and the format
     of the main database file has changed.

   * Databases can now be compacted to reclaim space used for deleted
     documents and old document revisions.

   * Support for incremental map/reduce views has been added.

   * To support map/reduce, the structure of design documents has
     changed. View values are now JSON objects containing at least a
     `map' member, and optionally a `reduce' member.

   * View servers are now identified by name (for example `javascript')
     instead of by media type.

   * Automatically generated document IDs are now based on proper UUID
     generation using the crypto module.

   * The field `content-type' in the JSON representation of attachments
     has been renamed to `content_type' (underscore).


File: CouchDB.info,  Node: Futon<12>,  Next: JavaScript View Server<3>,  Prev: Database Core<4>,  Up: Version 0 8 0-incubating

11.8.2.3 Futon
..............

   * When adding a field to a document, Futon now just adds a field
     with an autogenerated name instead of prompting for the name with
     a dialog. The name is automatically put into edit mode so that it
     can be changed immediately.

   * Fields are now sorted alphabetically by name when a document is
     displayed.

   * Futon can be used to create and update permanent views.

   * The maximum number of rows to display per page on the database
     page can now be adjusted.

   * Futon now uses the XMLHTTPRequest API asynchronously to
     communicate with the CouchDB HTTP server, so that most operations
     no longer block the browser.

   * View results sorting can now be switched between ascending and
     descending by clicking on the `Key' column header.

   * Fixed a bug where documents that contained a `@' character could
     not be viewed. (COUCHDB-12(1))

   * The database page now provides a `Compact' button to trigger
     database compaction. (COUCHDB-38(2))

   * Fixed portential double encoding of document IDs and other URI
     segments in many instances. (COUCHDB-39(3))

   * Improved display of attachments.

   * The JavaScript Shell has been removed due to unresolved licensing
     issues.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-12

  (2) https://issues.apache.org/jira/browse/COUCHDB-38

  (3) https://issues.apache.org/jira/browse/COUCHDB-39


File: CouchDB.info,  Node: JavaScript View Server<3>,  Next: HTTP Interface<14>,  Prev: Futon<12>,  Up: Version 0 8 0-incubating

11.8.2.4 JavaScript View Server
...............................

   * SpiderMonkey is no longer included with CouchDB, but rather
     treated as a normal external dependency. A simple C program
     (`_couchjs') is provided that links against an existing
     SpiderMonkey installation and uses the interpreter embedding API.

   * View functions using the default JavaScript view server can now do
     logging using the global `log(message)' function. Log messages are
     directed into the CouchDB log at `INFO' level. (COUCHDB-59(1))

   * The global `map(key, value)' function made available to view code
     has been renamed to `emit(key, value)'.

   * Fixed handling of exceptions raised by view functions.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-59


File: CouchDB.info,  Node: HTTP Interface<14>,  Prev: JavaScript View Server<3>,  Up: Version 0 8 0-incubating

11.8.2.5 HTTP Interface
.......................

   * CouchDB now uses MochiWeb instead of inets for the HTTP server
     implementation. Among other things, this means that the extra
     configuration files needed for inets (such as `couch_httpd.conf')
     are no longer used.

   * The HTTP interface now completely supports the `HEAD' method.
     (COUCHDB-3(1))

   * Improved compliance of `Etag' handling with the HTTP specification.
     (COUCHDB-13(2))

   * Etags are no longer included in responses to document `GET'
     requests that include query string parameters causing the JSON
     response to change without the revision or the URI having changed.

   * The bulk document update API has changed slightly on both the
     request and the response side. In addition, bulk updates are now
     atomic.

   * CouchDB now uses `TCP_NODELAY' to fix performance problems with
     persistent connections on some platforms due to nagling.

   * Including a `?descending=false' query string parameter in requests
     to views no longer raises an error.

   * Requests to unknown top-level reserved URLs (anything with a
     leading underscore) now return a `unknown_private_path' error
     instead of the confusing `illegal_database_name'.

   * The Temporary view handling now expects a JSON request body, where
     the JSON is an object with at least a `map' member, and optional
     `reduce' and `language' members.

   * Temporary views no longer determine the view server based on the
     Content-Type header of the `POST' request, but rather by looking
     for a `language' member in the JSON body of the request.

   * The status code of responses to `DELETE' requests is now 200 to
     reflect that that the deletion is performed synchronously.

  ---------- Footnotes ----------

  (1) https://issues.apache.org/jira/browse/COUCHDB-3

  (2) https://issues.apache.org/jira/browse/COUCHDB-13


File: CouchDB.info,  Node: Index,  Prev: Release History,  Up: Top

Index
*****

 [index ]
* Menu:

* Emit() (built-in function):            Erlang.              (line  24)
* emit() (built-in function):            Design functions context.
                                                              (line   9)
* filterfun() (built-in function):       Filter functions.    (line   6)
* FoldRows() (built-in function):        Erlang.              (line  35)
* GetRow() (built-in function):          Erlang.              (line  57)
* getRow() (built-in function):          Design functions context.
                                                              (line  25)
* isArray() (built-in function):         Design functions context.
                                                              (line  50)
* JSON (global variable or constant):    Design functions context.
                                                              (line  47)
* listfun() (built-in function):         List functions.      (line   6)
* Log() (built-in function):             Erlang.              (line  78)
* log() (built-in function):             Design functions context.
                                                              (line  61)
* mapfun() (built-in function):          Map functions.       (line   6)
* provides() (built-in function):        Design functions context.
                                                              (line  80)
* redfun() (built-in function):          Reduce and rereduce functions.
                                                              (line   6)
* registerType() (built-in function):    Design functions context.
                                                              (line  90)
* require() (built-in function):         Design functions context.
                                                              (line 132)
* Send() (built-in function):            Erlang.              (line  97)
* send() (built-in function):            Design functions context.
                                                              (line 143)
* showfun() (built-in function):         Show functions.      (line   6)
* Start() (built-in function):           Erlang.              (line 113)
* start() (built-in function):           Design functions context.
                                                              (line 159)
* sum() (built-in function):             Design functions context.
                                                              (line 181)
* toJSON() (built-in function):          Design functions context.
                                                              (line 190)
* updatefun() (built-in function):       Update functions.    (line   6)
* validatefun() (built-in function):     Validate document update functions.
                                                              (line   6)

                                                             



Tag Table:
Node: Top325
Ref: index doc522
Ref: 0522
Node: Introduction12338
Ref: intro introduction12422
Ref: 112422
Ref: intro doc12422
Ref: 212422
Node: Using Futon13499
Ref: intro using-futon13579
Ref: 313579
Ref: intro id113579
Ref: 513579
Node: Managing Databases and Documents15914
Ref: intro managing-databases-and-documents16027
Ref: a16027
Ref: intro futon-management16027
Ref: 616027
Node: Configuring Replication18149
Ref: intro futon-replication18262
Ref: 818262
Ref: intro configuring-replication18262
Ref: b18262
Node: Using curl19879
Ref: intro using-curl19959
Ref: 419959
Ref: intro id219959
Ref: e19959
Node: API Basics23086
Ref: api-basics doc23180
Ref: 1023180
Ref: api-basics api-basics23180
Ref: f23180
Ref: api-basics id123180
Ref: 1123180
Node: Request Format and Responses24833
Ref: api-basics api-format24930
Ref: 1224930
Ref: api-basics request-format-and-responses24930
Ref: 1624930
Node: HTTP Headers26536
Ref: api-basics http-headers26653
Ref: 1726653
Node: Request Headers27111
Ref: api-basics request-headers27201
Ref: 1827201
Node: Response Headers29844
Ref: api-basics response-headers29934
Ref: 1929934
Node: JSON Basics31711
Ref: api-basics json31817
Ref: 1331817
Ref: api-basics json-basics31817
Ref: 1a31817
Node: HTTP Status Codes33838
Ref: api-basics http-status-codes33951
Ref: 1b33951
Ref: api-basics errors33951
Ref: 1433951
Node: HTTP Range Requests36852
Ref: api-basics http-range-requests36945
Ref: 1c36945
Ref: HTTP Range Requests-Footnote-138790
Node: Configuration38846
Ref: configuring rfc-261638947
Ref: 1d38947
Ref: configuring configuration38947
Ref: 1e38947
Ref: configuring doc38947
Ref: 1f38947
Ref: configuring configuring38947
Ref: 738947
Node: CouchDB Configuration Files39320
Ref: configuring couchdb-configuration-files39435
Ref: 2039435
Node: Configuration File Locations39500
Ref: configuring configuration-file-locations39644
Ref: 2139644
Node: Update Notifications40284
Ref: configuring update-notifications40424
Ref: 2240424
Ref: configuring id140424
Ref: 2340424
Node: MochiWeb Server Options40475
Ref: configuring mochiweb-server-options40623
Ref: 2440623
Node: Socket Options Configuration Setting40963
Ref: configuring socket-options-configuration-setting41104
Ref: 2541104
Ref: Socket Options Configuration Setting-Footnote-141745
Node: Virtual Hosts41802
Ref: configuring virtual-hosts41940
Ref: 2641940
Ref: configuring erlang-inet41940
Ref: 2741940
Node: HTTP Rewrite Handler43464
Ref: configuring http-rewrite-handler43599
Ref: 2843599
Node: Configuring Server Administrators45942
Ref: configuring configuring-server-administrators46074
Ref: 2946074
Ref: Configuring Server Administrators-Footnote-148134
Node: OS Daemons48176
Ref: configuring os-daemons48306
Ref: 2a48306
Ref: OS Daemons-Footnote-149696
Node: Native SSL Support49764
Ref: configuring native-ssl-support49874
Ref: 2c49874
Ref: configuring couchdb-externals-api49874
Ref: 2d49874
Node: HTTP Proxying53159
Ref: configuring http-proxying53288
Ref: 2b53288
Ref: configuring id253288
Ref: 2e53288
Node: Cross-Origin Resource Sharing55669
Ref: configuring cross-origin-resource-sharing55771
Ref: 2f55771
Ref: configuring cors55771
Ref: 3055771
Node: Enabling CORS57302
Ref: configuring enabling-cors57410
Ref: 3157410
Node: Passing Credentials57787
Ref: configuring passing-credentials57921
Ref: 3257921
Node: Tightening Access58388
Ref: configuring tightening-access58532
Ref: 3358532
Node: Configuration per vhost59101
Ref: configuring configuration-per-vhost59243
Ref: 3459243
Node: Useful References59562
Ref: configuring useful-references59678
Ref: 3559678
Ref: Useful References-Footnote-160317
Ref: Useful References-Footnote-260374
Ref: Useful References-Footnote-360416
Ref: Useful References-Footnote-460458
Ref: Useful References-Footnote-560500
Ref: Useful References-Footnote-660542
Ref: Useful References-Footnote-760575
Ref: Useful References-Footnote-860657
Ref: Useful References-Footnote-960717
Ref: Useful References-Footnote-1060784
Ref: Useful References-Footnote-1160867
Ref: Useful References-Footnote-1260899
Ref: Useful References-Footnote-1360952
Node: Replicator Database61029
Ref: replication replication61131
Ref: d61131
Ref: replication doc61131
Ref: 3661131
Ref: replication replicator-database61131
Ref: 3761131
Node: Basics61993
Ref: replication basics62106
Ref: 3862106
Node: Documents describing the same replication65217
Ref: replication documents-describing-the-same-replication65361
Ref: 3965361
Node: Canceling replications66887
Ref: replication canceling-replications67039
Ref: 3a67039
Node: Server restart67641
Ref: replication server-restart67784
Ref: 3b67784
Node: Changing the Replicator Database68251
Ref: replication changing-the-replicator-database68407
Ref: 3c68407
Node: Replicating the replicator database70781
Ref: replication replicating-the-replicator-database70934
Ref: 3d70934
Node: Delegations72138
Ref: replication delegations72250
Ref: 3e72250
Node: Design Docs74712
Ref: ddocs ddocs74814
Ref: 3f74814
Ref: ddocs doc74814
Ref: 4074814
Ref: ddocs design-docs74814
Ref: 4174814
Node: View functions75661
Ref: ddocs viewfun75747
Ref: 4875747
Ref: ddocs view-functions75747
Ref: 4975747
Node: Map functions75930
Ref: ddocs map-functions76033
Ref: 4a76033
Ref: ddocs mapfun76033
Ref: 4b76033
Node: Reduce and rereduce functions77464
Ref: ddocs reducefun77567
Ref: 4f77567
Ref: ddocs reduce-and-rereduce-functions77567
Ref: 5077567
Ref: ddocs redfun77640
Ref: 5177640
Node: Show functions81770
Ref: ddocs showfun81879
Ref: 5281879
Ref: ddocs show-functions81879
Ref: 5381879
Ref: Show functions-Footnote-185566
Ref: Show functions-Footnote-285652
Node: List functions85708
Ref: ddocs list-functions85819
Ref: 5685819
Ref: ddocs listfun85819
Ref: 5785819
Ref: List functions-Footnote-187319
Ref: List functions-Footnote-287429
Node: Update functions87485
Ref: ddocs update-functions87598
Ref: 5987598
Ref: ddocs updatefun87598
Ref: 5a87598
Ref: Update functions-Footnote-189586
Node: Filter functions89649
Ref: ddocs filter-functions89782
Ref: 5b89782
Ref: ddocs filterfun89782
Ref: 5c89782
Node: Classic filters90329
Ref: ddocs classic-filters90419
Ref: 5e90419
Node: View filters93578
Ref: ddocs view-filters93668
Ref: 5f93668
Ref: View filters-Footnote-194524
Ref: View filters-Footnote-294589
Node: Validate document update functions94660
Ref: ddocs validate-document-update-functions94768
Ref: 6094768
Ref: ddocs vdufun94768
Ref: 6194768
Ref: ddocs validatefun94847
Ref: 6294847
Ref: Validate document update functions-Footnote-1100329
Ref: Validate document update functions-Footnote-2100391
Node: Query Servers100456
Ref: query-servers doc100551
Ref: 63100551
Ref: query-servers query-servers100551
Ref: 64100551
Node: JavaScript100683
Ref: query-servers queryserver-js100759
Ref: 42100759
Ref: query-servers javascript100759
Ref: 65100759
Node: Design functions context102148
Ref: query-servers design-functions-context102245
Ref: 6e102245
Ref: query-servers emit102406
Ref: 4c102406
Ref: query-servers getRow102740
Ref: 66102740
Ref: query-servers JSON103191
Ref: 67103191
Ref: query-servers isArray103240
Ref: 68103240
Ref: query-servers log103520
Ref: 69103520
Ref: query-servers provides104085
Ref: 55104085
Ref: query-servers registerType104349
Ref: 54104349
Ref: query-servers require105349
Ref: 4e105349
Ref: query-servers send105644
Ref: 6a105644
Ref: query-servers start105929
Ref: 6b105929
Ref: query-servers sum106681
Ref: 6c106681
Ref: query-servers toJSON106834
Ref: 6d106834
Ref: Design functions context-Footnote-1107098
Node: CommonJS Modules107190
Ref: query-servers commonjs107287
Ref: 4d107287
Ref: query-servers commonjs-modules107287
Ref: 6f107287
Ref: CommonJS Modules-Footnote-1108947
Node: Erlang108998
Ref: query-servers queryserver-erlang109074
Ref: 70109074
Ref: query-servers erlang109074
Ref: 71109074
Ref: query-servers Emit109922
Ref: 72109922
Ref: query-servers FoldRows110217
Ref: 73110217
Ref: query-servers GetRow110830
Ref: 74110830
Ref: query-servers Log111475
Ref: 75111475
Ref: query-servers Send112102
Ref: 76112102
Ref: query-servers Start112407
Ref: 77112407
Node: Changes Feed112977
Ref: changes changes113074
Ref: 5d113074
Ref: changes changes-feed113074
Ref: 78113074
Ref: changes doc113074
Ref: 79113074
Node: Polling113176
Ref: changes polling113254
Ref: 7a113254
Ref: Polling-Footnote-1118090
Node: Long Polling118159
Ref: changes long-polling118256
Ref: 7b118256
Node: Continuous118783
Ref: changes continuous118885
Ref: 7c118885
Node: Event Source120073
Ref: changes section-in-the-book120154
Ref: 7d120154
Ref: changes event-source120154
Ref: 7e120154
Ref: Event Source-Footnote-1121283
Node: API Reference121324
Ref: api/reference doc121432
Ref: 7f121432
Ref: api/reference api-overview121432
Ref: 15121432
Ref: api/reference w3c-eventsource-specification121432
Ref: 80121432
Ref: api/reference api-reference121432
Ref: 81121432
Node: Database Methods125869
Ref: api/database database-methods125961
Ref: 82125961
Ref: api/database doc125961
Ref: 83125961
Ref: api/database api-db125961
Ref: 84125961
Node: GET /db129853
Ref: api/database api-get-db129930
Ref: 85129930
Ref: api/database get-db129930
Ref: 86129930
Node: PUT /db132376
Ref: api/database put-db132472
Ref: 87132472
Node: DELETE /db133418
Ref: api/database delete-db133523
Ref: 88133523
Node: GET /db/_changes134245
Ref: api/database api-changes134360
Ref: 89134360
Ref: api/database get-db-changes134360
Ref: 8a134360
Node: Filtering139684
Ref: api/database filtering139747
Ref: 8c139747
Node: POST /db/_compact140751
Ref: api/database post-db-compact140884
Ref: 8d140884
Ref: api/database api-compact140884
Ref: 8e140884
Node: POST /db/_compact/design-doc142476
Ref: api/database post-db-compact-design-doc142615
Ref: 8f142615
Ref: api/database api-compact-ddoc142615
Ref: 90142615
Node: POST /db/_view_cleanup143641
Ref: api/database post-db-view-cleanup143791
Ref: 91143791
Node: POST /db/_ensure_full_commit144259
Ref: api/database post-db-ensure-full-commit144400
Ref: 92144400
Node: POST /db/_bulk_docs145393
Ref: api/database post-db-bulk-docs145531
Ref: 93145531
Node: Inserting Documents in Bulk147100
Ref: api/database inserting-documents-in-bulk147219
Ref: 94147219
Node: Updating Documents in Bulk149329
Ref: api/database updating-documents-in-bulk149493
Ref: 97149493
Node: Bulk Documents Transaction Semantics151866
Ref: api/database bulk-documents-transaction-semantics152047
Ref: 98152047
Ref: api/database bulk-semantics152047
Ref: 95152047
Node: Bulk Document Validation and Conflict Errors156241
Ref: api/database bulk-validation156387
Ref: 96156387
Ref: api/database bulk-document-validation-and-conflict-errors156387
Ref: 99156387
Node: POST /db/_temp_view158484
Ref: api/database post-db-temp-view158609
Ref: 9a158609
Node: POST /db/_purge160112
Ref: api/database post-db-purge160235
Ref: 9b160235
Node: Updating Indexes162217
Ref: api/database updating-indexes162286
Ref: 9c162286
Node: GET /db/_all_docs163185
Ref: api/database get-db-all-docs163307
Ref: 9d163307
Node: POST /db/_all_docs168594
Ref: api/database post-db-all-docs168723
Ref: 9e168723
Node: POST /db/_missing_revs170059
Ref: api/database post-db-missing-revs170190
Ref: a0170190
Node: POST /db/_revs_diff170427
Ref: api/database post-db-revs-diff170557
Ref: a1170557
Node: GET /db/_security170826
Ref: api/database get-db-security170951
Ref: a2170951
Node: PUT /db/_security172468
Ref: api/database put-db-security172593
Ref: a3172593
Node: GET /db/_revs_limit173416
Ref: api/database get-db-revs-limit173543
Ref: a4173543
Node: PUT /db/_revs_limit174020
Ref: api/database put-db-revs-limit174121
Ref: a5174121
Node: Document Methods174908
Ref: api/documents doc175047
Ref: a6175047
Ref: api/documents json-object175047
Ref: a7175047
Ref: api/documents api-doc175047
Ref: a8175047
Ref: api/documents document-methods175047
Ref: a9175047
Node: POST /db176904
Ref: api/documents post-db176986
Ref: aa176986
Node: Specifying the Document ID178565
Ref: api/documents specifying-the-document-id178672
Ref: ab178672
Node: UUID generation algorithms179420
Ref: api/documents api-batch-writes179553
Ref: ac179553
Ref: api/documents uuid-generation-algorithms179553
Ref: ad179553
Node: Batch Mode Writes181157
Ref: api/documents batch-mode-writes181285
Ref: ae181285
Node: Including Attachments181858
Ref: api/documents including-attachments181951
Ref: af181951
Node: GET /db/doc183286
Ref: api/documents get-db-doc183389
Ref: b2183389
Ref: api/documents api-get-doc183389
Ref: 9f183389
Node: Attachments185749
Ref: api/documents attachments185845
Ref: b3185845
Node: Getting a List of Revisions187039
Ref: api/documents getting-a-list-of-revisions187182
Ref: b4187182
Node: Obtaining an Extended Revision History188358
Ref: api/documents obtaining-an-extended-revision-history188519
Ref: b5188519
Node: Obtaining a Specific Revision189793
Ref: api/documents obtaining-a-specific-revision189918
Ref: b6189918
Node: HEAD /db/doc190541
Ref: api/documents head-db-doc190647
Ref: b7190647
Node: PUT /db/doc192805
Ref: api/documents put-db-doc192914
Ref: b8192914
Ref: api/documents api-put-doc192914
Ref: b9192914
Node: Updating an Existing Document194467
Ref: api/documents updating-an-existing-document194545
Ref: ba194545
Node: DELETE /db/doc195642
Ref: api/documents api-del-doc195751
Ref: bb195751
Ref: api/documents delete-db-doc195751
Ref: bc195751
Node: COPY /db/doc197298
Ref: api/documents copy-db-doc197418
Ref: bd197418
Ref: api/documents api-copy-doc197418
Ref: be197418
Node: Copying a Document198463
Ref: api/documents copying-a-document198572
Ref: bf198572
Node: Copying from a Specific Revision199102
Ref: api/documents copying-from-a-specific-revision199251
Ref: c0199251
Node: Copying to an Existing Document199672
Ref: api/documents copying-to-an-existing-document199794
Ref: c1199794
Node: GET /db/doc/attachment200375
Ref: api/documents api-get-attachment200503
Ref: b1200503
Ref: api/documents get-db-doc-attachment200503
Ref: c2200503
Node: PUT /db/doc/attachment201029
Ref: api/documents api-put-attachment201170
Ref: b0201170
Ref: api/documents put-db-doc-attachment201170
Ref: c3201170
Node: Updating an Existing Attachment203363
Ref: api/documents updating-an-existing-attachment203454
Ref: c4203454
Node: DELETE /db/doc/attachment203800
Ref: api/documents delete-db-doc-attachment203910
Ref: c5203910
Node: Local non-replicating Document Methods205124
Ref: api/local post205270
Ref: c6205270
Ref: api/local api-local205270
Ref: c7205270
Ref: api/local doc205270
Ref: c8205270
Ref: api/local local-non-replicating-document-methods205270
Ref: c9205270
Node: GET /db/_local/local-doc206890
Ref: api/local get-db-local-local-doc207023
Ref: ca207023
Node: PUT /db/_local/local-doc208374
Ref: api/local put-db-local-local-doc208543
Ref: cb208543
Node: DELETE /db/_local/local-doc209066
Ref: api/local delete-db-local-local-doc209236
Ref: cc209236
Node: COPY /db/_local/local-doc210146
Ref: api/local copy-db-local-local-doc210283
Ref: cd210283
Node: Design Document Methods211044
Ref: api/design design-document-methods211195
Ref: ce211195
Ref: api/design doc211195
Ref: cf211195
Ref: api/design api-design211195
Ref: d0211195
Node: GET /db/_design/design-doc212893
Ref: api/design get-db-design-design-doc213015
Ref: d1213015
Node: PUT /db/_design/design-doc214861
Ref: api/design put-db-design-design-doc215021
Ref: d2215021
Node: DELETE /db/_design/design-doc215786
Ref: api/design delete-db-design-design-doc215947
Ref: d4215947
Node: COPY /db/_design/design-doc217281
Ref: api/design copy-db-design-design-doc217453
Ref: d5217453
Node: Copying a Design Document218443
Ref: api/design copying-a-design-document218577
Ref: d6218577
Node: Copying from a Specific Revision<2>219346
Ref: api/design copying-from-a-specific-revision219527
Ref: d7219527
Node: Copying to an Existing Design Document219956
Ref: api/design copying-to-an-existing-design-document220103
Ref: d8220103
Node: GET /db/_design/design-doc/attachment220728
Ref: api/design get-db-design-design-doc-attachment220908
Ref: d9220908
Node: PUT /db/_design/design-doc/attachment221503
Ref: api/design put-db-design-design-doc-attachment221696
Ref: da221696
Node: DELETE /db/_design/design-doc/attachment223934
Ref: api/design delete-db-design-design-doc-attachment224122
Ref: db224122
Node: GET /db/_design/design-doc/_info225413
Ref: api/design get-db-design-design-doc-info225606
Ref: dc225606
Ref: api/design api-get-view227607
Ref: dd227607
Node: GET /db/_design/design-doc/_view/view-name227608
Ref: api/design get-db-design-design-doc-view-view-name227804
Ref: de227804
Ref: api/design views227804
Ref: d3227804
Node: Querying Views and Indexes231630
Ref: api/design querying-views-and-indexes231766
Ref: df231766
Node: Sorting Returned Rows236243
Ref: api/design sorting-returned-rows236419
Ref: e0236419
Node: Specifying Start and End Values241279
Ref: api/design specifying-start-and-end-values241459
Ref: e1241459
Node: Using Limits and Skipping Rows241668
Ref: api/design using-limits-and-skipping-rows241854
Ref: e2241854
Node: View Reduction and Grouping241938
Ref: api/design view-reduction-and-grouping242084
Ref: e3242084
Node: POST /db/_design/design-doc/_view/view-name242162
Ref: api/design post-db-design-design-doc-view-view-name242368
Ref: e4242368
Node: Multi-document Fetching247251
Ref: api/design multi-document-fetching247355
Ref: e5247355
Node: GET /db/_design/design-doc/_show/show-name251103
Ref: api/design get-db-design-design-doc-show-show-name251314
Ref: e6251314
Node: POST /db/_design/design-doc/_show/show-name/doc251962
Ref: api/design post-db-design-design-doc-show-show-name-doc252199
Ref: e7252199
Node: GET /db/_design/design-doc/_list/list-name/other-design-doc/view-name252494
Ref: api/design get-db-design-design-doc-list-list-name-other-design-doc-view-name252759
Ref: e8252759
Node: POST /db/_design/design-doc/_list/list-name/other-design-doc/view-name253094
Ref: api/design post-db-design-design-doc-list-list-name-other-design-doc-view-name253364
Ref: e9253364
Node: GET /db/_design/design-doc/_list/list-name/view-name253702
Ref: api/design get-db-design-design-doc-list-list-name-view-name253956
Ref: ea253956
Node: POST /db/_design/design-doc/_list/list-name/view-name254235
Ref: api/design post-db-design-design-doc-list-list-name-view-name254468
Ref: eb254468
Node: PUT /db/_design/design-doc/_update/updatename/doc254750
Ref: api/design put-db-design-design-doc-update-updatename-doc254977
Ref: ec254977
Node: POST /db/_design/design-doc/_update/updatename255248
Ref: api/design post-db-design-design-doc-update-updatename255479
Ref: ed255479
Node: ALL /db/_design/design-doc/_rewrite/rewrite-name/anything255743
Ref: api/design all-db-design-design-doc-rewrite-rewrite-name-anything255916
Ref: ee255916
Node: Miscellaneous Methods256215
Ref: api/misc miscellaneous-methods256349
Ref: ef256349
Ref: api/misc api-misc256349
Ref: f0256349
Ref: api/misc doc256349
Ref: f1256349
Node: GET /257780
Ref: api/misc get257871
Ref: f2257871
Node: GET /_active_tasks258393
Ref: api/misc active-tasks258506
Ref: 9258506
Ref: api/misc get-active-tasks258506
Ref: f3258506
Node: GET /_all_dbs259598
Ref: api/misc get-all-dbs259715
Ref: f4259715
Node: GET /_log260233
Ref: api/misc get-log260348
Ref: f5260348
Node: POST /_replicate262251
Ref: api/misc post-replicate262367
Ref: f6262367
Ref: api/misc replicate262367
Ref: c262367
Node: Replication Operation264176
Ref: api/misc replication-operation264301
Ref: f7264301
Node: Specifying the Source and Target Database265283
Ref: api/misc specifying-the-source-and-target-database265435
Ref: f8265435
Node: Single Replication266997
Ref: api/misc single-replication267150
Ref: f9267150
Node: Continuous Replication269670
Ref: api/misc continuous-replication269814
Ref: fa269814
Node: Canceling Continuous Replication270918
Ref: api/misc canceling-continuous-replication271035
Ref: fb271035
Node: POST /_restart272198
Ref: api/misc post-restart272316
Ref: fc272316
Node: GET /_stats273229
Ref: api/misc get-stats273342
Ref: fd273342
Node: GET /_utils279158
Ref: api/misc get-utils279268
Ref: fe279268
Node: GET /_uuids279511
Ref: api/misc get-uuids279626
Ref: ff279626
Node: GET /favicon ico281298
Ref: api/misc get-favicon-ico281393
Ref: 101281393
Node: Configuration Methods281963
Ref: api/configuration doc282096
Ref: 102282096
Ref: api/configuration api-config282096
Ref: 103282096
Ref: api/configuration configuration-methods282096
Ref: 104282096
Node: GET /_config283181
Ref: api/configuration get-config283281
Ref: 105283281
Node: GET /_config/section288519
Ref: api/configuration get-config-section288652
Ref: 106288652
Node: GET /_config/section/key289662
Ref: api/configuration get-config-section-key289807
Ref: 107289807
Node: PUT /_config/section/key290584
Ref: api/configuration put-config-section-key290736
Ref: 108290736
Ref: api/configuration api-put-config290736
Ref: 100290736
Node: DELETE /_config/section/key291633
Ref: api/configuration delete-config-section-key291752
Ref: 109291752
Node: Authentication Methods292376
Ref: api/authn doc292479
Ref: 10a292479
Ref: api/authn authentication-methods292479
Ref: 10b292479
Node: JSON Structure Reference293268
Ref: json-structure json-structure-reference293387
Ref: 10c293387
Ref: json-structure doc293387
Ref: 10d293387
Node: All Database Documents294200
Ref: json-structure all-database-documents294315
Ref: 10e294315
Node: Bulk Document Response294803
Ref: json-structure bulk-document-response294941
Ref: 10f294941
Node: Bulk Documents295369
Ref: json-structure bulk-documents295519
Ref: 110295519
Node: Changes information for a database296105
Ref: json-structure changes-information-for-a-database296249
Ref: 111296249
Node: CouchDB Document296830
Ref: json-structure couchdb-document296980
Ref: 112296980
Node: CouchDB Error Status297297
Ref: json-structure couchdb-error-status297448
Ref: 113297448
Node: CouchDB database information object297806
Ref: json-structure couchdb-database-information-object297956
Ref: 114297956
Ref: json-structure dbinfo-object297956
Ref: 43297956
Node: Design Document299346
Ref: json-structure design-document299503
Ref: 115299503
Node: Design Document Information300017
Ref: json-structure design-document-information300164
Ref: 116300164
Node: Document with Attachments301514
Ref: json-structure document-with-attachments301666
Ref: 117301666
Node: List of Active Tasks302259
Ref: json-structure list-of-active-tasks302404
Ref: 118302404
Node: Replication Settings302849
Ref: json-structure replication-settings302987
Ref: 119302987
Node: Replication Status303732
Ref: json-structure replication-status303864
Ref: 11a303864
Node: Request object305111
Ref: json-structure id1305238
Ref: 11b305238
Ref: json-structure request-object305238
Ref: 44305238
Node: Response object309799
Ref: json-structure response-object309961
Ref: 45309961
Ref: json-structure id2309961
Ref: 11c309961
Node: Returned CouchDB Document with Detailed Revision Info311571
Ref: json-structure returned-couchdb-document-with-detailed-revision-info311763
Ref: 11d311763
Node: Returned CouchDB Document with Revision Info312351
Ref: json-structure returned-couchdb-document-with-revision-info312562
Ref: 11e312562
Node: Returned Document with Attachments313211
Ref: json-structure returned-document-with-attachments313384
Ref: 11f313384
Node: Security Object314136
Ref: json-structure security-object314284
Ref: 47314284
Ref: json-structure id3314284
Ref: 120314284
Node: User Context Object315173
Ref: json-structure user-context-object315308
Ref: 121315308
Ref: json-structure userctx-object315308
Ref: 46315308
Node: View Head Information315799
Ref: json-structure view-head-info-object315910
Ref: 58315910
Ref: json-structure view-head-information315910
Ref: 122315910
Node: Configuration Reference316309
Ref: config_reference configuration-reference316430
Ref: 123316430
Ref: config_reference doc316430
Ref: 124316430
Node: Configuration Groups317118
Ref: config_reference configuration-groups317241
Ref: 125317241
Node: attachments Configuration Options318479
Ref: config_reference attachments-configuration-options318640
Ref: 126318640
Node: couchdb Configuration Options318987
Ref: config_reference couchdb-configuration-options319157
Ref: 127319157
Node: daemons Configuration Options319905
Ref: config_reference daemons-configuration-options320081
Ref: 128320081
Node: httpd_db_handlers Configuration Options320868
Ref: config_reference httpd-db-handlers-configuration-options321053
Ref: 129321053
Node: couch_httpd_auth Configuration Options321555
Ref: config_reference couch-httpd-auth-configuration-options321738
Ref: 12a321738
Node: httpd Configuration Options322272
Ref: config_reference httpd-configuration-options322459
Ref: 12b322459
Node: httpd_design_handlers Configuration Options323281
Ref: config_reference httpd-design-handlers-configuration-options323473
Ref: 12c323473
Node: httpd_global_handlers Configuration Options324016
Ref: config_reference httpd-global-handlers-configuration-options324206
Ref: 12d324206
Node: log Configuration Options325116
Ref: config_reference log-configuration-options325298
Ref: 12e325298
Node: query_servers Configuration Options325661
Ref: config_reference query-servers-configuration-options325841
Ref: 12f325841
Node: query_server_config Configuration Options326125
Ref: config_reference query-server-config-configuration-options326312
Ref: 130326312
Node: replicator Configuration Options326610
Ref: config_reference replicator-configuration-options326789
Ref: 131326789
Node: stats Configuration Options327140
Ref: config_reference stats-configuration-options327305
Ref: 132327305
Node: uuids Configuration Options327618
Ref: config_reference uuids-configuration-options327777
Ref: 133327777
Node: cors Configuration Options328044
Ref: config_reference cors-configuration-options328200
Ref: 134328200
Node: cors vhost Configuration328860
Ref: config_reference cors-vhost-configuration328980
Ref: 135328980
Node: Release History329247
Ref: changelog doc329349
Ref: 136329349
Ref: changelog release-history329349
Ref: 137329349
Node: 1 3 x Branch334423
Ref: changelog x-branch334509
Ref: 138334509
Node: Upgrade Notes334638
Ref: changelog upgrade-notes334723
Ref: 139334723
Node: Version 1 3 1335541
Ref: changelog version-1-3-1335648
Ref: 13a335648
Node: Replicator335765
Ref: changelog replicator335845
Ref: 13b335845
Ref: Replicator-Footnote-1336026
Ref: Replicator-Footnote-2336084
Node: Log System336165
Ref: changelog log-system336265
Ref: 13c336265
Ref: Log System-Footnote-1336465
Ref: Log System-Footnote-2336546
Node: View Server336604
Ref: changelog view-server336707
Ref: 13d336707
Ref: View Server-Footnote-1336883
Ref: View Server-Footnote-2336941
Node: Miscellaneous337022
Ref: changelog miscellaneous337106
Ref: 13e337106
Ref: Miscellaneous-Footnote-1337368
Ref: Miscellaneous-Footnote-2337426
Node: Version 1 3 0337507
Ref: changelog version-1-3-0337592
Ref: 13f337592
Node: Database core337921
Ref: changelog database-core338007
Ref: 140338007
Ref: Database core-Footnote-1338230
Ref: Database core-Footnote-2338288
Ref: Database core-Footnote-3338369
Node: Documentation338450
Ref: changelog documentation338550
Ref: 141338550
Ref: Documentation-Footnote-1338728
Ref: Documentation-Footnote-2338786
Node: Futon338818
Ref: changelog futon338919
Ref: 142338919
Ref: Futon-Footnote-1339479
Ref: Futon-Footnote-2339537
Ref: Futon-Footnote-3339618
Ref: Futon-Footnote-4339676
Ref: Futon-Footnote-5339756
Ref: Futon-Footnote-6339813
Ref: Futon-Footnote-7339894
Ref: Futon-Footnote-8339951
Ref: Futon-Footnote-9340032
Ref: Futon-Footnote-10340090
Ref: Futon-Footnote-11340149
Node: HTTP Interface340231
Ref: changelog http-interface340332
Ref: 143340332
Ref: HTTP Interface-Footnote-1343368
Ref: HTTP Interface-Footnote-2343425
Ref: HTTP Interface-Footnote-3343506
Ref: HTTP Interface-Footnote-4343564
Ref: HTTP Interface-Footnote-5343645
Ref: HTTP Interface-Footnote-6343703
Ref: HTTP Interface-Footnote-7343784
Ref: HTTP Interface-Footnote-8343842
Ref: HTTP Interface-Footnote-9343925
Ref: HTTP Interface-Footnote-10343983
Ref: HTTP Interface-Footnote-11344065
Ref: HTTP Interface-Footnote-12344124
Ref: HTTP Interface-Footnote-13344206
Ref: HTTP Interface-Footnote-14344265
Ref: HTTP Interface-Footnote-15344347
Ref: HTTP Interface-Footnote-16344406
Ref: HTTP Interface-Footnote-17344488
Ref: HTTP Interface-Footnote-18344547
Ref: HTTP Interface-Footnote-19344629
Ref: HTTP Interface-Footnote-20344688
Ref: HTTP Interface-Footnote-21344770
Ref: HTTP Interface-Footnote-22344829
Ref: HTTP Interface-Footnote-23344911
Ref: HTTP Interface-Footnote-24344970
Ref: HTTP Interface-Footnote-25345052
Ref: HTTP Interface-Footnote-26345111
Ref: HTTP Interface-Footnote-27345193
Ref: HTTP Interface-Footnote-28345252
Ref: HTTP Interface-Footnote-29345334
Ref: HTTP Interface-Footnote-30345393
Ref: HTTP Interface-Footnote-31345475
Ref: HTTP Interface-Footnote-32345533
Ref: HTTP Interface-Footnote-33345615
Ref: HTTP Interface-Footnote-34345673
Ref: HTTP Interface-Footnote-35345824
Ref: HTTP Interface-Footnote-36345906
Ref: HTTP Interface-Footnote-37345964
Ref: HTTP Interface-Footnote-38346022
Ref: HTTP Interface-Footnote-39346080
Ref: HTTP Interface-Footnote-40346164
Ref: HTTP Interface-Footnote-41346246
Ref: HTTP Interface-Footnote-42346328
Ref: HTTP Interface-Footnote-43346412
Ref: HTTP Interface-Footnote-44346496
Ref: HTTP Interface-Footnote-45346578
Ref: HTTP Interface-Footnote-46346662
Node: Log System<2>346746
Ref: changelog id2346855
Ref: 144346855
Ref: Log System<2>-Footnote-1347256
Ref: Log System<2>-Footnote-2347314
Ref: Log System<2>-Footnote-3347395
Ref: Log System<2>-Footnote-4347478
Ref: Log System<2>-Footnote-5347559
Node: Replicator<2>347642
Ref: changelog id3347745
Ref: 145347745
Ref: Replicator<2>-Footnote-1348392
Ref: Replicator<2>-Footnote-2348450
Ref: Replicator<2>-Footnote-3348508
Ref: Replicator<2>-Footnote-4348589
Ref: Replicator<2>-Footnote-5348647
Ref: Replicator<2>-Footnote-6348728
Ref: Replicator<2>-Footnote-7348786
Ref: Replicator<2>-Footnote-8348869
Ref: Replicator<2>-Footnote-9348927
Node: Security349008
Ref: changelog security349115
Ref: 146349115
Ref: Security-Footnote-1349313
Ref: Security-Footnote-2349371
Node: Source Repository349452
Ref: changelog source-repository349560
Ref: 147349560
Ref: Source Repository-Footnote-1349714
Ref: Source Repository-Footnote-2349762
Node: Storage System349821
Ref: changelog storage-system349931
Ref: 148349931
Ref: changelog git349931
Ref: 149349931
Node: Test Suite350075
Ref: changelog test-suite350189
Ref: 14a350189
Ref: Test Suite-Footnote-1350908
Ref: Test Suite-Footnote-2350966
Ref: Test Suite-Footnote-3351048
Ref: Test Suite-Footnote-4351106
Ref: Test Suite-Footnote-5351164
Ref: Test Suite-Footnote-6351244
Ref: Test Suite-Footnote-7351302
Ref: Test Suite-Footnote-8351382
Node: URL Rewriter & Vhosts351440
Ref: changelog url-rewriter-vhosts351555
Ref: 14b351555
Ref: URL Rewriter & Vhosts-Footnote-1351768
Ref: URL Rewriter & Vhosts-Footnote-2351826
Node: UUID Algorithms351907
Ref: changelog uuid-algorithms352033
Ref: 14c352033
Ref: UUID Algorithms-Footnote-1352184
Ref: UUID Algorithms-Footnote-2352242
Node: Query and View Server352323
Ref: changelog query-and-view-server352435
Ref: 14d352435
Ref: Query and View Server-Footnote-1353346
Ref: Query and View Server-Footnote-2353404
Ref: Query and View Server-Footnote-3353485
Ref: Query and View Server-Footnote-4353543
Ref: Query and View Server-Footnote-5353624
Ref: Query and View Server-Footnote-6353682
Ref: Query and View Server-Footnote-7353740
Ref: Query and View Server-Footnote-8353821
Ref: Query and View Server-Footnote-9353879
Ref: Query and View Server-Footnote-10353936
Ref: Query and View Server-Footnote-11353994
Ref: Query and View Server-Footnote-12354075
Node: Windows354159
Ref: changelog windows354247
Ref: 14e354247
Ref: Windows-Footnote-1354494
Ref: Windows-Footnote-2354552
Ref: Windows-Footnote-3354633
Node: 1 2 x Branch354716
Ref: changelog id4354823
Ref: 14f354823
Node: Upgrade Notes<2>355214
Ref: changelog id6355302
Ref: 150355302
Node: Security changes355648
Ref: changelog security-changes355747
Ref: 151355747
Node: Database Compression356760
Ref: changelog database-compression356859
Ref: 152356859
Node: Version 1 2 0357430
Ref: changelog version-1-2-0357518
Ref: 153357518
Node: Authentication357770
Ref: changelog authentication357856
Ref: 154357856
Node: Build System358724
Ref: changelog build-system358827
Ref: 155358827
Ref: Build System-Footnote-1359343
Node: Futon<2>359401
Ref: changelog id7359507
Ref: 156359507
Node: HTTP Interface<2>359768
Ref: changelog id8359875
Ref: 157359875
Node: Replicator<3>360389
Ref: changelog id9360505
Ref: 158360505
Node: Storage System<2>361180
Ref: changelog id10361293
Ref: 159361293
Node: View Server<2>362363
Ref: changelog id11362468
Ref: 15a362468
Node: OAuth362921
Ref: changelog oauth363000
Ref: 15b363000
Node: 1 1 x Branch363097
Ref: changelog id12363204
Ref: 15c363204
Node: Version 1 1 1363315
Ref: changelog version-1-1-1363400
Ref: 15d363400
Node: Version 1 1 0364896
Ref: changelog version-1-1-0364981
Ref: 15e364981
Node: Externals365317
Ref: changelog externals365394
Ref: 15f365394
Node: Futon<3>365561
Ref: changelog id14365664
Ref: 160365664
Node: HTTP Interface<3>365745
Ref: changelog id15365852
Ref: 161365852
Node: Replicator<4>366496
Ref: changelog id16366612
Ref: 162366612
Node: Storage System<3>367002
Ref: changelog id17367125
Ref: 163367125
Node: URL Rewriter & Vhosts<2>367228
Ref: changelog id18367352
Ref: 164367352
Node: View Server<3>367450
Ref: changelog id19367548
Ref: 165367548
Node: 1 0 x Branch368006
Ref: changelog id20368114
Ref: 166368114
Node: Version 1 0 3369022
Ref: changelog version-1-0-3369107
Ref: 167369107
Node: General369362
Ref: changelog general369444
Ref: 168369444
Node: Etap Test Suite369532
Ref: changelog etap-test-suite369631
Ref: 169369631
Node: Futon<4>369822
Ref: changelog id22369931
Ref: 16a369931
Node: HTTP Interface<4>370003
Ref: changelog id23370110
Ref: 16b370110
Node: Replicator<5>370434
Ref: changelog id24370544
Ref: 16c370544
Node: Security<2>370844
Ref: changelog id25370954
Ref: 16d370954
Node: Storage System<4>371085
Ref: changelog id26371192
Ref: 16e371192
Node: Windows<2>371348
Ref: changelog id27371435
Ref: 16f371435
Ref: Windows<2>-Footnote-1371656
Ref: Windows<2>-Footnote-2371714
Node: Version 1 0 2371771
Ref: changelog version-1-0-2371878
Ref: 170371878
Node: Futon<5>372113
Ref: changelog id28372198
Ref: 171372198
Node: HTTP Interface<5>372438
Ref: changelog id29372545
Ref: 172372545
Ref: HTTP Interface<5>-Footnote-1372856
Node: Log System<3>372914
Ref: changelog id30373026
Ref: 173373026
Node: Replicator<6>373145
Ref: changelog id31373257
Ref: 174373257
Node: Storage System<5>373703
Ref: changelog id32373816
Ref: 175373816
Ref: Storage System<5>-Footnote-1374976
Ref: Storage System<5>-Footnote-2375033
Node: View Server<4>375090
Ref: changelog id33375181
Ref: 176375181
Ref: View Server<4>-Footnote-1375763
Node: Version 1 0 1375820
Ref: changelog version-1-0-1375927
Ref: 177375927
Node: Authentication<2>376172
Ref: changelog id34376277
Ref: 178376277
Node: Build and System Integration376449
Ref: changelog build-and-system-integration376571
Ref: 179376571
Node: Futon<6>376705
Ref: changelog id35376827
Ref: 17a376827
Node: HTTP Interface<6>376922
Ref: changelog id36377029
Ref: 17b377029
Node: Replicator<7>377269
Ref: changelog id37377385
Ref: 17c377385
Node: Storage System<6>377609
Ref: changelog id38377699
Ref: 17d377699
Ref: Storage System<6>-Footnote-1377904
Node: Version 1 0 0377961
Ref: changelog version-1-0-0378046
Ref: 17e378046
Node: Security<3>378192
Ref: changelog id39378280
Ref: 17f378280
Node: Storage System<7>378466
Ref: changelog id40378577
Ref: 180378577
Node: View Server<5>378854
Ref: changelog id41378945
Ref: 181378945
Node: 0 11 x Branch379085
Ref: changelog id42379194
Ref: 182379194
Node: Version 0 11 2380190
Ref: changelog version-0-11-2380278
Ref: 183380278
Node: Authentication<3>380480
Ref: changelog id44380566
Ref: 184380566
Node: Futon<7>380678
Ref: changelog id45380790
Ref: 185380790
Node: HTTP Interface<7>380885
Ref: changelog id46380993
Ref: 186380993
Node: Replicator<8>381095
Ref: changelog id47381206
Ref: 187381206
Node: Security<4>381466
Ref: changelog id48381551
Ref: 188381551
Node: Version 0 11 1381656
Ref: changelog version-0-11-1381767
Ref: 189381767
Node: Build and System Integration<2>382216
Ref: changelog id49382328
Ref: 18a382328
Node: Configuration System382687
Ref: changelog configuration-system382816
Ref: 18b382816
Node: Futon<8>382920
Ref: changelog id50383035
Ref: 18c383035
Node: HTTP Interface<8>383426
Ref: changelog id51383539
Ref: 18d383539
Node: JavaScript Clients384047
Ref: changelog javascript-clients384165
Ref: 18e384165
Node: Log System<4>384717
Ref: changelog id52384836
Ref: 18f384836
Node: Replication System385000
Ref: changelog replication-system385112
Ref: 190385112
Node: Security<5>385303
Ref: changelog id53385419
Ref: 191385419
Node: Storage System<8>385671
Ref: changelog id54385782
Ref: 192385782
Node: Test Suite<2>386268
Ref: changelog id55386382
Ref: 193386382
Node: View Server<6>386474
Ref: changelog id56386595
Ref: 194386595
Node: URL Rewriter & Vhosts<3>386895
Ref: changelog id57386994
Ref: 195386994
Node: Version 0 11 0387282
Ref: changelog version-0-11-0387370
Ref: 196387370
Node: Build and System Integration<3>387678
Ref: changelog id58387778
Ref: 197387778
Node: Futon<9>388368
Ref: changelog id59388494
Ref: 198388494
Node: HTTP Interface<9>389163
Ref: changelog id60389269
Ref: 199389269
Node: Replication389445
Ref: changelog replication389561
Ref: 19a389561
Node: Runtime Statistics389857
Ref: changelog runtime-statistics389967
Ref: 19b389967
Node: Security<6>390253
Ref: changelog id61390369
Ref: 19c390369
Node: Storage System<9>390788
Ref: changelog id62390900
Ref: 19d390900
Node: View Server<7>391154
Ref: changelog id63391246
Ref: 19e391246
Node: 0 10 x Branch391933
Ref: changelog id64392042
Ref: 19f392042
Node: Version 0 10 1392467
Ref: changelog version-0-10-1392555
Ref: 1a0392555
Node: Build and System Integration<4>392731
Ref: changelog id66392836
Ref: 1a1392836
Node: Replicator<9>392967
Ref: changelog id67393093
Ref: 1a2393093
Node: Query Server393201
Ref: changelog query-server393301
Ref: 1a3393301
Node: Stats393416
Ref: changelog stats393494
Ref: 1a4393494
Node: Version 0 10 0393574
Ref: changelog version-0-10-0393662
Ref: 1a5393662
Node: Build and System Integration<5>393870
Ref: changelog id68393980
Ref: 1a6393980
Node: HTTP Interface<10>394194
Ref: changelog id69394327
Ref: 1a7394327
Node: Storage Format394496
Ref: changelog storage-format394612
Ref: 1a8394612
Node: View Server<8>394778
Ref: changelog id70394867
Ref: 1a9394867
Node: 0 9 x Branch394977
Ref: changelog id71395085
Ref: 1aa395085
Node: Version 0 9 2395926
Ref: changelog version-0-9-2396011
Ref: 1ab396011
Node: Build and System Integration<6>396160
Ref: changelog id73396265
Ref: 1ac396265
Node: Replication<2>396443
Ref: changelog id74396548
Ref: 1ad396548
Ref: Replication<2>-Footnote-1396716
Node: Version 0 9 1396773
Ref: changelog version-0-9-1396880
Ref: 1ae396880
Node: Build and System Integration<7>397189
Ref: changelog id75397310
Ref: 1af397310
Node: Configuration and stats system397678
Ref: changelog configuration-and-stats-system397821
Ref: 1b0397821
Node: Database Core398009
Ref: changelog id76398138
Ref: 1b1398138
Ref: Database Core-Footnote-1398482
Node: External Handlers398539
Ref: changelog external-handlers398647
Ref: 1b2398647
Node: Futon<10>398727
Ref: changelog id77398840
Ref: 1b3398840
Node: HTTP Interface<11>398935
Ref: changelog id78399053
Ref: 1b4399053
Node: JavaScript View Server399170
Ref: changelog javascript-view-server399293
Ref: 1b5399293
Node: Replication<3>399398
Ref: changelog id79399494
Ref: 1b6399494
Node: Version 0 9 0399917
Ref: changelog version-0-9-0400002
Ref: 1b7400002
Node: Build and System Integration<8>400353
Ref: changelog id80400477
Ref: 1b8400477
Node: Configuration and stats system<2>401194
Ref: changelog id81401343
Ref: 1b9401343
Node: Database Core<2>401574
Ref: changelog id82401722
Ref: 1ba401722
Node: Design Document Resource Paths402102
Ref: changelog design-document-resource-paths402237
Ref: 1bb402237
Node: Futon Utility Client402553
Ref: changelog futon-utility-client402690
Ref: 1bc402690
Node: HTTP Interface<12>403609
Ref: changelog id83403730
Ref: 1bd403730
Node: Replication<4>404597
Ref: changelog id84404689
Ref: 1be404689
Node: 0 8 x Branch404911
Ref: changelog id85404997
Ref: 1bf404997
Node: Version 0 8 1-incubating405629
Ref: changelog version-0-8-1-incubating405736
Ref: 1c0405736
Node: Build and System Integration<9>406022
Ref: changelog id87406140
Ref: 1c1406140
Node: Database Core<3>406497
Ref: changelog id88406633
Ref: 1c2406633
Node: Futon<11>407255
Ref: changelog id89407385
Ref: 1c3407385
Ref: Futon<11>-Footnote-1407611
Node: JavaScript View Server<2>407667
Ref: changelog id90407799
Ref: 1c4407799
Ref: JavaScript View Server<2>-Footnote-1408096
Node: HTTP Interface<13>408152
Ref: changelog id91408266
Ref: 1c5408266
Ref: HTTP Interface<13>-Footnote-1408879
Ref: HTTP Interface<13>-Footnote-2408935
Node: Version 0 8 0-incubating408991
Ref: changelog version-0-8-0-incubating409098
Ref: 1c6409098
Node: Build and System Integration<10>409385
Ref: changelog id92409504
Ref: 1c7409504
Node: Database Core<4>410059
Ref: changelog id93410196
Ref: 1c8410196
Node: Futon<12>411138
Ref: changelog id94411268
Ref: 1c9411268
Ref: Futon<12>-Footnote-1412576
Ref: Futon<12>-Footnote-2412632
Ref: Futon<12>-Footnote-3412688
Node: JavaScript View Server<3>412744
Ref: changelog id95412876
Ref: 1ca412876
Ref: JavaScript View Server<3>-Footnote-1413630
Node: HTTP Interface<14>413686
Ref: changelog id96413800
Ref: 1cb413800
Ref: HTTP Interface<14>-Footnote-1415609
Ref: HTTP Interface<14>-Footnote-2415664
Node: Index415720
Ref: 8b418603
Ref: api/database table-couchdb-api-db_db-json-changes418634

End Tag Table


Local Variables:
coding: utf-8
End:
